
STM32F103C8T6-ADC_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000738c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800749c  0800749c  0001749c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007564  08007564  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007564  08007564  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007564  08007564  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007564  08007564  00017564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007568  08007568  00017568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800756c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c4  200001e0  0800774c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013a4  0800774c  000213a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166a3  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003387  00000000  00000000  000368ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c0  00000000  00000000  00039c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f28  00000000  00000000  0003acf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017dd1  00000000  00000000  0003bc20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fae4  00000000  00000000  000539f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079b19  00000000  00000000  000634d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dcfee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000485c  00000000  00000000  000dd06c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007484 	.word	0x08007484

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007484 	.word	0x08007484

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr
 800093c:	0000      	movs	r0, r0
	...

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000946:	f000 fad9 	bl	8000efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094a:	f000 f84f 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094e:	f000 f8e9 	bl	8000b24 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000952:	f000 f8a9 	bl	8000aa8 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000956:	f005 fcc1 	bl	80062dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Test: Set GPIO pin high
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000960:	481f      	ldr	r0, [pc, #124]	; (80009e0 <main+0xa0>)
 8000962:	f001 f969 	bl	8001c38 <HAL_GPIO_WritePin>

	  // Get ADC value
	  HAL_ADC_Start(&hadc1);
 8000966:	481f      	ldr	r0, [pc, #124]	; (80009e4 <main+0xa4>)
 8000968:	f000 fbf4 	bl	8001154 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800096c:	f04f 31ff 	mov.w	r1, #4294967295
 8000970:	481c      	ldr	r0, [pc, #112]	; (80009e4 <main+0xa4>)
 8000972:	f000 fc9d 	bl	80012b0 <HAL_ADC_PollForConversion>
	  raw = (HAL_ADC_GetValue(&hadc1)) * 0.00080586;
 8000976:	481b      	ldr	r0, [pc, #108]	; (80009e4 <main+0xa4>)
 8000978:	f000 fd94 	bl	80014a4 <HAL_ADC_GetValue>
 800097c:	4603      	mov	r3, r0
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fd30 	bl	80003e4 <__aeabi_ui2d>
 8000984:	a314      	add	r3, pc, #80	; (adr r3, 80009d8 <main+0x98>)
 8000986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800098a:	f7ff fda5 	bl	80004d8 <__aeabi_dmul>
 800098e:	4603      	mov	r3, r0
 8000990:	460c      	mov	r4, r1
 8000992:	4618      	mov	r0, r3
 8000994:	4621      	mov	r1, r4
 8000996:	f7ff ffb1 	bl	80008fc <__aeabi_d2uiz>
 800099a:	4603      	mov	r3, r0
 800099c:	81fb      	strh	r3, [r7, #14]

	  // Test: Set GPIO low
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a4:	480e      	ldr	r0, [pc, #56]	; (80009e0 <main+0xa0>)
 80009a6:	f001 f947 	bl	8001c38 <HAL_GPIO_WritePin>

	  //Convert string and print
	  sprintf(msg, "%hu Volts\r\n", raw);
 80009aa:	89fa      	ldrh	r2, [r7, #14]
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	490e      	ldr	r1, [pc, #56]	; (80009e8 <main+0xa8>)
 80009b0:	4618      	mov	r0, r3
 80009b2:	f006 f955 	bl	8006c60 <siprintf>
	  CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fbc9 	bl	8000150 <strlen>
 80009be:	4603      	mov	r3, r0
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	4611      	mov	r1, r2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f005 fd46 	bl	8006458 <CDC_Transmit_FS>

	  //Pretend we have something else
	  HAL_Delay(1);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f000 fac7 	bl	8000f60 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80009d2:	e7c2      	b.n	800095a <main+0x1a>
 80009d4:	f3af 8000 	nop.w
 80009d8:	2c2e064e 	.word	0x2c2e064e
 80009dc:	3f4a680b 	.word	0x3f4a680b
 80009e0:	40011000 	.word	0x40011000
 80009e4:	2000042c 	.word	0x2000042c
 80009e8:	0800749c 	.word	0x0800749c

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b094      	sub	sp, #80	; 0x50
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f6:	2228      	movs	r2, #40	; 0x28
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f006 f928 	bl	8006c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000a38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 fff2 	bl	8002a2c <HAL_RCC_OscConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a4e:	f000 f8c7 	bl	8000be0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a52:	230f      	movs	r3, #15
 8000a54:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f002 fa5c 	bl	8002f2c <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a7a:	f000 f8b1 	bl	8000be0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000a7e:	2312      	movs	r3, #18
 8000a80:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000a82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a86:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000a88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a8c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 fc03 	bl	800329c <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a9c:	f000 f8a0 	bl	8000be0 <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3750      	adds	r7, #80	; 0x50
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <MX_ADC1_Init+0x74>)
 8000aba:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <MX_ADC1_Init+0x78>)
 8000abc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_ADC1_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <MX_ADC1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_ADC1_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_ADC1_Init+0x74>)
 8000ad2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ad6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad8:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <MX_ADC1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_ADC1_Init+0x74>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae4:	480d      	ldr	r0, [pc, #52]	; (8000b1c <MX_ADC1_Init+0x74>)
 8000ae6:	f000 fa5d 	bl	8000fa4 <HAL_ADC_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000af0:	f000 f876 	bl	8000be0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_ADC1_Init+0x74>)
 8000b06:	f000 fcd9 	bl	80014bc <HAL_ADC_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b10:	f000 f866 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2000042c 	.word	0x2000042c
 8000b20:	40012400 	.word	0x40012400

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b38:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <MX_GPIO_Init+0x90>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <MX_GPIO_Init+0x90>)
 8000b3e:	f043 0310 	orr.w	r3, r3, #16
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <MX_GPIO_Init+0x90>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0310 	and.w	r3, r3, #16
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <MX_GPIO_Init+0x90>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <MX_GPIO_Init+0x90>)
 8000b56:	f043 0320 	orr.w	r3, r3, #32
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_GPIO_Init+0x90>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0320 	and.w	r3, r3, #32
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <MX_GPIO_Init+0x90>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <MX_GPIO_Init+0x90>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_GPIO_Init+0x90>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b86:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <MX_GPIO_Init+0x94>)
 8000b88:	f001 f856 	bl	8001c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0310 	add.w	r3, r7, #16
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <MX_GPIO_Init+0x94>)
 8000ba6:	f000 feed 	bl	8001984 <HAL_GPIO_Init>

}
 8000baa:	bf00      	nop
 8000bac:	3720      	adds	r7, #32
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40011000 	.word	0x40011000

08000bbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d101      	bne.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bce:	f000 f9ab 	bl	8000f28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40012c00 	.word	0x40012c00

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_MspInit+0x5c>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <HAL_MspInit+0x5c>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6193      	str	r3, [r2, #24]
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	61d3      	str	r3, [r2, #28]
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_MspInit+0x60>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <HAL_MspInit+0x60>)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010000 	.word	0x40010000

08000c50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <HAL_ADC_MspInit+0x6c>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d121      	bne.n	8000cb4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4619      	mov	r1, r3
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <HAL_ADC_MspInit+0x74>)
 8000cb0:	f000 fe68 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cb4:	bf00      	nop
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40012400 	.word	0x40012400
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010800 	.word	0x40010800

08000cc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	; 0x30
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	2019      	movs	r0, #25
 8000cde:	f000 fe26 	bl	800192e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8000ce2:	2019      	movs	r0, #25
 8000ce4:	f000 fe3f 	bl	8001966 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ce8:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <HAL_InitTick+0x9c>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a1d      	ldr	r2, [pc, #116]	; (8000d64 <HAL_InitTick+0x9c>)
 8000cee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <HAL_InitTick+0x9c>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d00:	f107 0210 	add.w	r2, r7, #16
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 fa78 	bl	8003200 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d10:	f002 fa62 	bl	80031d8 <HAL_RCC_GetPCLK2Freq>
 8000d14:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d18:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <HAL_InitTick+0xa0>)
 8000d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1e:	0c9b      	lsrs	r3, r3, #18
 8000d20:	3b01      	subs	r3, #1
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_InitTick+0xa4>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <HAL_InitTick+0xa8>)
 8000d28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_InitTick+0xa4>)
 8000d2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d30:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d32:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <HAL_InitTick+0xa4>)
 8000d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d36:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <HAL_InitTick+0xa4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_InitTick+0xa4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d44:	4809      	ldr	r0, [pc, #36]	; (8000d6c <HAL_InitTick+0xa4>)
 8000d46:	f002 fc1b 	bl	8003580 <HAL_TIM_Base_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d104      	bne.n	8000d5a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <HAL_InitTick+0xa4>)
 8000d52:	f002 fc49 	bl	80035e8 <HAL_TIM_Base_Start_IT>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3730      	adds	r7, #48	; 0x30
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40021000 	.word	0x40021000
 8000d68:	431bde83 	.word	0x431bde83
 8000d6c:	2000045c 	.word	0x2000045c
 8000d70:	40012c00 	.word	0x40012c00

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <HardFault_Handler+0x4>

08000d86 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <MemManage_Handler+0x4>

08000d8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <BusFault_Handler+0x4>

08000d92 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <UsageFault_Handler+0x4>

08000d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000dce:	f001 f852 	bl	8001e76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20001134 	.word	0x20001134

08000ddc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <TIM1_UP_IRQHandler+0x10>)
 8000de2:	f002 fc24 	bl	800362e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000045c 	.word	0x2000045c

08000df0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <_sbrk+0x50>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <_sbrk+0x16>
		heap_end = &end;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <_sbrk+0x50>)
 8000e02:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <_sbrk+0x54>)
 8000e04:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <_sbrk+0x50>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <_sbrk+0x50>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4413      	add	r3, r2
 8000e14:	466a      	mov	r2, sp
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d907      	bls.n	8000e2a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e1a:	f005 feef 	bl	8006bfc <__errno>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	230c      	movs	r3, #12
 8000e22:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e24:	f04f 33ff 	mov.w	r3, #4294967295
 8000e28:	e006      	b.n	8000e38 <_sbrk+0x48>
	}

	heap_end += incr;
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <_sbrk+0x50>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	4a03      	ldr	r2, [pc, #12]	; (8000e40 <_sbrk+0x50>)
 8000e34:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200001fc 	.word	0x200001fc
 8000e44:	200013a8 	.word	0x200013a8

08000e48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <SystemInit+0x5c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <SystemInit+0x5c>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <SystemInit+0x5c>)
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	4911      	ldr	r1, [pc, #68]	; (8000ea4 <SystemInit+0x5c>)
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <SystemInit+0x60>)
 8000e60:	4013      	ands	r3, r2
 8000e62:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <SystemInit+0x5c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <SystemInit+0x5c>)
 8000e6a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e72:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <SystemInit+0x5c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <SystemInit+0x5c>)
 8000e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e7e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <SystemInit+0x5c>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <SystemInit+0x5c>)
 8000e86:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000e8a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <SystemInit+0x5c>)
 8000e8e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000e92:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <SystemInit+0x64>)
 8000e96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e9a:	609a      	str	r2, [r3, #8]
#endif 
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	f8ff0000 	.word	0xf8ff0000
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000eb0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000eb2:	e003      	b.n	8000ebc <LoopCopyDataInit>

08000eb4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000eb6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000eb8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000eba:	3104      	adds	r1, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ebc:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ec0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ec2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ec4:	d3f6      	bcc.n	8000eb4 <CopyDataInit>
  ldr r2, =_sbss
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ec8:	e002      	b.n	8000ed0 <LoopFillZerobss>

08000eca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ecc:	f842 3b04 	str.w	r3, [r2], #4

08000ed0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ed2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ed4:	d3f9      	bcc.n	8000eca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ed6:	f7ff ffb7 	bl	8000e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eda:	f005 fe95 	bl	8006c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ede:	f7ff fd2f 	bl	8000940 <main>
  bx lr
 8000ee2:	4770      	bx	lr
  ldr r3, =_sidata
 8000ee4:	0800756c 	.word	0x0800756c
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000eec:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8000ef0:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8000ef4:	200013a4 	.word	0x200013a4

08000ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC1_2_IRQHandler>
	...

08000efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_Init+0x28>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <HAL_Init+0x28>)
 8000f06:	f043 0310 	orr.w	r3, r3, #16
 8000f0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 fd03 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f7ff fed8 	bl	8000cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f18:	f7ff fe68 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40022000 	.word	0x40022000

08000f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_IncTick+0x1c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_IncTick+0x20>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a03      	ldr	r2, [pc, #12]	; (8000f48 <HAL_IncTick+0x20>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	20000008 	.word	0x20000008
 8000f48:	2000049c 	.word	0x2000049c

08000f4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b02      	ldr	r3, [pc, #8]	; (8000f5c <HAL_GetTick+0x10>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	2000049c 	.word	0x2000049c

08000f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f68:	f7ff fff0 	bl	8000f4c <HAL_GetTick>
 8000f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f78:	d005      	beq.n	8000f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_Delay+0x40>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f86:	bf00      	nop
 8000f88:	f7ff ffe0 	bl	8000f4c <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d8f7      	bhi.n	8000f88 <HAL_Delay+0x28>
  {
  }
}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000008 	.word	0x20000008

08000fa4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e0be      	b.n	8001144 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d109      	bne.n	8000fe8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff fe34 	bl	8000c50 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f000 fbb1 	bl	8001750 <ADC_ConversionStop_Disable>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f040 8099 	bne.w	8001132 <HAL_ADC_Init+0x18e>
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f040 8095 	bne.w	8001132 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001010:	f023 0302 	bic.w	r3, r3, #2
 8001014:	f043 0202 	orr.w	r2, r3, #2
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001024:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7b1b      	ldrb	r3, [r3, #12]
 800102a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800102c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	4313      	orrs	r3, r2
 8001032:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800103c:	d003      	beq.n	8001046 <HAL_ADC_Init+0xa2>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d102      	bne.n	800104c <HAL_ADC_Init+0xa8>
 8001046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800104a:	e000      	b.n	800104e <HAL_ADC_Init+0xaa>
 800104c:	2300      	movs	r3, #0
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7d1b      	ldrb	r3, [r3, #20]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d119      	bne.n	8001090 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7b1b      	ldrb	r3, [r3, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d109      	bne.n	8001078 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	3b01      	subs	r3, #1
 800106a:	035a      	lsls	r2, r3, #13
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	e00b      	b.n	8001090 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107c:	f043 0220 	orr.w	r2, r3, #32
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001088:	f043 0201 	orr.w	r2, r3, #1
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	4b28      	ldr	r3, [pc, #160]	; (800114c <HAL_ADC_Init+0x1a8>)
 80010ac:	4013      	ands	r3, r2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	68b9      	ldr	r1, [r7, #8]
 80010b4:	430b      	orrs	r3, r1
 80010b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010c0:	d003      	beq.n	80010ca <HAL_ADC_Init+0x126>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d104      	bne.n	80010d4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	051b      	lsls	r3, r3, #20
 80010d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010da:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_ADC_Init+0x1ac>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d10b      	bne.n	8001110 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001102:	f023 0303 	bic.w	r3, r3, #3
 8001106:	f043 0201 	orr.w	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800110e:	e018      	b.n	8001142 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001114:	f023 0312 	bic.w	r3, r3, #18
 8001118:	f043 0210 	orr.w	r2, r3, #16
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001124:	f043 0201 	orr.w	r2, r3, #1
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001130:	e007      	b.n	8001142 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001136:	f043 0210 	orr.w	r2, r3, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001142:	7dfb      	ldrb	r3, [r7, #23]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	ffe1f7fd 	.word	0xffe1f7fd
 8001150:	ff1f0efe 	.word	0xff1f0efe

08001154 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001166:	2b01      	cmp	r3, #1
 8001168:	d101      	bne.n	800116e <HAL_ADC_Start+0x1a>
 800116a:	2302      	movs	r3, #2
 800116c:	e098      	b.n	80012a0 <HAL_ADC_Start+0x14c>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2201      	movs	r2, #1
 8001172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 fa98 	bl	80016ac <ADC_Enable>
 800117c:	4603      	mov	r3, r0
 800117e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f040 8087 	bne.w	8001296 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a41      	ldr	r2, [pc, #260]	; (80012a8 <HAL_ADC_Start+0x154>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d105      	bne.n	80011b2 <HAL_ADC_Start+0x5e>
 80011a6:	4b41      	ldr	r3, [pc, #260]	; (80012ac <HAL_ADC_Start+0x158>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d115      	bne.n	80011de <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d026      	beq.n	800121a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011dc:	e01d      	b.n	800121a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a2f      	ldr	r2, [pc, #188]	; (80012ac <HAL_ADC_Start+0x158>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d004      	beq.n	80011fe <HAL_ADC_Start+0xaa>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a2b      	ldr	r2, [pc, #172]	; (80012a8 <HAL_ADC_Start+0x154>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d10d      	bne.n	800121a <HAL_ADC_Start+0xc6>
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <HAL_ADC_Start+0x158>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001212:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d006      	beq.n	8001234 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122a:	f023 0206 	bic.w	r2, r3, #6
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	62da      	str	r2, [r3, #44]	; 0x2c
 8001232:	e002      	b.n	800123a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f06f 0202 	mvn.w	r2, #2
 800124a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001256:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800125a:	d113      	bne.n	8001284 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001260:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <HAL_ADC_Start+0x154>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d105      	bne.n	8001272 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_ADC_Start+0x158>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800126e:	2b00      	cmp	r3, #0
 8001270:	d108      	bne.n	8001284 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	e00c      	b.n	800129e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	e003      	b.n	800129e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800129e:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40012800 	.word	0x40012800
 80012ac:	40012400 	.word	0x40012400

080012b0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b087      	sub	sp, #28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80012c6:	f7ff fe41 	bl	8000f4c <HAL_GetTick>
 80012ca:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00b      	beq.n	80012f2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012de:	f043 0220 	orr.w	r2, r3, #32
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e0c8      	b.n	8001484 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d12a      	bne.n	8001356 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001306:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800130a:	2b00      	cmp	r3, #0
 800130c:	d123      	bne.n	8001356 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800130e:	e01a      	b.n	8001346 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001316:	d016      	beq.n	8001346 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d007      	beq.n	800132e <HAL_ADC_PollForConversion+0x7e>
 800131e:	f7ff fe15 	bl	8000f4c <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d20b      	bcs.n	8001346 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	f043 0204 	orr.w	r2, r3, #4
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e09e      	b.n	8001484 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0dd      	beq.n	8001310 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001354:	e06c      	b.n	8001430 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001356:	4b4d      	ldr	r3, [pc, #308]	; (800148c <HAL_ADC_PollForConversion+0x1dc>)
 8001358:	681c      	ldr	r4, [r3, #0]
 800135a:	2002      	movs	r0, #2
 800135c:	f002 f854 	bl	8003408 <HAL_RCCEx_GetPeriphCLKFreq>
 8001360:	4603      	mov	r3, r0
 8001362:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6919      	ldr	r1, [r3, #16]
 800136c:	4b48      	ldr	r3, [pc, #288]	; (8001490 <HAL_ADC_PollForConversion+0x1e0>)
 800136e:	400b      	ands	r3, r1
 8001370:	2b00      	cmp	r3, #0
 8001372:	d118      	bne.n	80013a6 <HAL_ADC_PollForConversion+0xf6>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68d9      	ldr	r1, [r3, #12]
 800137a:	4b46      	ldr	r3, [pc, #280]	; (8001494 <HAL_ADC_PollForConversion+0x1e4>)
 800137c:	400b      	ands	r3, r1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d111      	bne.n	80013a6 <HAL_ADC_PollForConversion+0xf6>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6919      	ldr	r1, [r3, #16]
 8001388:	4b43      	ldr	r3, [pc, #268]	; (8001498 <HAL_ADC_PollForConversion+0x1e8>)
 800138a:	400b      	ands	r3, r1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d108      	bne.n	80013a2 <HAL_ADC_PollForConversion+0xf2>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68d9      	ldr	r1, [r3, #12]
 8001396:	4b41      	ldr	r3, [pc, #260]	; (800149c <HAL_ADC_PollForConversion+0x1ec>)
 8001398:	400b      	ands	r3, r1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_ADC_PollForConversion+0xf2>
 800139e:	2314      	movs	r3, #20
 80013a0:	e020      	b.n	80013e4 <HAL_ADC_PollForConversion+0x134>
 80013a2:	2329      	movs	r3, #41	; 0x29
 80013a4:	e01e      	b.n	80013e4 <HAL_ADC_PollForConversion+0x134>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6919      	ldr	r1, [r3, #16]
 80013ac:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <HAL_ADC_PollForConversion+0x1e8>)
 80013ae:	400b      	ands	r3, r1
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d106      	bne.n	80013c2 <HAL_ADC_PollForConversion+0x112>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68d9      	ldr	r1, [r3, #12]
 80013ba:	4b38      	ldr	r3, [pc, #224]	; (800149c <HAL_ADC_PollForConversion+0x1ec>)
 80013bc:	400b      	ands	r3, r1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00d      	beq.n	80013de <HAL_ADC_PollForConversion+0x12e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6919      	ldr	r1, [r3, #16]
 80013c8:	4b35      	ldr	r3, [pc, #212]	; (80014a0 <HAL_ADC_PollForConversion+0x1f0>)
 80013ca:	400b      	ands	r3, r1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d108      	bne.n	80013e2 <HAL_ADC_PollForConversion+0x132>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68d9      	ldr	r1, [r3, #12]
 80013d6:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <HAL_ADC_PollForConversion+0x1f0>)
 80013d8:	400b      	ands	r3, r1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_ADC_PollForConversion+0x132>
 80013de:	2354      	movs	r3, #84	; 0x54
 80013e0:	e000      	b.n	80013e4 <HAL_ADC_PollForConversion+0x134>
 80013e2:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80013e4:	fb02 f303 	mul.w	r3, r2, r3
 80013e8:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80013ea:	e01d      	b.n	8001428 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f2:	d016      	beq.n	8001422 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d007      	beq.n	800140a <HAL_ADC_PollForConversion+0x15a>
 80013fa:	f7ff fda7 	bl	8000f4c <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d20b      	bcs.n	8001422 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140e:	f043 0204 	orr.w	r2, r3, #4
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e030      	b.n	8001484 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3301      	adds	r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d8dd      	bhi.n	80013ec <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f06f 0212 	mvn.w	r2, #18
 8001438:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001450:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001454:	d115      	bne.n	8001482 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800145a:	2b00      	cmp	r3, #0
 800145c:	d111      	bne.n	8001482 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d105      	bne.n	8001482 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147a:	f043 0201 	orr.w	r2, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	371c      	adds	r7, #28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd90      	pop	{r4, r7, pc}
 800148c:	20000000 	.word	0x20000000
 8001490:	24924924 	.word	0x24924924
 8001494:	00924924 	.word	0x00924924
 8001498:	12492492 	.word	0x12492492
 800149c:	00492492 	.word	0x00492492
 80014a0:	00249249 	.word	0x00249249

080014a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x20>
 80014d8:	2302      	movs	r3, #2
 80014da:	e0dc      	b.n	8001696 <HAL_ADC_ConfigChannel+0x1da>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b06      	cmp	r3, #6
 80014ea:	d81c      	bhi.n	8001526 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	3b05      	subs	r3, #5
 80014fe:	221f      	movs	r2, #31
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	4019      	ands	r1, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	3b05      	subs	r3, #5
 8001518:	fa00 f203 	lsl.w	r2, r0, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	635a      	str	r2, [r3, #52]	; 0x34
 8001524:	e03c      	b.n	80015a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b0c      	cmp	r3, #12
 800152c:	d81c      	bhi.n	8001568 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	3b23      	subs	r3, #35	; 0x23
 8001540:	221f      	movs	r2, #31
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	4019      	ands	r1, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	3b23      	subs	r3, #35	; 0x23
 800155a:	fa00 f203 	lsl.w	r2, r0, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	631a      	str	r2, [r3, #48]	; 0x30
 8001566:	e01b      	b.n	80015a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	3b41      	subs	r3, #65	; 0x41
 800157a:	221f      	movs	r2, #31
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	4019      	ands	r1, r3
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	3b41      	subs	r3, #65	; 0x41
 8001594:	fa00 f203 	lsl.w	r2, r0, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b09      	cmp	r3, #9
 80015a6:	d91c      	bls.n	80015e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68d9      	ldr	r1, [r3, #12]
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	3b1e      	subs	r3, #30
 80015ba:	2207      	movs	r2, #7
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	4019      	ands	r1, r3
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	6898      	ldr	r0, [r3, #8]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4613      	mov	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	3b1e      	subs	r3, #30
 80015d4:	fa00 f203 	lsl.w	r2, r0, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	e019      	b.n	8001616 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6919      	ldr	r1, [r3, #16]
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	2207      	movs	r2, #7
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	4019      	ands	r1, r3
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	6898      	ldr	r0, [r3, #8]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	fa00 f203 	lsl.w	r2, r0, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b10      	cmp	r3, #16
 800161c:	d003      	beq.n	8001626 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001622:	2b11      	cmp	r3, #17
 8001624:	d132      	bne.n	800168c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a1d      	ldr	r2, [pc, #116]	; (80016a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d125      	bne.n	800167c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d126      	bne.n	800168c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800164c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b10      	cmp	r3, #16
 8001654:	d11a      	bne.n	800168c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800165c:	fba2 2303 	umull	r2, r3, r2, r3
 8001660:	0c9a      	lsrs	r2, r3, #18
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800166c:	e002      	b.n	8001674 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	3b01      	subs	r3, #1
 8001672:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f9      	bne.n	800166e <HAL_ADC_ConfigChannel+0x1b2>
 800167a:	e007      	b.n	800168c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	f043 0220 	orr.w	r2, r3, #32
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001694:	7bfb      	ldrb	r3, [r7, #15]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	40012400 	.word	0x40012400
 80016a4:	20000000 	.word	0x20000000
 80016a8:	431bde83 	.word	0x431bde83

080016ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d039      	beq.n	800173e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f042 0201 	orr.w	r2, r2, #1
 80016d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <ADC_Enable+0x9c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1b      	ldr	r2, [pc, #108]	; (800174c <ADC_Enable+0xa0>)
 80016e0:	fba2 2303 	umull	r2, r3, r2, r3
 80016e4:	0c9b      	lsrs	r3, r3, #18
 80016e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016e8:	e002      	b.n	80016f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f9      	bne.n	80016ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016f6:	f7ff fc29 	bl	8000f4c <HAL_GetTick>
 80016fa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016fc:	e018      	b.n	8001730 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016fe:	f7ff fc25 	bl	8000f4c <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d911      	bls.n	8001730 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	f043 0210 	orr.w	r2, r3, #16
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	f043 0201 	orr.w	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e007      	b.n	8001740 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b01      	cmp	r3, #1
 800173c:	d1df      	bne.n	80016fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000000 	.word	0x20000000
 800174c:	431bde83 	.word	0x431bde83

08001750 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b01      	cmp	r3, #1
 8001768:	d127      	bne.n	80017ba <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0201 	bic.w	r2, r2, #1
 8001778:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800177a:	f7ff fbe7 	bl	8000f4c <HAL_GetTick>
 800177e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001780:	e014      	b.n	80017ac <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001782:	f7ff fbe3 	bl	8000f4c <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d90d      	bls.n	80017ac <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	f043 0210 	orr.w	r2, r3, #16
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e007      	b.n	80017bc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d0e3      	beq.n	8001782 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4906      	ldr	r1, [pc, #24]	; (800185c <__NVIC_EnableIRQ+0x34>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100

08001860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	db0a      	blt.n	800188a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	490c      	ldr	r1, [pc, #48]	; (80018ac <__NVIC_SetPriority+0x4c>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	440b      	add	r3, r1
 8001884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001888:	e00a      	b.n	80018a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4908      	ldr	r1, [pc, #32]	; (80018b0 <__NVIC_SetPriority+0x50>)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	3b04      	subs	r3, #4
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	440b      	add	r3, r1
 800189e:	761a      	strb	r2, [r3, #24]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000e100 	.word	0xe000e100
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f1c3 0307 	rsb	r3, r3, #7
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	bf28      	it	cs
 80018d2:	2304      	movcs	r3, #4
 80018d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3304      	adds	r3, #4
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d902      	bls.n	80018e4 <NVIC_EncodePriority+0x30>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3b03      	subs	r3, #3
 80018e2:	e000      	b.n	80018e6 <NVIC_EncodePriority+0x32>
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	401a      	ands	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43d9      	mvns	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	4313      	orrs	r3, r2
         );
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	; 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff4f 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff64 	bl	800180c <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ffb2 	bl	80018b4 <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff81 	bl	8001860 <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff57 	bl	8001828 <__NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b08b      	sub	sp, #44	; 0x2c
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001996:	e127      	b.n	8001be8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001998:	2201      	movs	r2, #1
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	f040 8116 	bne.w	8001be2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b12      	cmp	r3, #18
 80019bc:	d034      	beq.n	8001a28 <HAL_GPIO_Init+0xa4>
 80019be:	2b12      	cmp	r3, #18
 80019c0:	d80d      	bhi.n	80019de <HAL_GPIO_Init+0x5a>
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d02b      	beq.n	8001a1e <HAL_GPIO_Init+0x9a>
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d804      	bhi.n	80019d4 <HAL_GPIO_Init+0x50>
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d031      	beq.n	8001a32 <HAL_GPIO_Init+0xae>
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d01c      	beq.n	8001a0c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019d2:	e048      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d043      	beq.n	8001a60 <HAL_GPIO_Init+0xdc>
 80019d8:	2b11      	cmp	r3, #17
 80019da:	d01b      	beq.n	8001a14 <HAL_GPIO_Init+0x90>
          break;
 80019dc:	e043      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019de:	4a89      	ldr	r2, [pc, #548]	; (8001c04 <HAL_GPIO_Init+0x280>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d026      	beq.n	8001a32 <HAL_GPIO_Init+0xae>
 80019e4:	4a87      	ldr	r2, [pc, #540]	; (8001c04 <HAL_GPIO_Init+0x280>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d806      	bhi.n	80019f8 <HAL_GPIO_Init+0x74>
 80019ea:	4a87      	ldr	r2, [pc, #540]	; (8001c08 <HAL_GPIO_Init+0x284>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d020      	beq.n	8001a32 <HAL_GPIO_Init+0xae>
 80019f0:	4a86      	ldr	r2, [pc, #536]	; (8001c0c <HAL_GPIO_Init+0x288>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d01d      	beq.n	8001a32 <HAL_GPIO_Init+0xae>
          break;
 80019f6:	e036      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019f8:	4a85      	ldr	r2, [pc, #532]	; (8001c10 <HAL_GPIO_Init+0x28c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d019      	beq.n	8001a32 <HAL_GPIO_Init+0xae>
 80019fe:	4a85      	ldr	r2, [pc, #532]	; (8001c14 <HAL_GPIO_Init+0x290>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d016      	beq.n	8001a32 <HAL_GPIO_Init+0xae>
 8001a04:	4a84      	ldr	r2, [pc, #528]	; (8001c18 <HAL_GPIO_Init+0x294>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d013      	beq.n	8001a32 <HAL_GPIO_Init+0xae>
          break;
 8001a0a:	e02c      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	623b      	str	r3, [r7, #32]
          break;
 8001a12:	e028      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	623b      	str	r3, [r7, #32]
          break;
 8001a1c:	e023      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	3308      	adds	r3, #8
 8001a24:	623b      	str	r3, [r7, #32]
          break;
 8001a26:	e01e      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	330c      	adds	r3, #12
 8001a2e:	623b      	str	r3, [r7, #32]
          break;
 8001a30:	e019      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d102      	bne.n	8001a40 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	623b      	str	r3, [r7, #32]
          break;
 8001a3e:	e012      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d105      	bne.n	8001a54 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a48:	2308      	movs	r3, #8
 8001a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	611a      	str	r2, [r3, #16]
          break;
 8001a52:	e008      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a54:	2308      	movs	r3, #8
 8001a56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	615a      	str	r2, [r3, #20]
          break;
 8001a5e:	e002      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
          break;
 8001a64:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	2bff      	cmp	r3, #255	; 0xff
 8001a6a:	d801      	bhi.n	8001a70 <HAL_GPIO_Init+0xec>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	e001      	b.n	8001a74 <HAL_GPIO_Init+0xf0>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3304      	adds	r3, #4
 8001a74:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2bff      	cmp	r3, #255	; 0xff
 8001a7a:	d802      	bhi.n	8001a82 <HAL_GPIO_Init+0xfe>
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_Init+0x104>
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	3b08      	subs	r3, #8
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	210f      	movs	r1, #15
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	401a      	ands	r2, r3
 8001a9a:	6a39      	ldr	r1, [r7, #32]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 8096 	beq.w	8001be2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ab6:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <HAL_GPIO_Init+0x298>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <HAL_GPIO_Init+0x298>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6193      	str	r3, [r2, #24]
 8001ac2:	4b56      	ldr	r3, [pc, #344]	; (8001c1c <HAL_GPIO_Init+0x298>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ace:	4a54      	ldr	r2, [pc, #336]	; (8001c20 <HAL_GPIO_Init+0x29c>)
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	089b      	lsrs	r3, r3, #2
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ada:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	4013      	ands	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4b      	ldr	r2, [pc, #300]	; (8001c24 <HAL_GPIO_Init+0x2a0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d013      	beq.n	8001b22 <HAL_GPIO_Init+0x19e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4a      	ldr	r2, [pc, #296]	; (8001c28 <HAL_GPIO_Init+0x2a4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00d      	beq.n	8001b1e <HAL_GPIO_Init+0x19a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a49      	ldr	r2, [pc, #292]	; (8001c2c <HAL_GPIO_Init+0x2a8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d007      	beq.n	8001b1a <HAL_GPIO_Init+0x196>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a48      	ldr	r2, [pc, #288]	; (8001c30 <HAL_GPIO_Init+0x2ac>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d101      	bne.n	8001b16 <HAL_GPIO_Init+0x192>
 8001b12:	2303      	movs	r3, #3
 8001b14:	e006      	b.n	8001b24 <HAL_GPIO_Init+0x1a0>
 8001b16:	2304      	movs	r3, #4
 8001b18:	e004      	b.n	8001b24 <HAL_GPIO_Init+0x1a0>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e002      	b.n	8001b24 <HAL_GPIO_Init+0x1a0>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_GPIO_Init+0x1a0>
 8001b22:	2300      	movs	r3, #0
 8001b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b26:	f002 0203 	and.w	r2, r2, #3
 8001b2a:	0092      	lsls	r2, r2, #2
 8001b2c:	4093      	lsls	r3, r2
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b34:	493a      	ldr	r1, [pc, #232]	; (8001c20 <HAL_GPIO_Init+0x29c>)
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b4e:	4b39      	ldr	r3, [pc, #228]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4938      	ldr	r1, [pc, #224]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
 8001b5a:	e006      	b.n	8001b6a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b5c:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	4933      	ldr	r1, [pc, #204]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d006      	beq.n	8001b84 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b76:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	492e      	ldr	r1, [pc, #184]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	604b      	str	r3, [r1, #4]
 8001b82:	e006      	b.n	8001b92 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b84:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	4929      	ldr	r1, [pc, #164]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d006      	beq.n	8001bac <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b9e:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	4924      	ldr	r1, [pc, #144]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	608b      	str	r3, [r1, #8]
 8001baa:	e006      	b.n	8001bba <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bac:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	491f      	ldr	r1, [pc, #124]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d006      	beq.n	8001bd4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	491a      	ldr	r1, [pc, #104]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60cb      	str	r3, [r1, #12]
 8001bd2:	e006      	b.n	8001be2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	4915      	ldr	r1, [pc, #84]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	3301      	adds	r3, #1
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f47f aed0 	bne.w	8001998 <HAL_GPIO_Init+0x14>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	372c      	adds	r7, #44	; 0x2c
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	10210000 	.word	0x10210000
 8001c08:	10110000 	.word	0x10110000
 8001c0c:	10120000 	.word	0x10120000
 8001c10:	10310000 	.word	0x10310000
 8001c14:	10320000 	.word	0x10320000
 8001c18:	10220000 	.word	0x10220000
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40010800 	.word	0x40010800
 8001c28:	40010c00 	.word	0x40010c00
 8001c2c:	40011000 	.word	0x40011000
 8001c30:	40011400 	.word	0x40011400
 8001c34:	40010400 	.word	0x40010400

08001c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	807b      	strh	r3, [r7, #2]
 8001c44:	4613      	mov	r3, r2
 8001c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c48:	787b      	ldrb	r3, [r7, #1]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c4e:	887a      	ldrh	r2, [r7, #2]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c54:	e003      	b.n	8001c5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c56:	887b      	ldrh	r3, [r7, #2]
 8001c58:	041a      	lsls	r2, r3, #16
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	611a      	str	r2, [r3, #16]
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c6a:	b08b      	sub	sp, #44	; 0x2c
 8001c6c:	af06      	add	r7, sp, #24
 8001c6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0d3      	b.n	8001e22 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f004 fd16 	bl	80066c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2203      	movs	r2, #3
 8001c98:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f001 fe8c 	bl	80039be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	687e      	ldr	r6, [r7, #4]
 8001cae:	466d      	mov	r5, sp
 8001cb0:	f106 0410 	add.w	r4, r6, #16
 8001cb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb8:	6823      	ldr	r3, [r4, #0]
 8001cba:	602b      	str	r3, [r5, #0]
 8001cbc:	1d33      	adds	r3, r6, #4
 8001cbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc0:	6838      	ldr	r0, [r7, #0]
 8001cc2:	f001 fe55 	bl	8003970 <USB_CoreInit>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0a4      	b.n	8001e22 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f001 fe89 	bl	80039f6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	e035      	b.n	8001d56 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	015b      	lsls	r3, r3, #5
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3329      	adds	r3, #41	; 0x29
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	015b      	lsls	r3, r3, #5
 8001cfe:	4413      	add	r3, r2
 8001d00:	3328      	adds	r3, #40	; 0x28
 8001d02:	7bfa      	ldrb	r2, [r7, #15]
 8001d04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	b291      	uxth	r1, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	015b      	lsls	r3, r3, #5
 8001d10:	4413      	add	r3, r2
 8001d12:	3336      	adds	r3, #54	; 0x36
 8001d14:	460a      	mov	r2, r1
 8001d16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	015b      	lsls	r3, r3, #5
 8001d1e:	4413      	add	r3, r2
 8001d20:	332b      	adds	r3, #43	; 0x2b
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	015b      	lsls	r3, r3, #5
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3338      	adds	r3, #56	; 0x38
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	015b      	lsls	r3, r3, #5
 8001d3a:	4413      	add	r3, r2
 8001d3c:	333c      	adds	r3, #60	; 0x3c
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	3302      	adds	r3, #2
 8001d48:	015b      	lsls	r3, r3, #5
 8001d4a:	4413      	add	r3, r2
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	3301      	adds	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d3c4      	bcc.n	8001cea <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	e031      	b.n	8001dca <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	015b      	lsls	r3, r3, #5
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	015b      	lsls	r3, r3, #5
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	015b      	lsls	r3, r3, #5
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	015b      	lsls	r3, r3, #5
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	015b      	lsls	r3, r3, #5
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	330a      	adds	r3, #10
 8001dbc:	015b      	lsls	r3, r3, #5
 8001dbe:	4413      	add	r3, r2
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	73fb      	strb	r3, [r7, #15]
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d3c8      	bcc.n	8001d66 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	687e      	ldr	r6, [r7, #4]
 8001ddc:	466d      	mov	r5, sp
 8001dde:	f106 0410 	add.w	r4, r6, #16
 8001de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	602b      	str	r3, [r5, #0]
 8001dea:	1d33      	adds	r3, r6, #4
 8001dec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dee:	6838      	ldr	r0, [r7, #0]
 8001df0:	f001 fe0d 	bl	8003a0e <USB_DevInit>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d005      	beq.n	8001e06 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00d      	b.n	8001e22 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f002 fe4b 	bl	8004ab6 <USB_DevDisconnect>

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e2a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_PCD_Start+0x16>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e016      	b.n	8001e6e <HAL_PCD_Start+0x44>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001e48:	2101      	movs	r1, #1
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f004 fe9f 	bl	8006b8e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f002 fe24 	bl	8004aa2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f001 fd96 	bl	8003990 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f002 fe21 	bl	8004aca <USB_ReadInterrupts>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e92:	d102      	bne.n	8001e9a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 faf3 	bl	8002480 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f002 fe13 	bl	8004aca <USB_ReadInterrupts>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eae:	d112      	bne.n	8001ed6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ec2:	b292      	uxth	r2, r2
 8001ec4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f004 fc6e 	bl	80067aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001ece:	2100      	movs	r1, #0
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f8de 	bl	8002092 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f002 fdf5 	bl	8004aca <USB_ReadInterrupts>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001eea:	d10b      	bne.n	8001f04 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001efe:	b292      	uxth	r2, r2
 8001f00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f002 fdde 	bl	8004aca <USB_ReadInterrupts>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f18:	d10b      	bne.n	8001f32 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f002 fdc7 	bl	8004aca <USB_ReadInterrupts>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f46:	d126      	bne.n	8001f96 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0204 	bic.w	r2, r2, #4
 8001f5a:	b292      	uxth	r2, r2
 8001f5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0208 	bic.w	r2, r2, #8
 8001f72:	b292      	uxth	r2, r2
 8001f74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f004 fc4f 	bl	800681c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f90:	b292      	uxth	r2, r2
 8001f92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f002 fd95 	bl	8004aca <USB_ReadInterrupts>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001faa:	d13d      	bne.n	8002028 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0208 	orr.w	r2, r2, #8
 8001fbe:	b292      	uxth	r2, r2
 8001fc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fd6:	b292      	uxth	r2, r2
 8001fd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0204 	orr.w	r2, r2, #4
 8001fee:	b292      	uxth	r2, r2
 8001ff0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f002 fd66 	bl	8004aca <USB_ReadInterrupts>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002008:	d10b      	bne.n	8002022 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002012:	b29a      	uxth	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800201c:	b292      	uxth	r2, r2
 800201e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f004 fbe0 	bl	80067e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f002 fd4c 	bl	8004aca <USB_ReadInterrupts>
 8002032:	4603      	mov	r3, r0
 8002034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800203c:	d10e      	bne.n	800205c <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002046:	b29a      	uxth	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002050:	b292      	uxth	r2, r2
 8002052:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f004 fb99 	bl	800678e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f002 fd32 	bl	8004aca <USB_ReadInterrupts>
 8002066:	4603      	mov	r3, r0
 8002068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002070:	d10b      	bne.n	800208a <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800207a:	b29a      	uxth	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002084:	b292      	uxth	r2, r2
 8002086:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	460b      	mov	r3, r1
 800209c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_PCD_SetAddress+0x1a>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e013      	b.n	80020d4 <HAL_PCD_SetAddress+0x42>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	78fa      	ldrb	r2, [r7, #3]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f002 fcd9 	bl	8004a7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	4608      	mov	r0, r1
 80020e6:	4611      	mov	r1, r2
 80020e8:	461a      	mov	r2, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	70fb      	strb	r3, [r7, #3]
 80020ee:	460b      	mov	r3, r1
 80020f0:	803b      	strh	r3, [r7, #0]
 80020f2:	4613      	mov	r3, r2
 80020f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	da0b      	bge.n	800211a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	015b      	lsls	r3, r3, #5
 800210a:	3328      	adds	r3, #40	; 0x28
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	705a      	strb	r2, [r3, #1]
 8002118:	e00b      	b.n	8002132 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	015b      	lsls	r3, r3, #5
 8002122:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	b2da      	uxtb	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800213e:	883a      	ldrh	r2, [r7, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	78ba      	ldrb	r2, [r7, #2]
 8002148:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	785b      	ldrb	r3, [r3, #1]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d004      	beq.n	800215c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800215c:	78bb      	ldrb	r3, [r7, #2]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d102      	bne.n	8002168 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_PCD_EP_Open+0x9a>
 8002172:	2302      	movs	r3, #2
 8002174:	e00e      	b.n	8002194 <HAL_PCD_EP_Open+0xb8>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68f9      	ldr	r1, [r7, #12]
 8002184:	4618      	mov	r0, r3
 8002186:	f001 fc67 	bl	8003a58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002192:	7afb      	ldrb	r3, [r7, #11]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	da0b      	bge.n	80021c8 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	015b      	lsls	r3, r3, #5
 80021b8:	3328      	adds	r3, #40	; 0x28
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2201      	movs	r2, #1
 80021c4:	705a      	strb	r2, [r3, #1]
 80021c6:	e00b      	b.n	80021e0 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	015b      	lsls	r3, r3, #5
 80021d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_PCD_EP_Close+0x5e>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e00e      	b.n	8002218 <HAL_PCD_EP_Close+0x7c>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68f9      	ldr	r1, [r7, #12]
 8002208:	4618      	mov	r0, r3
 800220a:	f001 ff13 	bl	8004034 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	460b      	mov	r3, r1
 800222e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002230:	7afb      	ldrb	r3, [r7, #11]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	015b      	lsls	r3, r3, #5
 8002238:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4413      	add	r3, r2
 8002240:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2200      	movs	r2, #0
 8002252:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2200      	movs	r2, #0
 8002258:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800225a:	7afb      	ldrb	r3, [r7, #11]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	b2da      	uxtb	r2, r3
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002266:	7afb      	ldrb	r3, [r7, #11]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	2b00      	cmp	r3, #0
 800226e:	d106      	bne.n	800227e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6979      	ldr	r1, [r7, #20]
 8002276:	4618      	mov	r0, r3
 8002278:	f002 f872 	bl	8004360 <USB_EPStartXfer>
 800227c:	e005      	b.n	800228a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6979      	ldr	r1, [r7, #20]
 8002284:	4618      	mov	r0, r3
 8002286:	f002 f86b 	bl	8004360 <USB_EPStartXfer>
  }

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	330a      	adds	r3, #10
 80022aa:	015b      	lsls	r3, r3, #5
 80022ac:	4413      	add	r3, r2
 80022ae:	3304      	adds	r3, #4
 80022b0:	681b      	ldr	r3, [r3, #0]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	460b      	mov	r3, r1
 80022ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022cc:	7afb      	ldrb	r3, [r7, #11]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	015b      	lsls	r3, r3, #5
 80022d4:	3328      	adds	r3, #40	; 0x28
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4413      	add	r3, r2
 80022da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2200      	movs	r2, #0
 80022ec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2201      	movs	r2, #1
 80022f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022f4:	7afb      	ldrb	r3, [r7, #11]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002300:	7afb      	ldrb	r3, [r7, #11]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6979      	ldr	r1, [r7, #20]
 8002310:	4618      	mov	r0, r3
 8002312:	f002 f825 	bl	8004360 <USB_EPStartXfer>
 8002316:	e005      	b.n	8002324 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6979      	ldr	r1, [r7, #20]
 800231e:	4618      	mov	r0, r3
 8002320:	f002 f81e 	bl	8004360 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b084      	sub	sp, #16
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	460b      	mov	r3, r1
 8002338:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	f003 0207 	and.w	r2, r3, #7
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	429a      	cmp	r2, r3
 8002346:	d901      	bls.n	800234c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e046      	b.n	80023da <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800234c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002350:	2b00      	cmp	r3, #0
 8002352:	da0b      	bge.n	800236c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	015b      	lsls	r3, r3, #5
 800235c:	3328      	adds	r3, #40	; 0x28
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2201      	movs	r2, #1
 8002368:	705a      	strb	r2, [r3, #1]
 800236a:	e009      	b.n	8002380 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	015b      	lsls	r3, r3, #5
 8002370:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	4413      	add	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	b2da      	uxtb	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_PCD_EP_SetStall+0x72>
 800239c:	2302      	movs	r3, #2
 800239e:	e01c      	b.n	80023da <HAL_PCD_EP_SetStall+0xac>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68f9      	ldr	r1, [r7, #12]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 fa8e 	bl	80048d0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d108      	bne.n	80023d0 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80023c8:	4619      	mov	r1, r3
 80023ca:	4610      	mov	r0, r2
 80023cc:	f002 fb8c 	bl	8004ae8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	460b      	mov	r3, r1
 80023ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	f003 020f 	and.w	r2, r3, #15
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d901      	bls.n	8002400 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e03a      	b.n	8002476 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002400:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002404:	2b00      	cmp	r3, #0
 8002406:	da0b      	bge.n	8002420 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	015b      	lsls	r3, r3, #5
 8002410:	3328      	adds	r3, #40	; 0x28
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	705a      	strb	r2, [r3, #1]
 800241e:	e00b      	b.n	8002438 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	015b      	lsls	r3, r3, #5
 8002428:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	b2da      	uxtb	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_PCD_EP_ClrStall+0x76>
 8002454:	2302      	movs	r3, #2
 8002456:	e00e      	b.n	8002476 <HAL_PCD_EP_ClrStall+0x94>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68f9      	ldr	r1, [r7, #12]
 8002466:	4618      	mov	r0, r3
 8002468:	f002 fa74 	bl	8004954 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002488:	e282      	b.n	8002990 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002492:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002494:	8afb      	ldrh	r3, [r7, #22]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800249e:	7d7b      	ldrb	r3, [r7, #21]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f040 8142 	bne.w	800272a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80024a6:	8afb      	ldrh	r3, [r7, #22]
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d151      	bne.n	8002554 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c0:	b29c      	uxth	r4, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80024ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3328      	adds	r3, #40	; 0x28
 80024d6:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	3302      	adds	r3, #2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	441a      	add	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002512:	2100      	movs	r1, #0
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f004 f923 	bl	8006760 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8234 	beq.w	8002990 <PCD_EP_ISR_Handler+0x510>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	2b00      	cmp	r3, #0
 800252e:	f040 822f 	bne.w	8002990 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002538:	b2db      	uxtb	r3, r3
 800253a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800253e:	b2da      	uxtb	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	b292      	uxth	r2, r2
 8002546:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002552:	e21d      	b.n	8002990 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800255a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002564:	8a7b      	ldrh	r3, [r7, #18]
 8002566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800256a:	2b00      	cmp	r3, #0
 800256c:	d033      	beq.n	80025d6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002576:	b29b      	uxth	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	3306      	adds	r3, #6
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	4413      	add	r3, r2
 800258c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	f002 faea 	bl	8004b86 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025be:	4013      	ands	r3, r2
 80025c0:	b29c      	uxth	r4, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80025ca:	b292      	uxth	r2, r2
 80025cc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f004 f89c 	bl	800670c <HAL_PCD_SetupStageCallback>
 80025d4:	e1dc      	b.n	8002990 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f280 81d8 	bge.w	8002990 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025ec:	4013      	ands	r3, r2
 80025ee:	b29c      	uxth	r4, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80025f8:	b292      	uxth	r2, r2
 80025fa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002604:	b29b      	uxth	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4413      	add	r3, r2
 8002610:	3306      	adds	r3, #6
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	4413      	add	r3, r2
 800261a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d019      	beq.n	8002664 <PCD_EP_ISR_Handler+0x1e4>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d015      	beq.n	8002664 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6959      	ldr	r1, [r3, #20]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002648:	b29b      	uxth	r3, r3
 800264a:	f002 fa9c 	bl	8004b86 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	441a      	add	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800265c:	2100      	movs	r1, #0
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f004 f866 	bl	8006730 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	461c      	mov	r4, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002672:	b29b      	uxth	r3, r3
 8002674:	441c      	add	r4, r3
 8002676:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800267a:	461c      	mov	r4, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10e      	bne.n	80026a2 <PCD_EP_ISR_Handler+0x222>
 8002684:	8823      	ldrh	r3, [r4, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800268c:	b29b      	uxth	r3, r3
 800268e:	8023      	strh	r3, [r4, #0]
 8002690:	8823      	ldrh	r3, [r4, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800269c:	b29b      	uxth	r3, r3
 800269e:	8023      	strh	r3, [r4, #0]
 80026a0:	e02d      	b.n	80026fe <PCD_EP_ISR_Handler+0x27e>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	2b3e      	cmp	r3, #62	; 0x3e
 80026a8:	d812      	bhi.n	80026d0 <PCD_EP_ISR_Handler+0x250>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	085b      	lsrs	r3, r3, #1
 80026b0:	61bb      	str	r3, [r7, #24]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <PCD_EP_ISR_Handler+0x244>
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	3301      	adds	r3, #1
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	029b      	lsls	r3, r3, #10
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	8023      	strh	r3, [r4, #0]
 80026ce:	e016      	b.n	80026fe <PCD_EP_ISR_Handler+0x27e>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	61bb      	str	r3, [r7, #24]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <PCD_EP_ISR_Handler+0x26a>
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	029b      	lsls	r3, r3, #10
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	b29b      	uxth	r3, r3
 8002706:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800270a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270e:	b29c      	uxth	r4, r3
 8002710:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002714:	b29c      	uxth	r4, r3
 8002716:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800271a:	b29c      	uxth	r4, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4ba2      	ldr	r3, [pc, #648]	; (80029ac <PCD_EP_ISR_Handler+0x52c>)
 8002722:	4323      	orrs	r3, r4
 8002724:	b29b      	uxth	r3, r3
 8002726:	8013      	strh	r3, [r2, #0]
 8002728:	e132      	b.n	8002990 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	7d7b      	ldrb	r3, [r7, #21]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800273a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f280 80d1 	bge.w	80028e6 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	7d7b      	ldrb	r3, [r7, #21]
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	b29a      	uxth	r2, r3
 8002754:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002758:	4013      	ands	r3, r2
 800275a:	b29c      	uxth	r4, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	7d7b      	ldrb	r3, [r7, #21]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800276c:	b292      	uxth	r2, r2
 800276e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002770:	7d7b      	ldrb	r3, [r7, #21]
 8002772:	015b      	lsls	r3, r3, #5
 8002774:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	4413      	add	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	7b1b      	ldrb	r3, [r3, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d121      	bne.n	80027ca <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800278e:	b29b      	uxth	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	3306      	adds	r3, #6
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6812      	ldr	r2, [r2, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ae:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80027b0:	8bfb      	ldrh	r3, [r7, #30]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d072      	beq.n	800289c <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6959      	ldr	r1, [r3, #20]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	88da      	ldrh	r2, [r3, #6]
 80027c2:	8bfb      	ldrh	r3, [r7, #30]
 80027c4:	f002 f9df 	bl	8004b86 <USB_ReadPMA>
 80027c8:	e068      	b.n	800289c <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d021      	beq.n	8002828 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	3302      	adds	r3, #2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	4413      	add	r3, r2
 8002802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800280c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800280e:	8bfb      	ldrh	r3, [r7, #30]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d02a      	beq.n	800286a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6959      	ldr	r1, [r3, #20]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	891a      	ldrh	r2, [r3, #8]
 8002820:	8bfb      	ldrh	r3, [r7, #30]
 8002822:	f002 f9b0 	bl	8004b86 <USB_ReadPMA>
 8002826:	e020      	b.n	800286a <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002830:	b29b      	uxth	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	3306      	adds	r3, #6
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	4413      	add	r3, r2
 8002846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002850:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002852:	8bfb      	ldrh	r3, [r7, #30]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6959      	ldr	r1, [r3, #20]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	895a      	ldrh	r2, [r3, #10]
 8002864:	8bfb      	ldrh	r3, [r7, #30]
 8002866:	f002 f98e 	bl	8004b86 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	b29b      	uxth	r3, r3
 800287c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002884:	b29c      	uxth	r4, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	441a      	add	r2, r3
 8002894:	4b46      	ldr	r3, [pc, #280]	; (80029b0 <PCD_EP_ISR_Handler+0x530>)
 8002896:	4323      	orrs	r3, r4
 8002898:	b29b      	uxth	r3, r3
 800289a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	69da      	ldr	r2, [r3, #28]
 80028a0:	8bfb      	ldrh	r3, [r7, #30]
 80028a2:	441a      	add	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	8bfb      	ldrh	r3, [r7, #30]
 80028ae:	441a      	add	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d004      	beq.n	80028c6 <PCD_EP_ISR_Handler+0x446>
 80028bc:	8bfa      	ldrh	r2, [r7, #30]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d206      	bcs.n	80028d4 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	4619      	mov	r1, r3
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f003 ff2f 	bl	8006730 <HAL_PCD_DataOutStageCallback>
 80028d2:	e008      	b.n	80028e6 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	7819      	ldrb	r1, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	695a      	ldr	r2, [r3, #20]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff fc9d 	bl	8002220 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028e6:	8a7b      	ldrh	r3, [r7, #18]
 80028e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d04f      	beq.n	8002990 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80028f0:	7d7b      	ldrb	r3, [r7, #21]
 80028f2:	015b      	lsls	r3, r3, #5
 80028f4:	3328      	adds	r3, #40	; 0x28
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	7d7b      	ldrb	r3, [r7, #21]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	b29b      	uxth	r3, r3
 800290c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002914:	b29c      	uxth	r4, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	7d7b      	ldrb	r3, [r7, #21]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	441a      	add	r2, r3
 8002922:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800292a:	b29b      	uxth	r3, r3
 800292c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002936:	b29b      	uxth	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4413      	add	r3, r2
 8002942:	3302      	adds	r3, #2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	4413      	add	r3, r2
 800294c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	441a      	add	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d106      	bne.n	800297e <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	4619      	mov	r1, r3
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f003 fef2 	bl	8006760 <HAL_PCD_DataInStageCallback>
 800297c:	e008      	b.n	8002990 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	7819      	ldrb	r1, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff fc96 	bl	80022bc <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002998:	b29b      	uxth	r3, r3
 800299a:	b21b      	sxth	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	f6ff ad74 	blt.w	800248a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3724      	adds	r7, #36	; 0x24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd90      	pop	{r4, r7, pc}
 80029ac:	ffff8080 	.word	0xffff8080
 80029b0:	ffff80c0 	.word	0xffff80c0

080029b4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	607b      	str	r3, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	817b      	strh	r3, [r7, #10]
 80029c2:	4613      	mov	r3, r2
 80029c4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029c6:	897b      	ldrh	r3, [r7, #10]
 80029c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029d2:	897b      	ldrh	r3, [r7, #10]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	015b      	lsls	r3, r3, #5
 80029da:	3328      	adds	r3, #40	; 0x28
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4413      	add	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	e006      	b.n	80029f2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029e4:	897b      	ldrh	r3, [r7, #10]
 80029e6:	015b      	lsls	r3, r3, #5
 80029e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4413      	add	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029f2:	893b      	ldrh	r3, [r7, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d107      	bne.n	8002a08 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2200      	movs	r2, #0
 80029fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	80da      	strh	r2, [r3, #6]
 8002a06:	e00b      	b.n	8002a20 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	0c1b      	lsrs	r3, r3, #16
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	371c      	adds	r7, #28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e26c      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8087 	beq.w	8002b5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a4c:	4b92      	ldr	r3, [pc, #584]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d00c      	beq.n	8002a72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a58:	4b8f      	ldr	r3, [pc, #572]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d112      	bne.n	8002a8a <HAL_RCC_OscConfig+0x5e>
 8002a64:	4b8c      	ldr	r3, [pc, #560]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a70:	d10b      	bne.n	8002a8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a72:	4b89      	ldr	r3, [pc, #548]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d06c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x12c>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d168      	bne.n	8002b58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e246      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x76>
 8002a94:	4b80      	ldr	r3, [pc, #512]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a7f      	ldr	r2, [pc, #508]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	e02e      	b.n	8002b00 <HAL_RCC_OscConfig+0xd4>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x98>
 8002aaa:	4b7b      	ldr	r3, [pc, #492]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a7a      	ldr	r2, [pc, #488]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b78      	ldr	r3, [pc, #480]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a77      	ldr	r2, [pc, #476]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e01d      	b.n	8002b00 <HAL_RCC_OscConfig+0xd4>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0xbc>
 8002ace:	4b72      	ldr	r3, [pc, #456]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a71      	ldr	r2, [pc, #452]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b6f      	ldr	r3, [pc, #444]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6e      	ldr	r2, [pc, #440]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0xd4>
 8002ae8:	4b6b      	ldr	r3, [pc, #428]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a6a      	ldr	r2, [pc, #424]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b68      	ldr	r3, [pc, #416]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a67      	ldr	r2, [pc, #412]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe fa20 	bl	8000f4c <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe fa1c 	bl	8000f4c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e1fa      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0xe4>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fe fa0c 	bl	8000f4c <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe fa08 	bl	8000f4c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e1e6      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x10c>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d063      	beq.n	8002c2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b66:	4b4c      	ldr	r3, [pc, #304]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b72:	4b49      	ldr	r3, [pc, #292]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d11c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x18c>
 8002b7e:	4b46      	ldr	r3, [pc, #280]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d116      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x176>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1ba      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b3d      	ldr	r3, [pc, #244]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4939      	ldr	r1, [pc, #228]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	e03a      	b.n	8002c2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc0:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <HAL_RCC_OscConfig+0x270>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fe f9c1 	bl	8000f4c <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bce:	f7fe f9bd 	bl	8000f4c <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e19b      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b2a      	ldr	r3, [pc, #168]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4927      	ldr	r1, [pc, #156]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
 8002c00:	e015      	b.n	8002c2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c02:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <HAL_RCC_OscConfig+0x270>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fe f9a0 	bl	8000f4c <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c10:	f7fe f99c 	bl	8000f4c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e17a      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d03a      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d019      	beq.n	8002c76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c48:	f7fe f980 	bl	8000f4c <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fe f97c 	bl	8000f4c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e15a      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f000 faf6 	bl	8003260 <RCC_Delay>
 8002c74:	e01c      	b.n	8002cb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7c:	f7fe f966 	bl	8000f4c <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c82:	e00f      	b.n	8002ca4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c84:	f7fe f962 	bl	8000f4c <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d908      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e140      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	42420000 	.word	0x42420000
 8002ca0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca4:	4b9e      	ldr	r3, [pc, #632]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1e9      	bne.n	8002c84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80a6 	beq.w	8002e0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc2:	4b97      	ldr	r3, [pc, #604]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10d      	bne.n	8002cea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cce:	4b94      	ldr	r3, [pc, #592]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	4a93      	ldr	r2, [pc, #588]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	61d3      	str	r3, [r2, #28]
 8002cda:	4b91      	ldr	r3, [pc, #580]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cea:	4b8e      	ldr	r3, [pc, #568]	; (8002f24 <HAL_RCC_OscConfig+0x4f8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d118      	bne.n	8002d28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf6:	4b8b      	ldr	r3, [pc, #556]	; (8002f24 <HAL_RCC_OscConfig+0x4f8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a8a      	ldr	r2, [pc, #552]	; (8002f24 <HAL_RCC_OscConfig+0x4f8>)
 8002cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d02:	f7fe f923 	bl	8000f4c <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0a:	f7fe f91f 	bl	8000f4c <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b64      	cmp	r3, #100	; 0x64
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e0fd      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1c:	4b81      	ldr	r3, [pc, #516]	; (8002f24 <HAL_RCC_OscConfig+0x4f8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d106      	bne.n	8002d3e <HAL_RCC_OscConfig+0x312>
 8002d30:	4b7b      	ldr	r3, [pc, #492]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	4a7a      	ldr	r2, [pc, #488]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6213      	str	r3, [r2, #32]
 8002d3c:	e02d      	b.n	8002d9a <HAL_RCC_OscConfig+0x36e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x334>
 8002d46:	4b76      	ldr	r3, [pc, #472]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	4a75      	ldr	r2, [pc, #468]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	6213      	str	r3, [r2, #32]
 8002d52:	4b73      	ldr	r3, [pc, #460]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	4a72      	ldr	r2, [pc, #456]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d58:	f023 0304 	bic.w	r3, r3, #4
 8002d5c:	6213      	str	r3, [r2, #32]
 8002d5e:	e01c      	b.n	8002d9a <HAL_RCC_OscConfig+0x36e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b05      	cmp	r3, #5
 8002d66:	d10c      	bne.n	8002d82 <HAL_RCC_OscConfig+0x356>
 8002d68:	4b6d      	ldr	r3, [pc, #436]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	4a6c      	ldr	r2, [pc, #432]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d6e:	f043 0304 	orr.w	r3, r3, #4
 8002d72:	6213      	str	r3, [r2, #32]
 8002d74:	4b6a      	ldr	r3, [pc, #424]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4a69      	ldr	r2, [pc, #420]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6213      	str	r3, [r2, #32]
 8002d80:	e00b      	b.n	8002d9a <HAL_RCC_OscConfig+0x36e>
 8002d82:	4b67      	ldr	r3, [pc, #412]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4a66      	ldr	r2, [pc, #408]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	6213      	str	r3, [r2, #32]
 8002d8e:	4b64      	ldr	r3, [pc, #400]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4a63      	ldr	r2, [pc, #396]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d94:	f023 0304 	bic.w	r3, r3, #4
 8002d98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d015      	beq.n	8002dce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da2:	f7fe f8d3 	bl	8000f4c <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7fe f8cf 	bl	8000f4c <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e0ab      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc0:	4b57      	ldr	r3, [pc, #348]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ee      	beq.n	8002daa <HAL_RCC_OscConfig+0x37e>
 8002dcc:	e014      	b.n	8002df8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dce:	f7fe f8bd 	bl	8000f4c <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fe f8b9 	bl	8000f4c <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e095      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dec:	4b4c      	ldr	r3, [pc, #304]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1ee      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d105      	bne.n	8002e0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfe:	4b48      	ldr	r3, [pc, #288]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	4a47      	ldr	r2, [pc, #284]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 8081 	beq.w	8002f16 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e14:	4b42      	ldr	r3, [pc, #264]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d061      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d146      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e28:	4b3f      	ldr	r3, [pc, #252]	; (8002f28 <HAL_RCC_OscConfig+0x4fc>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fe f88d 	bl	8000f4c <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e36:	f7fe f889 	bl	8000f4c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e067      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e48:	4b35      	ldr	r3, [pc, #212]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f0      	bne.n	8002e36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5c:	d108      	bne.n	8002e70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e5e:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	492d      	ldr	r1, [pc, #180]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e70:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a19      	ldr	r1, [r3, #32]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	430b      	orrs	r3, r1
 8002e82:	4927      	ldr	r1, [pc, #156]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e88:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <HAL_RCC_OscConfig+0x4fc>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7fe f85d 	bl	8000f4c <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e96:	f7fe f859 	bl	8000f4c <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e037      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x46a>
 8002eb4:	e02f      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb6:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <HAL_RCC_OscConfig+0x4fc>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7fe f846 	bl	8000f4c <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec4:	f7fe f842 	bl	8000f4c <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e020      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x498>
 8002ee2:	e018      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e013      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d106      	bne.n	8002f12 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d001      	beq.n	8002f16 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40007000 	.word	0x40007000
 8002f28:	42420060 	.word	0x42420060

08002f2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0d0      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f40:	4b6a      	ldr	r3, [pc, #424]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d910      	bls.n	8002f70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b67      	ldr	r3, [pc, #412]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 0207 	bic.w	r2, r3, #7
 8002f56:	4965      	ldr	r1, [pc, #404]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b63      	ldr	r3, [pc, #396]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0b8      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d020      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f88:	4b59      	ldr	r3, [pc, #356]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4a58      	ldr	r2, [pc, #352]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa0:	4b53      	ldr	r3, [pc, #332]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	4a52      	ldr	r2, [pc, #328]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002faa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fac:	4b50      	ldr	r3, [pc, #320]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	494d      	ldr	r1, [pc, #308]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d040      	beq.n	800304c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d107      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	4b47      	ldr	r3, [pc, #284]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d115      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e07f      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d107      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fea:	4b41      	ldr	r3, [pc, #260]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e073      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffa:	4b3d      	ldr	r3, [pc, #244]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e06b      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800300a:	4b39      	ldr	r3, [pc, #228]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f023 0203 	bic.w	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4936      	ldr	r1, [pc, #216]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800301c:	f7fd ff96 	bl	8000f4c <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003022:	e00a      	b.n	800303a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003024:	f7fd ff92 	bl	8000f4c <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e053      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303a:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 020c 	and.w	r2, r3, #12
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	429a      	cmp	r2, r3
 800304a:	d1eb      	bne.n	8003024 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800304c:	4b27      	ldr	r3, [pc, #156]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d210      	bcs.n	800307c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305a:	4b24      	ldr	r3, [pc, #144]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 0207 	bic.w	r2, r3, #7
 8003062:	4922      	ldr	r1, [pc, #136]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306a:	4b20      	ldr	r3, [pc, #128]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d001      	beq.n	800307c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e032      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4916      	ldr	r1, [pc, #88]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030a6:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	490e      	ldr	r1, [pc, #56]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ba:	f000 f821 	bl	8003100 <HAL_RCC_GetSysClockFreq>
 80030be:	4601      	mov	r1, r0
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	5cd3      	ldrb	r3, [r2, r3]
 80030ce:	fa21 f303 	lsr.w	r3, r1, r3
 80030d2:	4a09      	ldr	r2, [pc, #36]	; (80030f8 <HAL_RCC_ClockConfig+0x1cc>)
 80030d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030d6:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_RCC_ClockConfig+0x1d0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fdf4 	bl	8000cc8 <HAL_InitTick>

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40022000 	.word	0x40022000
 80030f0:	40021000 	.word	0x40021000
 80030f4:	08007518 	.word	0x08007518
 80030f8:	20000000 	.word	0x20000000
 80030fc:	20000004 	.word	0x20000004

08003100 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003100:	b490      	push	{r4, r7}
 8003102:	b08a      	sub	sp, #40	; 0x28
 8003104:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003106:	4b2a      	ldr	r3, [pc, #168]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003108:	1d3c      	adds	r4, r7, #4
 800310a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800310c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003110:	4b28      	ldr	r3, [pc, #160]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	2300      	movs	r3, #0
 800311c:	61bb      	str	r3, [r7, #24]
 800311e:	2300      	movs	r3, #0
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800312a:	4b23      	ldr	r3, [pc, #140]	; (80031b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b04      	cmp	r3, #4
 8003138:	d002      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x40>
 800313a:	2b08      	cmp	r3, #8
 800313c:	d003      	beq.n	8003146 <HAL_RCC_GetSysClockFreq+0x46>
 800313e:	e02d      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003140:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003142:	623b      	str	r3, [r7, #32]
      break;
 8003144:	e02d      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	0c9b      	lsrs	r3, r3, #18
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003152:	4413      	add	r3, r2
 8003154:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003158:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d013      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003164:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	0c5b      	lsrs	r3, r3, #17
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003172:	4413      	add	r3, r2
 8003174:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003178:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	4a0f      	ldr	r2, [pc, #60]	; (80031bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800317e:	fb02 f203 	mul.w	r2, r2, r3
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
 800318a:	e004      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	4a0c      	ldr	r2, [pc, #48]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003190:	fb02 f303 	mul.w	r3, r2, r3
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	623b      	str	r3, [r7, #32]
      break;
 800319a:	e002      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800319c:	4b07      	ldr	r3, [pc, #28]	; (80031bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800319e:	623b      	str	r3, [r7, #32]
      break;
 80031a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a2:	6a3b      	ldr	r3, [r7, #32]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3728      	adds	r7, #40	; 0x28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc90      	pop	{r4, r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	080074a8 	.word	0x080074a8
 80031b4:	080074b8 	.word	0x080074b8
 80031b8:	40021000 	.word	0x40021000
 80031bc:	007a1200 	.word	0x007a1200
 80031c0:	003d0900 	.word	0x003d0900

080031c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c8:	4b02      	ldr	r3, [pc, #8]	; (80031d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ca:	681b      	ldr	r3, [r3, #0]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	20000000 	.word	0x20000000

080031d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031dc:	f7ff fff2 	bl	80031c4 <HAL_RCC_GetHCLKFreq>
 80031e0:	4601      	mov	r1, r0
 80031e2:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	0adb      	lsrs	r3, r3, #11
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4a03      	ldr	r2, [pc, #12]	; (80031fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ee:	5cd3      	ldrb	r3, [r2, r3]
 80031f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40021000 	.word	0x40021000
 80031fc:	08007528 	.word	0x08007528

08003200 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	220f      	movs	r2, #15
 800320e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003210:	4b11      	ldr	r3, [pc, #68]	; (8003258 <HAL_RCC_GetClockConfig+0x58>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0203 	and.w	r2, r3, #3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800321c:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <HAL_RCC_GetClockConfig+0x58>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_RCC_GetClockConfig+0x58>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003234:	4b08      	ldr	r3, [pc, #32]	; (8003258 <HAL_RCC_GetClockConfig+0x58>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	08db      	lsrs	r3, r3, #3
 800323a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003242:	4b06      	ldr	r3, [pc, #24]	; (800325c <HAL_RCC_GetClockConfig+0x5c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0207 	and.w	r2, r3, #7
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr
 8003258:	40021000 	.word	0x40021000
 800325c:	40022000 	.word	0x40022000

08003260 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003268:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <RCC_Delay+0x34>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <RCC_Delay+0x38>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	0a5b      	lsrs	r3, r3, #9
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	fb02 f303 	mul.w	r3, r2, r3
 800327a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800327c:	bf00      	nop
  }
  while (Delay --);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1e5a      	subs	r2, r3, #1
 8003282:	60fa      	str	r2, [r7, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f9      	bne.n	800327c <RCC_Delay+0x1c>
}
 8003288:	bf00      	nop
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	20000000 	.word	0x20000000
 8003298:	10624dd3 	.word	0x10624dd3

0800329c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	2300      	movs	r3, #0
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d07d      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80032b8:	2300      	movs	r3, #0
 80032ba:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032bc:	4b4f      	ldr	r3, [pc, #316]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10d      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c8:	4b4c      	ldr	r3, [pc, #304]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	4a4b      	ldr	r2, [pc, #300]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d2:	61d3      	str	r3, [r2, #28]
 80032d4:	4b49      	ldr	r3, [pc, #292]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e0:	2301      	movs	r3, #1
 80032e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e4:	4b46      	ldr	r3, [pc, #280]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d118      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f0:	4b43      	ldr	r3, [pc, #268]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a42      	ldr	r2, [pc, #264]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fc:	f7fd fe26 	bl	8000f4c <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003302:	e008      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003304:	f7fd fe22 	bl	8000f4c <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	; 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e06d      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003316:	4b3a      	ldr	r3, [pc, #232]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003322:	4b36      	ldr	r3, [pc, #216]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d02e      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	429a      	cmp	r2, r3
 800333e:	d027      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003340:	4b2e      	ldr	r3, [pc, #184]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003348:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800334a:	4b2e      	ldr	r3, [pc, #184]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800334c:	2201      	movs	r2, #1
 800334e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003350:	4b2c      	ldr	r3, [pc, #176]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003356:	4a29      	ldr	r2, [pc, #164]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d014      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7fd fdf1 	bl	8000f4c <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336c:	e00a      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7fd fded 	bl	8000f4c <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	; 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e036      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003384:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0ee      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003390:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4917      	ldr	r1, [pc, #92]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d105      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a8:	4b14      	ldr	r3, [pc, #80]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	4a13      	ldr	r2, [pc, #76]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d008      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033c0:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	490b      	ldr	r1, [pc, #44]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d008      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033de:	4b07      	ldr	r3, [pc, #28]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	4904      	ldr	r1, [pc, #16]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40021000 	.word	0x40021000
 8003400:	40007000 	.word	0x40007000
 8003404:	42420440 	.word	0x42420440

08003408 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b08d      	sub	sp, #52	; 0x34
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003410:	4b55      	ldr	r3, [pc, #340]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003412:	f107 040c 	add.w	r4, r7, #12
 8003416:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003418:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800341c:	4b53      	ldr	r3, [pc, #332]	; (800356c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
 8003426:	2300      	movs	r3, #0
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800342a:	2300      	movs	r3, #0
 800342c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	2300      	movs	r3, #0
 8003434:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d07f      	beq.n	800353c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800343c:	2b10      	cmp	r3, #16
 800343e:	d002      	beq.n	8003446 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003440:	2b01      	cmp	r3, #1
 8003442:	d048      	beq.n	80034d6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003444:	e08b      	b.n	800355e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003446:	4b4a      	ldr	r3, [pc, #296]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800344c:	4b48      	ldr	r3, [pc, #288]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d07f      	beq.n	8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	0c9b      	lsrs	r3, r3, #18
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003464:	4413      	add	r3, r2
 8003466:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800346a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d018      	beq.n	80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003476:	4b3e      	ldr	r3, [pc, #248]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	0c5b      	lsrs	r3, r3, #17
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003484:	4413      	add	r3, r2
 8003486:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00d      	beq.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003496:	4a37      	ldr	r2, [pc, #220]	; (8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	fbb2 f2f3 	udiv	r2, r2, r3
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	fb02 f303 	mul.w	r3, r2, r3
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a6:	e004      	b.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	4a33      	ldr	r2, [pc, #204]	; (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80034ac:	fb02 f303 	mul.w	r3, r2, r3
 80034b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80034b2:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034be:	d102      	bne.n	80034c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80034c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80034c4:	e048      	b.n	8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80034c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4a2c      	ldr	r2, [pc, #176]	; (800357c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80034d4:	e040      	b.n	8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80034d6:	4b26      	ldr	r3, [pc, #152]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e6:	d108      	bne.n	80034fa <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80034f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80034f8:	e01f      	b.n	800353a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003504:	d109      	bne.n	800351a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003506:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003512:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
 8003518:	e00f      	b.n	800353a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003520:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003524:	d11a      	bne.n	800355c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003526:	4b12      	ldr	r3, [pc, #72]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d014      	beq.n	800355c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003532:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003536:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003538:	e010      	b.n	800355c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800353a:	e00f      	b.n	800355c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800353c:	f7ff fe4c 	bl	80031d8 <HAL_RCC_GetPCLK2Freq>
 8003540:	4602      	mov	r2, r0
 8003542:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	0b9b      	lsrs	r3, r3, #14
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	3301      	adds	r3, #1
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	fbb2 f3f3 	udiv	r3, r2, r3
 8003554:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003556:	e002      	b.n	800355e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003558:	bf00      	nop
 800355a:	e000      	b.n	800355e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800355c:	bf00      	nop
    }
  }
  return (frequency);
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003560:	4618      	mov	r0, r3
 8003562:	3734      	adds	r7, #52	; 0x34
 8003564:	46bd      	mov	sp, r7
 8003566:	bd90      	pop	{r4, r7, pc}
 8003568:	080074bc 	.word	0x080074bc
 800356c:	080074cc 	.word	0x080074cc
 8003570:	40021000 	.word	0x40021000
 8003574:	007a1200 	.word	0x007a1200
 8003578:	003d0900 	.word	0x003d0900
 800357c:	aaaaaaab 	.word	0xaaaaaaab

08003580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e01d      	b.n	80035ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f815 	bl	80035d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4619      	mov	r1, r3
 80035be:	4610      	mov	r0, r2
 80035c0:	f000 f962 	bl	8003888 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b06      	cmp	r3, #6
 8003610:	d007      	beq.n	8003622 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0201 	orr.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b02      	cmp	r3, #2
 8003642:	d122      	bne.n	800368a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b02      	cmp	r3, #2
 8003650:	d11b      	bne.n	800368a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f06f 0202 	mvn.w	r2, #2
 800365a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f8ed 	bl	8003850 <HAL_TIM_IC_CaptureCallback>
 8003676:	e005      	b.n	8003684 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f8e0 	bl	800383e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8ef 	bl	8003862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b04      	cmp	r3, #4
 8003696:	d122      	bne.n	80036de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d11b      	bne.n	80036de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f06f 0204 	mvn.w	r2, #4
 80036ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f8c3 	bl	8003850 <HAL_TIM_IC_CaptureCallback>
 80036ca:	e005      	b.n	80036d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f8b6 	bl	800383e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f8c5 	bl	8003862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d122      	bne.n	8003732 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d11b      	bne.n	8003732 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f06f 0208 	mvn.w	r2, #8
 8003702:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2204      	movs	r2, #4
 8003708:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f899 	bl	8003850 <HAL_TIM_IC_CaptureCallback>
 800371e:	e005      	b.n	800372c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f88c 	bl	800383e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f89b 	bl	8003862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b10      	cmp	r3, #16
 800373e:	d122      	bne.n	8003786 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	2b10      	cmp	r3, #16
 800374c:	d11b      	bne.n	8003786 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f06f 0210 	mvn.w	r2, #16
 8003756:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2208      	movs	r2, #8
 800375c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f86f 	bl	8003850 <HAL_TIM_IC_CaptureCallback>
 8003772:	e005      	b.n	8003780 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f862 	bl	800383e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f871 	bl	8003862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b01      	cmp	r3, #1
 8003792:	d10e      	bne.n	80037b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d107      	bne.n	80037b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f06f 0201 	mvn.w	r2, #1
 80037aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7fd fa05 	bl	8000bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037bc:	2b80      	cmp	r3, #128	; 0x80
 80037be:	d10e      	bne.n	80037de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ca:	2b80      	cmp	r3, #128	; 0x80
 80037cc:	d107      	bne.n	80037de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f8c0 	bl	800395e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e8:	2b40      	cmp	r3, #64	; 0x40
 80037ea:	d10e      	bne.n	800380a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	2b40      	cmp	r3, #64	; 0x40
 80037f8:	d107      	bne.n	800380a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f835 	bl	8003874 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b20      	cmp	r3, #32
 8003816:	d10e      	bne.n	8003836 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b20      	cmp	r3, #32
 8003824:	d107      	bne.n	8003836 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f06f 0220 	mvn.w	r2, #32
 800382e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f88b 	bl	800394c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr

08003862 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr

08003874 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr
	...

08003888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a29      	ldr	r2, [pc, #164]	; (8003940 <TIM_Base_SetConfig+0xb8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00b      	beq.n	80038b8 <TIM_Base_SetConfig+0x30>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a6:	d007      	beq.n	80038b8 <TIM_Base_SetConfig+0x30>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a26      	ldr	r2, [pc, #152]	; (8003944 <TIM_Base_SetConfig+0xbc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_Base_SetConfig+0x30>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a25      	ldr	r2, [pc, #148]	; (8003948 <TIM_Base_SetConfig+0xc0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d108      	bne.n	80038ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a1c      	ldr	r2, [pc, #112]	; (8003940 <TIM_Base_SetConfig+0xb8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00b      	beq.n	80038ea <TIM_Base_SetConfig+0x62>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d8:	d007      	beq.n	80038ea <TIM_Base_SetConfig+0x62>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a19      	ldr	r2, [pc, #100]	; (8003944 <TIM_Base_SetConfig+0xbc>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d003      	beq.n	80038ea <TIM_Base_SetConfig+0x62>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a18      	ldr	r2, [pc, #96]	; (8003948 <TIM_Base_SetConfig+0xc0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d108      	bne.n	80038fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a07      	ldr	r2, [pc, #28]	; (8003940 <TIM_Base_SetConfig+0xb8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d103      	bne.n	8003930 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	615a      	str	r2, [r3, #20]
}
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr
 8003940:	40012c00 	.word	0x40012c00
 8003944:	40000400 	.word	0x40000400
 8003948:	40000800 	.word	0x40000800

0800394c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003970:	b084      	sub	sp, #16
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	f107 0014 	add.w	r0, r7, #20
 800397e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	b004      	add	sp, #16
 800398e:	4770      	bx	lr

08003990 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003998:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800399c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	89fb      	ldrh	r3, [r7, #14]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr

080039be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80039c6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80039ca:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	b21a      	sxth	r2, r3
 80039d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039da:	43db      	mvns	r3, r3
 80039dc:	b21b      	sxth	r3, r3
 80039de:	4013      	ands	r3, r2
 80039e0:	b21b      	sxth	r3, r3
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	460b      	mov	r3, r1
 8003a00:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr

08003a0e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a0e:	b084      	sub	sp, #16
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	f107 0014 	add.w	r0, r7, #20
 8003a1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff ffa5 	bl	8003990 <USB_EnableGlobalInt>

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a52:	b004      	add	sp, #16
 8003a54:	4770      	bx	lr
	...

08003a58 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a58:	b490      	push	{r4, r7}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	78db      	ldrb	r3, [r3, #3]
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d819      	bhi.n	8003aba <USB_ActivateEndpoint+0x62>
 8003a86:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <USB_ActivateEndpoint+0x34>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003a9d 	.word	0x08003a9d
 8003a90:	08003ab1 	.word	0x08003ab1
 8003a94:	08003ac1 	.word	0x08003ac1
 8003a98:	08003aa7 	.word	0x08003aa7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003a9c:	89bb      	ldrh	r3, [r7, #12]
 8003a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aa2:	81bb      	strh	r3, [r7, #12]
      break;
 8003aa4:	e00d      	b.n	8003ac2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003aa6:	89bb      	ldrh	r3, [r7, #12]
 8003aa8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003aac:	81bb      	strh	r3, [r7, #12]
      break;
 8003aae:	e008      	b.n	8003ac2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003ab0:	89bb      	ldrh	r3, [r7, #12]
 8003ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ab6:	81bb      	strh	r3, [r7, #12]
      break;
 8003ab8:	e003      	b.n	8003ac2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
      break;
 8003abe:	e000      	b.n	8003ac2 <USB_ActivateEndpoint+0x6a>
      break;
 8003ac0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	441a      	add	r2, r3
 8003acc:	89bb      	ldrh	r3, [r7, #12]
 8003ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	4313      	orrs	r3, r2
 8003b02:	b29c      	uxth	r4, r3
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	441a      	add	r2, r3
 8003b0e:	4b8a      	ldr	r3, [pc, #552]	; (8003d38 <USB_ActivateEndpoint+0x2e0>)
 8003b10:	4323      	orrs	r3, r4
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	7b1b      	ldrb	r3, [r3, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f040 8112 	bne.w	8003d44 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	785b      	ldrb	r3, [r3, #1]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d067      	beq.n	8003bf8 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b28:	687c      	ldr	r4, [r7, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	441c      	add	r4, r3
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	4423      	add	r3, r4
 8003b3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b40:	461c      	mov	r4, r3
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	88db      	ldrh	r3, [r3, #6]
 8003b46:	085b      	lsrs	r3, r3, #1
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	b29c      	uxth	r4, r3
 8003b5e:	4623      	mov	r3, r4
 8003b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d014      	beq.n	8003b92 <USB_ActivateEndpoint+0x13a>
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7e:	b29c      	uxth	r4, r3
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	441a      	add	r2, r3
 8003b8a:	4b6c      	ldr	r3, [pc, #432]	; (8003d3c <USB_ActivateEndpoint+0x2e4>)
 8003b8c:	4323      	orrs	r3, r4
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	78db      	ldrb	r3, [r3, #3]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d018      	beq.n	8003bcc <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bb0:	b29c      	uxth	r4, r3
 8003bb2:	f084 0320 	eor.w	r3, r4, #32
 8003bb6:	b29c      	uxth	r4, r3
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	441a      	add	r2, r3
 8003bc2:	4b5d      	ldr	r3, [pc, #372]	; (8003d38 <USB_ActivateEndpoint+0x2e0>)
 8003bc4:	4323      	orrs	r3, r4
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	8013      	strh	r3, [r2, #0]
 8003bca:	e22b      	b.n	8004024 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003be2:	b29c      	uxth	r4, r3
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	441a      	add	r2, r3
 8003bee:	4b52      	ldr	r3, [pc, #328]	; (8003d38 <USB_ActivateEndpoint+0x2e0>)
 8003bf0:	4323      	orrs	r3, r4
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	8013      	strh	r3, [r2, #0]
 8003bf6:	e215      	b.n	8004024 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003bf8:	687c      	ldr	r4, [r7, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	441c      	add	r4, r3
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	4423      	add	r3, r4
 8003c0c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003c10:	461c      	mov	r4, r3
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	88db      	ldrh	r3, [r3, #6]
 8003c16:	085b      	lsrs	r3, r3, #1
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003c20:	687c      	ldr	r4, [r7, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	441c      	add	r4, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	4423      	add	r3, r4
 8003c34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c38:	461c      	mov	r4, r3
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10e      	bne.n	8003c60 <USB_ActivateEndpoint+0x208>
 8003c42:	8823      	ldrh	r3, [r4, #0]
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	8023      	strh	r3, [r4, #0]
 8003c4e:	8823      	ldrh	r3, [r4, #0]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	8023      	strh	r3, [r4, #0]
 8003c5e:	e02d      	b.n	8003cbc <USB_ActivateEndpoint+0x264>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b3e      	cmp	r3, #62	; 0x3e
 8003c66:	d812      	bhi.n	8003c8e <USB_ActivateEndpoint+0x236>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <USB_ActivateEndpoint+0x22a>
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	029b      	lsls	r3, r3, #10
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	8023      	strh	r3, [r4, #0]
 8003c8c:	e016      	b.n	8003cbc <USB_ActivateEndpoint+0x264>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d102      	bne.n	8003ca8 <USB_ActivateEndpoint+0x250>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	029b      	lsls	r3, r3, #10
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	b29c      	uxth	r4, r3
 8003cca:	4623      	mov	r3, r4
 8003ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d014      	beq.n	8003cfe <USB_ActivateEndpoint+0x2a6>
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cea:	b29c      	uxth	r4, r3
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	441a      	add	r2, r3
 8003cf6:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <USB_ActivateEndpoint+0x2e8>)
 8003cf8:	4323      	orrs	r3, r4
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d14:	b29c      	uxth	r4, r3
 8003d16:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003d1a:	b29c      	uxth	r4, r3
 8003d1c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003d20:	b29c      	uxth	r4, r3
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	441a      	add	r2, r3
 8003d2c:	4b02      	ldr	r3, [pc, #8]	; (8003d38 <USB_ActivateEndpoint+0x2e0>)
 8003d2e:	4323      	orrs	r3, r4
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	8013      	strh	r3, [r2, #0]
 8003d34:	e176      	b.n	8004024 <USB_ActivateEndpoint+0x5cc>
 8003d36:	bf00      	nop
 8003d38:	ffff8080 	.word	0xffff8080
 8003d3c:	ffff80c0 	.word	0xffff80c0
 8003d40:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5a:	b29c      	uxth	r4, r3
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	441a      	add	r2, r3
 8003d66:	4b96      	ldr	r3, [pc, #600]	; (8003fc0 <USB_ActivateEndpoint+0x568>)
 8003d68:	4323      	orrs	r3, r4
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003d6e:	687c      	ldr	r4, [r7, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	441c      	add	r4, r3
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	4423      	add	r3, r4
 8003d82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d86:	461c      	mov	r4, r3
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	891b      	ldrh	r3, [r3, #8]
 8003d8c:	085b      	lsrs	r3, r3, #1
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	8023      	strh	r3, [r4, #0]
 8003d96:	687c      	ldr	r4, [r7, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	441c      	add	r4, r3
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	4423      	add	r3, r4
 8003daa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003dae:	461c      	mov	r4, r3
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	895b      	ldrh	r3, [r3, #10]
 8003db4:	085b      	lsrs	r3, r3, #1
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	785b      	ldrb	r3, [r3, #1]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f040 8088 	bne.w	8003ed8 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	b29c      	uxth	r4, r3
 8003dd6:	4623      	mov	r3, r4
 8003dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d014      	beq.n	8003e0a <USB_ActivateEndpoint+0x3b2>
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df6:	b29c      	uxth	r4, r3
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	441a      	add	r2, r3
 8003e02:	4b70      	ldr	r3, [pc, #448]	; (8003fc4 <USB_ActivateEndpoint+0x56c>)
 8003e04:	4323      	orrs	r3, r4
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	b29c      	uxth	r4, r3
 8003e18:	4623      	mov	r3, r4
 8003e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d014      	beq.n	8003e4c <USB_ActivateEndpoint+0x3f4>
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e38:	b29c      	uxth	r4, r3
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	441a      	add	r2, r3
 8003e44:	4b60      	ldr	r3, [pc, #384]	; (8003fc8 <USB_ActivateEndpoint+0x570>)
 8003e46:	4323      	orrs	r3, r4
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e62:	b29c      	uxth	r4, r3
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	441a      	add	r2, r3
 8003e6e:	4b56      	ldr	r3, [pc, #344]	; (8003fc8 <USB_ActivateEndpoint+0x570>)
 8003e70:	4323      	orrs	r3, r4
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8c:	b29c      	uxth	r4, r3
 8003e8e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003e92:	b29c      	uxth	r4, r3
 8003e94:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003e98:	b29c      	uxth	r4, r3
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	441a      	add	r2, r3
 8003ea4:	4b49      	ldr	r3, [pc, #292]	; (8003fcc <USB_ActivateEndpoint+0x574>)
 8003ea6:	4323      	orrs	r3, r4
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec2:	b29c      	uxth	r4, r3
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	441a      	add	r2, r3
 8003ece:	4b3f      	ldr	r3, [pc, #252]	; (8003fcc <USB_ActivateEndpoint+0x574>)
 8003ed0:	4323      	orrs	r3, r4
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	8013      	strh	r3, [r2, #0]
 8003ed6:	e0a5      	b.n	8004024 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b29c      	uxth	r4, r3
 8003ee6:	4623      	mov	r3, r4
 8003ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d014      	beq.n	8003f1a <USB_ActivateEndpoint+0x4c2>
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f06:	b29c      	uxth	r4, r3
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	441a      	add	r2, r3
 8003f12:	4b2c      	ldr	r3, [pc, #176]	; (8003fc4 <USB_ActivateEndpoint+0x56c>)
 8003f14:	4323      	orrs	r3, r4
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	b29c      	uxth	r4, r3
 8003f28:	4623      	mov	r3, r4
 8003f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d014      	beq.n	8003f5c <USB_ActivateEndpoint+0x504>
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f48:	b29c      	uxth	r4, r3
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	441a      	add	r2, r3
 8003f54:	4b1c      	ldr	r3, [pc, #112]	; (8003fc8 <USB_ActivateEndpoint+0x570>)
 8003f56:	4323      	orrs	r3, r4
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f72:	b29c      	uxth	r4, r3
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	441a      	add	r2, r3
 8003f7e:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <USB_ActivateEndpoint+0x56c>)
 8003f80:	4323      	orrs	r3, r4
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	78db      	ldrb	r3, [r3, #3]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d020      	beq.n	8003fd0 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fa4:	b29c      	uxth	r4, r3
 8003fa6:	f084 0320 	eor.w	r3, r4, #32
 8003faa:	b29c      	uxth	r4, r3
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	441a      	add	r2, r3
 8003fb6:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <USB_ActivateEndpoint+0x574>)
 8003fb8:	4323      	orrs	r3, r4
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	8013      	strh	r3, [r2, #0]
 8003fbe:	e01c      	b.n	8003ffa <USB_ActivateEndpoint+0x5a2>
 8003fc0:	ffff8180 	.word	0xffff8180
 8003fc4:	ffffc080 	.word	0xffffc080
 8003fc8:	ffff80c0 	.word	0xffff80c0
 8003fcc:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe6:	b29c      	uxth	r4, r3
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	441a      	add	r2, r3
 8003ff2:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <USB_ActivateEndpoint+0x5d8>)
 8003ff4:	4323      	orrs	r3, r4
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	b29b      	uxth	r3, r3
 8004008:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800400c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004010:	b29c      	uxth	r4, r3
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	441a      	add	r2, r3
 800401c:	4b04      	ldr	r3, [pc, #16]	; (8004030 <USB_ActivateEndpoint+0x5d8>)
 800401e:	4323      	orrs	r3, r4
 8004020:	b29b      	uxth	r3, r3
 8004022:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004024:	7bfb      	ldrb	r3, [r7, #15]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bc90      	pop	{r4, r7}
 800402e:	4770      	bx	lr
 8004030:	ffff8080 	.word	0xffff8080

08004034 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004034:	b490      	push	{r4, r7}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	7b1b      	ldrb	r3, [r3, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d171      	bne.n	800412a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	785b      	ldrb	r3, [r3, #1]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d036      	beq.n	80040bc <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	b29c      	uxth	r4, r3
 800405c:	4623      	mov	r3, r4
 800405e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d014      	beq.n	8004090 <USB_DeactivateEndpoint+0x5c>
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	b29b      	uxth	r3, r3
 8004074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407c:	b29c      	uxth	r4, r3
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	441a      	add	r2, r3
 8004088:	4b6b      	ldr	r3, [pc, #428]	; (8004238 <USB_DeactivateEndpoint+0x204>)
 800408a:	4323      	orrs	r3, r4
 800408c:	b29b      	uxth	r3, r3
 800408e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	b29b      	uxth	r3, r3
 800409e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a6:	b29c      	uxth	r4, r3
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	441a      	add	r2, r3
 80040b2:	4b62      	ldr	r3, [pc, #392]	; (800423c <USB_DeactivateEndpoint+0x208>)
 80040b4:	4323      	orrs	r3, r4
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	8013      	strh	r3, [r2, #0]
 80040ba:	e144      	b.n	8004346 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	b29c      	uxth	r4, r3
 80040ca:	4623      	mov	r3, r4
 80040cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d014      	beq.n	80040fe <USB_DeactivateEndpoint+0xca>
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ea:	b29c      	uxth	r4, r3
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	441a      	add	r2, r3
 80040f6:	4b52      	ldr	r3, [pc, #328]	; (8004240 <USB_DeactivateEndpoint+0x20c>)
 80040f8:	4323      	orrs	r3, r4
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	b29b      	uxth	r3, r3
 800410c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004114:	b29c      	uxth	r4, r3
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	441a      	add	r2, r3
 8004120:	4b46      	ldr	r3, [pc, #280]	; (800423c <USB_DeactivateEndpoint+0x208>)
 8004122:	4323      	orrs	r3, r4
 8004124:	b29b      	uxth	r3, r3
 8004126:	8013      	strh	r3, [r2, #0]
 8004128:	e10d      	b.n	8004346 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	785b      	ldrb	r3, [r3, #1]
 800412e:	2b00      	cmp	r3, #0
 8004130:	f040 8088 	bne.w	8004244 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	b29c      	uxth	r4, r3
 8004142:	4623      	mov	r3, r4
 8004144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d014      	beq.n	8004176 <USB_DeactivateEndpoint+0x142>
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	b29b      	uxth	r3, r3
 800415a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800415e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004162:	b29c      	uxth	r4, r3
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	441a      	add	r2, r3
 800416e:	4b34      	ldr	r3, [pc, #208]	; (8004240 <USB_DeactivateEndpoint+0x20c>)
 8004170:	4323      	orrs	r3, r4
 8004172:	b29b      	uxth	r3, r3
 8004174:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29c      	uxth	r4, r3
 8004184:	4623      	mov	r3, r4
 8004186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d014      	beq.n	80041b8 <USB_DeactivateEndpoint+0x184>
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	b29b      	uxth	r3, r3
 800419c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a4:	b29c      	uxth	r4, r3
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	441a      	add	r2, r3
 80041b0:	4b21      	ldr	r3, [pc, #132]	; (8004238 <USB_DeactivateEndpoint+0x204>)
 80041b2:	4323      	orrs	r3, r4
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ce:	b29c      	uxth	r4, r3
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	441a      	add	r2, r3
 80041da:	4b17      	ldr	r3, [pc, #92]	; (8004238 <USB_DeactivateEndpoint+0x204>)
 80041dc:	4323      	orrs	r3, r4
 80041de:	b29b      	uxth	r3, r3
 80041e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f8:	b29c      	uxth	r4, r3
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	441a      	add	r2, r3
 8004204:	4b0d      	ldr	r3, [pc, #52]	; (800423c <USB_DeactivateEndpoint+0x208>)
 8004206:	4323      	orrs	r3, r4
 8004208:	b29b      	uxth	r3, r3
 800420a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800421e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004222:	b29c      	uxth	r4, r3
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	441a      	add	r2, r3
 800422e:	4b03      	ldr	r3, [pc, #12]	; (800423c <USB_DeactivateEndpoint+0x208>)
 8004230:	4323      	orrs	r3, r4
 8004232:	b29b      	uxth	r3, r3
 8004234:	8013      	strh	r3, [r2, #0]
 8004236:	e086      	b.n	8004346 <USB_DeactivateEndpoint+0x312>
 8004238:	ffff80c0 	.word	0xffff80c0
 800423c:	ffff8080 	.word	0xffff8080
 8004240:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	b29c      	uxth	r4, r3
 8004252:	4623      	mov	r3, r4
 8004254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d014      	beq.n	8004286 <USB_DeactivateEndpoint+0x252>
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	b29b      	uxth	r3, r3
 800426a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004272:	b29c      	uxth	r4, r3
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	441a      	add	r2, r3
 800427e:	4b35      	ldr	r3, [pc, #212]	; (8004354 <USB_DeactivateEndpoint+0x320>)
 8004280:	4323      	orrs	r3, r4
 8004282:	b29b      	uxth	r3, r3
 8004284:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	b29c      	uxth	r4, r3
 8004294:	4623      	mov	r3, r4
 8004296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429a:	2b00      	cmp	r3, #0
 800429c:	d014      	beq.n	80042c8 <USB_DeactivateEndpoint+0x294>
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b4:	b29c      	uxth	r4, r3
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	441a      	add	r2, r3
 80042c0:	4b25      	ldr	r3, [pc, #148]	; (8004358 <USB_DeactivateEndpoint+0x324>)
 80042c2:	4323      	orrs	r3, r4
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042de:	b29c      	uxth	r4, r3
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	441a      	add	r2, r3
 80042ea:	4b1a      	ldr	r3, [pc, #104]	; (8004354 <USB_DeactivateEndpoint+0x320>)
 80042ec:	4323      	orrs	r3, r4
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004308:	b29c      	uxth	r4, r3
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	441a      	add	r2, r3
 8004314:	4b11      	ldr	r3, [pc, #68]	; (800435c <USB_DeactivateEndpoint+0x328>)
 8004316:	4323      	orrs	r3, r4
 8004318:	b29b      	uxth	r3, r3
 800431a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	b29b      	uxth	r3, r3
 800432a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800432e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004332:	b29c      	uxth	r4, r3
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	441a      	add	r2, r3
 800433e:	4b07      	ldr	r3, [pc, #28]	; (800435c <USB_DeactivateEndpoint+0x328>)
 8004340:	4323      	orrs	r3, r4
 8004342:	b29b      	uxth	r3, r3
 8004344:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bc90      	pop	{r4, r7}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	ffffc080 	.word	0xffffc080
 8004358:	ffff80c0 	.word	0xffff80c0
 800435c:	ffff8080 	.word	0xffff8080

08004360 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004360:	b590      	push	{r4, r7, lr}
 8004362:	b08d      	sub	sp, #52	; 0x34
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	785b      	ldrb	r3, [r3, #1]
 800436e:	2b01      	cmp	r3, #1
 8004370:	f040 8160 	bne.w	8004634 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	699a      	ldr	r2, [r3, #24]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	429a      	cmp	r2, r3
 800437e:	d909      	bls.n	8004394 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	699a      	ldr	r2, [r3, #24]
 800438a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438c:	1ad2      	subs	r2, r2, r3
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	619a      	str	r2, [r3, #24]
 8004392:	e005      	b.n	80043a0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2200      	movs	r2, #0
 800439e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	7b1b      	ldrb	r3, [r3, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d119      	bne.n	80043dc <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6959      	ldr	r1, [r3, #20]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	88da      	ldrh	r2, [r3, #6]
 80043b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fba2 	bl	8004afe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80043ba:	687c      	ldr	r4, [r7, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	441c      	add	r4, r3
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	4423      	add	r3, r4
 80043ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043d2:	461c      	mov	r4, r3
 80043d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	8023      	strh	r3, [r4, #0]
 80043da:	e10f      	b.n	80045fc <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d065      	beq.n	80044be <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80043f2:	687c      	ldr	r4, [r7, #4]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	785b      	ldrb	r3, [r3, #1]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d148      	bne.n	800448e <USB_EPStartXfer+0x12e>
 80043fc:	687c      	ldr	r4, [r7, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004404:	b29b      	uxth	r3, r3
 8004406:	441c      	add	r4, r3
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	4423      	add	r3, r4
 8004410:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004414:	461c      	mov	r4, r3
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10e      	bne.n	800443a <USB_EPStartXfer+0xda>
 800441c:	8823      	ldrh	r3, [r4, #0]
 800441e:	b29b      	uxth	r3, r3
 8004420:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004424:	b29b      	uxth	r3, r3
 8004426:	8023      	strh	r3, [r4, #0]
 8004428:	8823      	ldrh	r3, [r4, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004434:	b29b      	uxth	r3, r3
 8004436:	8023      	strh	r3, [r4, #0]
 8004438:	e03d      	b.n	80044b6 <USB_EPStartXfer+0x156>
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	2b3e      	cmp	r3, #62	; 0x3e
 800443e:	d810      	bhi.n	8004462 <USB_EPStartXfer+0x102>
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
 8004446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <USB_EPStartXfer+0xf6>
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	3301      	adds	r3, #1
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	b29b      	uxth	r3, r3
 800445a:	029b      	lsls	r3, r3, #10
 800445c:	b29b      	uxth	r3, r3
 800445e:	8023      	strh	r3, [r4, #0]
 8004460:	e029      	b.n	80044b6 <USB_EPStartXfer+0x156>
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
 8004468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	2b00      	cmp	r3, #0
 8004470:	d102      	bne.n	8004478 <USB_EPStartXfer+0x118>
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	3b01      	subs	r3, #1
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	b29b      	uxth	r3, r3
 800447c:	029b      	lsls	r3, r3, #10
 800447e:	b29b      	uxth	r3, r3
 8004480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004488:	b29b      	uxth	r3, r3
 800448a:	8023      	strh	r3, [r4, #0]
 800448c:	e013      	b.n	80044b6 <USB_EPStartXfer+0x156>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	785b      	ldrb	r3, [r3, #1]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d10f      	bne.n	80044b6 <USB_EPStartXfer+0x156>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800449c:	b29b      	uxth	r3, r3
 800449e:	441c      	add	r4, r3
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	4423      	add	r3, r4
 80044a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	895b      	ldrh	r3, [r3, #10]
 80044ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80044bc:	e063      	b.n	8004586 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	785b      	ldrb	r3, [r3, #1]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d148      	bne.n	8004558 <USB_EPStartXfer+0x1f8>
 80044c6:	687c      	ldr	r4, [r7, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	441c      	add	r4, r3
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	4423      	add	r3, r4
 80044da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044de:	461c      	mov	r4, r3
 80044e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10e      	bne.n	8004504 <USB_EPStartXfer+0x1a4>
 80044e6:	8823      	ldrh	r3, [r4, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	8023      	strh	r3, [r4, #0]
 80044f2:	8823      	ldrh	r3, [r4, #0]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044fe:	b29b      	uxth	r3, r3
 8004500:	8023      	strh	r3, [r4, #0]
 8004502:	e03d      	b.n	8004580 <USB_EPStartXfer+0x220>
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	2b3e      	cmp	r3, #62	; 0x3e
 8004508:	d810      	bhi.n	800452c <USB_EPStartXfer+0x1cc>
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	623b      	str	r3, [r7, #32]
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <USB_EPStartXfer+0x1c0>
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	3301      	adds	r3, #1
 800451e:	623b      	str	r3, [r7, #32]
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	b29b      	uxth	r3, r3
 8004524:	029b      	lsls	r3, r3, #10
 8004526:	b29b      	uxth	r3, r3
 8004528:	8023      	strh	r3, [r4, #0]
 800452a:	e029      	b.n	8004580 <USB_EPStartXfer+0x220>
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	623b      	str	r3, [r7, #32]
 8004532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	2b00      	cmp	r3, #0
 800453a:	d102      	bne.n	8004542 <USB_EPStartXfer+0x1e2>
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	3b01      	subs	r3, #1
 8004540:	623b      	str	r3, [r7, #32]
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	b29b      	uxth	r3, r3
 8004546:	029b      	lsls	r3, r3, #10
 8004548:	b29b      	uxth	r3, r3
 800454a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800454e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004552:	b29b      	uxth	r3, r3
 8004554:	8023      	strh	r3, [r4, #0]
 8004556:	e013      	b.n	8004580 <USB_EPStartXfer+0x220>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	785b      	ldrb	r3, [r3, #1]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d10f      	bne.n	8004580 <USB_EPStartXfer+0x220>
 8004560:	687c      	ldr	r4, [r7, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004568:	b29b      	uxth	r3, r3
 800456a:	441c      	add	r4, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	4423      	add	r3, r4
 8004574:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004578:	461c      	mov	r4, r3
 800457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457c:	b29b      	uxth	r3, r3
 800457e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	891b      	ldrh	r3, [r3, #8]
 8004584:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6959      	ldr	r1, [r3, #20]
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	b29b      	uxth	r3, r3
 800458e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 fab4 	bl	8004afe <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	785b      	ldrb	r3, [r3, #1]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d115      	bne.n	80045ca <USB_EPStartXfer+0x26a>
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b4:	b29c      	uxth	r4, r3
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	441a      	add	r2, r3
 80045c0:	4b9a      	ldr	r3, [pc, #616]	; (800482c <USB_EPStartXfer+0x4cc>)
 80045c2:	4323      	orrs	r3, r4
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	8013      	strh	r3, [r2, #0]
 80045c8:	e018      	b.n	80045fc <USB_EPStartXfer+0x29c>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	785b      	ldrb	r3, [r3, #1]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d114      	bne.n	80045fc <USB_EPStartXfer+0x29c>
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e8:	b29c      	uxth	r4, r3
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	441a      	add	r2, r3
 80045f4:	4b8e      	ldr	r3, [pc, #568]	; (8004830 <USB_EPStartXfer+0x4d0>)
 80045f6:	4323      	orrs	r3, r4
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	b29b      	uxth	r3, r3
 800460a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800460e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004612:	b29c      	uxth	r4, r3
 8004614:	f084 0310 	eor.w	r3, r4, #16
 8004618:	b29c      	uxth	r4, r3
 800461a:	f084 0320 	eor.w	r3, r4, #32
 800461e:	b29c      	uxth	r4, r3
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	441a      	add	r2, r3
 800462a:	4b82      	ldr	r3, [pc, #520]	; (8004834 <USB_EPStartXfer+0x4d4>)
 800462c:	4323      	orrs	r3, r4
 800462e:	b29b      	uxth	r3, r3
 8004630:	8013      	strh	r3, [r2, #0]
 8004632:	e146      	b.n	80048c2 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	699a      	ldr	r2, [r3, #24]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	429a      	cmp	r2, r3
 800463e:	d909      	bls.n	8004654 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	1ad2      	subs	r2, r2, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	619a      	str	r2, [r3, #24]
 8004652:	e005      	b.n	8004660 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2200      	movs	r2, #0
 800465e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	7b1b      	ldrb	r3, [r3, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d148      	bne.n	80046fa <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004668:	687c      	ldr	r4, [r7, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004670:	b29b      	uxth	r3, r3
 8004672:	441c      	add	r4, r3
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	4423      	add	r3, r4
 800467c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004680:	461c      	mov	r4, r3
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10e      	bne.n	80046a6 <USB_EPStartXfer+0x346>
 8004688:	8823      	ldrh	r3, [r4, #0]
 800468a:	b29b      	uxth	r3, r3
 800468c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004690:	b29b      	uxth	r3, r3
 8004692:	8023      	strh	r3, [r4, #0]
 8004694:	8823      	ldrh	r3, [r4, #0]
 8004696:	b29b      	uxth	r3, r3
 8004698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800469c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	8023      	strh	r3, [r4, #0]
 80046a4:	e0f2      	b.n	800488c <USB_EPStartXfer+0x52c>
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	2b3e      	cmp	r3, #62	; 0x3e
 80046aa:	d810      	bhi.n	80046ce <USB_EPStartXfer+0x36e>
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	61fb      	str	r3, [r7, #28]
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <USB_EPStartXfer+0x362>
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	3301      	adds	r3, #1
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	029b      	lsls	r3, r3, #10
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	8023      	strh	r3, [r4, #0]
 80046cc:	e0de      	b.n	800488c <USB_EPStartXfer+0x52c>
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	095b      	lsrs	r3, r3, #5
 80046d2:	61fb      	str	r3, [r7, #28]
 80046d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d6:	f003 031f 	and.w	r3, r3, #31
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d102      	bne.n	80046e4 <USB_EPStartXfer+0x384>
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	61fb      	str	r3, [r7, #28]
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	029b      	lsls	r3, r3, #10
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	8023      	strh	r3, [r4, #0]
 80046f8:	e0c8      	b.n	800488c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	785b      	ldrb	r3, [r3, #1]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d148      	bne.n	8004794 <USB_EPStartXfer+0x434>
 8004702:	687c      	ldr	r4, [r7, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800470a:	b29b      	uxth	r3, r3
 800470c:	441c      	add	r4, r3
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	4423      	add	r3, r4
 8004716:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800471a:	461c      	mov	r4, r3
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10e      	bne.n	8004740 <USB_EPStartXfer+0x3e0>
 8004722:	8823      	ldrh	r3, [r4, #0]
 8004724:	b29b      	uxth	r3, r3
 8004726:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800472a:	b29b      	uxth	r3, r3
 800472c:	8023      	strh	r3, [r4, #0]
 800472e:	8823      	ldrh	r3, [r4, #0]
 8004730:	b29b      	uxth	r3, r3
 8004732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800473a:	b29b      	uxth	r3, r3
 800473c:	8023      	strh	r3, [r4, #0]
 800473e:	e03d      	b.n	80047bc <USB_EPStartXfer+0x45c>
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	2b3e      	cmp	r3, #62	; 0x3e
 8004744:	d810      	bhi.n	8004768 <USB_EPStartXfer+0x408>
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	61bb      	str	r3, [r7, #24]
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <USB_EPStartXfer+0x3fc>
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	3301      	adds	r3, #1
 800475a:	61bb      	str	r3, [r7, #24]
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	b29b      	uxth	r3, r3
 8004760:	029b      	lsls	r3, r3, #10
 8004762:	b29b      	uxth	r3, r3
 8004764:	8023      	strh	r3, [r4, #0]
 8004766:	e029      	b.n	80047bc <USB_EPStartXfer+0x45c>
 8004768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	61bb      	str	r3, [r7, #24]
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	2b00      	cmp	r3, #0
 8004776:	d102      	bne.n	800477e <USB_EPStartXfer+0x41e>
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	3b01      	subs	r3, #1
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	b29b      	uxth	r3, r3
 8004782:	029b      	lsls	r3, r3, #10
 8004784:	b29b      	uxth	r3, r3
 8004786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800478a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800478e:	b29b      	uxth	r3, r3
 8004790:	8023      	strh	r3, [r4, #0]
 8004792:	e013      	b.n	80047bc <USB_EPStartXfer+0x45c>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	785b      	ldrb	r3, [r3, #1]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d10f      	bne.n	80047bc <USB_EPStartXfer+0x45c>
 800479c:	687c      	ldr	r4, [r7, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	441c      	add	r4, r3
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	4423      	add	r3, r4
 80047b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047b4:	461c      	mov	r4, r3
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	8023      	strh	r3, [r4, #0]
 80047bc:	687c      	ldr	r4, [r7, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	785b      	ldrb	r3, [r3, #1]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d14e      	bne.n	8004864 <USB_EPStartXfer+0x504>
 80047c6:	687c      	ldr	r4, [r7, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	441c      	add	r4, r3
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	4423      	add	r3, r4
 80047da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047de:	461c      	mov	r4, r3
 80047e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10e      	bne.n	8004804 <USB_EPStartXfer+0x4a4>
 80047e6:	8823      	ldrh	r3, [r4, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	8023      	strh	r3, [r4, #0]
 80047f2:	8823      	ldrh	r3, [r4, #0]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047fe:	b29b      	uxth	r3, r3
 8004800:	8023      	strh	r3, [r4, #0]
 8004802:	e043      	b.n	800488c <USB_EPStartXfer+0x52c>
 8004804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004806:	2b3e      	cmp	r3, #62	; 0x3e
 8004808:	d816      	bhi.n	8004838 <USB_EPStartXfer+0x4d8>
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	085b      	lsrs	r3, r3, #1
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <USB_EPStartXfer+0x4c0>
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	3301      	adds	r3, #1
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	b29b      	uxth	r3, r3
 8004824:	029b      	lsls	r3, r3, #10
 8004826:	b29b      	uxth	r3, r3
 8004828:	8023      	strh	r3, [r4, #0]
 800482a:	e02f      	b.n	800488c <USB_EPStartXfer+0x52c>
 800482c:	ffff80c0 	.word	0xffff80c0
 8004830:	ffffc080 	.word	0xffffc080
 8004834:	ffff8080 	.word	0xffff8080
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	f003 031f 	and.w	r3, r3, #31
 8004844:	2b00      	cmp	r3, #0
 8004846:	d102      	bne.n	800484e <USB_EPStartXfer+0x4ee>
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	3b01      	subs	r3, #1
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	b29b      	uxth	r3, r3
 8004852:	029b      	lsls	r3, r3, #10
 8004854:	b29b      	uxth	r3, r3
 8004856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800485a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800485e:	b29b      	uxth	r3, r3
 8004860:	8023      	strh	r3, [r4, #0]
 8004862:	e013      	b.n	800488c <USB_EPStartXfer+0x52c>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	785b      	ldrb	r3, [r3, #1]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d10f      	bne.n	800488c <USB_EPStartXfer+0x52c>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004872:	b29b      	uxth	r3, r3
 8004874:	441c      	add	r4, r3
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	4423      	add	r3, r4
 800487e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	b29a      	uxth	r2, r3
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	b29b      	uxth	r3, r3
 800489a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800489e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a2:	b29c      	uxth	r4, r3
 80048a4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80048a8:	b29c      	uxth	r4, r3
 80048aa:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80048ae:	b29c      	uxth	r4, r3
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	441a      	add	r2, r3
 80048ba:	4b04      	ldr	r3, [pc, #16]	; (80048cc <USB_EPStartXfer+0x56c>)
 80048bc:	4323      	orrs	r3, r4
 80048be:	b29b      	uxth	r3, r3
 80048c0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3734      	adds	r7, #52	; 0x34
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd90      	pop	{r4, r7, pc}
 80048cc:	ffff8080 	.word	0xffff8080

080048d0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048d0:	b490      	push	{r4, r7}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	785b      	ldrb	r3, [r3, #1]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d018      	beq.n	8004914 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f8:	b29c      	uxth	r4, r3
 80048fa:	f084 0310 	eor.w	r3, r4, #16
 80048fe:	b29c      	uxth	r4, r3
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	441a      	add	r2, r3
 800490a:	4b11      	ldr	r3, [pc, #68]	; (8004950 <USB_EPSetStall+0x80>)
 800490c:	4323      	orrs	r3, r4
 800490e:	b29b      	uxth	r3, r3
 8004910:	8013      	strh	r3, [r2, #0]
 8004912:	e017      	b.n	8004944 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	b29b      	uxth	r3, r3
 8004922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492a:	b29c      	uxth	r4, r3
 800492c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004930:	b29c      	uxth	r4, r3
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	441a      	add	r2, r3
 800493c:	4b04      	ldr	r3, [pc, #16]	; (8004950 <USB_EPSetStall+0x80>)
 800493e:	4323      	orrs	r3, r4
 8004940:	b29b      	uxth	r3, r3
 8004942:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bc90      	pop	{r4, r7}
 800494e:	4770      	bx	lr
 8004950:	ffff8080 	.word	0xffff8080

08004954 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004954:	b490      	push	{r4, r7}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	7b1b      	ldrb	r3, [r3, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d17d      	bne.n	8004a62 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	785b      	ldrb	r3, [r3, #1]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d03d      	beq.n	80049ea <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b29c      	uxth	r4, r3
 800497c:	4623      	mov	r3, r4
 800497e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004982:	2b00      	cmp	r3, #0
 8004984:	d014      	beq.n	80049b0 <USB_EPClearStall+0x5c>
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	b29b      	uxth	r3, r3
 8004994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499c:	b29c      	uxth	r4, r3
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	441a      	add	r2, r3
 80049a8:	4b31      	ldr	r3, [pc, #196]	; (8004a70 <USB_EPClearStall+0x11c>)
 80049aa:	4323      	orrs	r3, r4
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	78db      	ldrb	r3, [r3, #3]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d054      	beq.n	8004a62 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	881b      	ldrh	r3, [r3, #0]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ce:	b29c      	uxth	r4, r3
 80049d0:	f084 0320 	eor.w	r3, r4, #32
 80049d4:	b29c      	uxth	r4, r3
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	441a      	add	r2, r3
 80049e0:	4b24      	ldr	r3, [pc, #144]	; (8004a74 <USB_EPClearStall+0x120>)
 80049e2:	4323      	orrs	r3, r4
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	8013      	strh	r3, [r2, #0]
 80049e8:	e03b      	b.n	8004a62 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29c      	uxth	r4, r3
 80049f8:	4623      	mov	r3, r4
 80049fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d014      	beq.n	8004a2c <USB_EPClearStall+0xd8>
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a18:	b29c      	uxth	r4, r3
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	441a      	add	r2, r3
 8004a24:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <USB_EPClearStall+0x124>)
 8004a26:	4323      	orrs	r3, r4
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a42:	b29c      	uxth	r4, r3
 8004a44:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004a48:	b29c      	uxth	r4, r3
 8004a4a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004a4e:	b29c      	uxth	r4, r3
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	441a      	add	r2, r3
 8004a5a:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <USB_EPClearStall+0x120>)
 8004a5c:	4323      	orrs	r3, r4
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bc90      	pop	{r4, r7}
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	ffff80c0 	.word	0xffff80c0
 8004a74:	ffff8080 	.word	0xffff8080
 8004a78:	ffffc080 	.word	0xffffc080

08004a7c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d103      	bne.n	8004a96 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2280      	movs	r2, #128	; 0x80
 8004a92:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr

08004aa2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bc80      	pop	{r7}
 8004ab4:	4770      	bx	lr

08004ab6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr

08004aca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004adc:	68fb      	ldr	r3, [r7, #12]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr

08004ae8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc80      	pop	{r7}
 8004afc:	4770      	bx	lr

08004afe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b08d      	sub	sp, #52	; 0x34
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	4611      	mov	r1, r2
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	80fb      	strh	r3, [r7, #6]
 8004b10:	4613      	mov	r3, r2
 8004b12:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004b14:	88bb      	ldrh	r3, [r7, #4]
 8004b16:	3301      	adds	r3, #1
 8004b18:	085b      	lsrs	r3, r3, #1
 8004b1a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004b24:	88fb      	ldrh	r3, [r7, #6]
 8004b26:	005a      	lsls	r2, r3, #1
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b36:	e01e      	b.n	8004b76 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	3301      	adds	r3, #1
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	461a      	mov	r2, r3
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	3302      	adds	r3, #2
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	3302      	adds	r3, #2
 8004b68:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	3b01      	subs	r3, #1
 8004b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1dd      	bne.n	8004b38 <USB_WritePMA+0x3a>
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	3734      	adds	r7, #52	; 0x34
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr

08004b86 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b08b      	sub	sp, #44	; 0x2c
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	60b9      	str	r1, [r7, #8]
 8004b90:	4611      	mov	r1, r2
 8004b92:	461a      	mov	r2, r3
 8004b94:	460b      	mov	r3, r1
 8004b96:	80fb      	strh	r3, [r7, #6]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004b9c:	88bb      	ldrh	r3, [r7, #4]
 8004b9e:	085b      	lsrs	r3, r3, #1
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004bac:	88fb      	ldrh	r3, [r7, #6]
 8004bae:	005a      	lsls	r2, r3, #1
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bb8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bbe:	e01b      	b.n	8004bf8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	3302      	adds	r3, #2
 8004bcc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	0a1b      	lsrs	r3, r3, #8
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	3301      	adds	r3, #1
 8004bea:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	3302      	adds	r3, #2
 8004bf0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e0      	bne.n	8004bc0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004bfe:	88bb      	ldrh	r3, [r7, #4]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d007      	beq.n	8004c1a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	701a      	strb	r2, [r3, #0]
  }
}
 8004c1a:	bf00      	nop
 8004c1c:	372c      	adds	r7, #44	; 0x2c
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	7c1b      	ldrb	r3, [r3, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d115      	bne.n	8004c68 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c40:	2202      	movs	r2, #2
 8004c42:	2181      	movs	r1, #129	; 0x81
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f001 fe6c 	bl	8006922 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c54:	2202      	movs	r2, #2
 8004c56:	2101      	movs	r1, #1
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f001 fe62 	bl	8006922 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004c66:	e012      	b.n	8004c8e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004c68:	2340      	movs	r3, #64	; 0x40
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	2181      	movs	r1, #129	; 0x81
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f001 fe57 	bl	8006922 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004c7a:	2340      	movs	r3, #64	; 0x40
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	2101      	movs	r1, #1
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f001 fe4e 	bl	8006922 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004c8e:	2308      	movs	r3, #8
 8004c90:	2203      	movs	r2, #3
 8004c92:	2182      	movs	r1, #130	; 0x82
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f001 fe44 	bl	8006922 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ca0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004ca4:	f001 ff5e 	bl	8006b64 <USBD_static_malloc>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d102      	bne.n	8004cc0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	73fb      	strb	r3, [r7, #15]
 8004cbe:	e026      	b.n	8004d0e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cc6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	7c1b      	ldrb	r3, [r3, #16]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d109      	bne.n	8004cfe <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f001 fefd 	bl	8006af6 <USBD_LL_PrepareReceive>
 8004cfc:	e007      	b.n	8004d0e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d04:	2340      	movs	r3, #64	; 0x40
 8004d06:	2101      	movs	r1, #1
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f001 fef4 	bl	8006af6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	460b      	mov	r3, r1
 8004d22:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004d28:	2181      	movs	r1, #129	; 0x81
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f001 fe1f 	bl	800696e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004d36:	2101      	movs	r1, #1
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f001 fe18 	bl	800696e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004d46:	2182      	movs	r1, #130	; 0x82
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f001 fe10 	bl	800696e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00e      	beq.n	8004d7c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f001 ff04 	bl	8006b7c <USBD_static_free>
    pdev->pClassData = NULL;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b086      	sub	sp, #24
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d96:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d039      	beq.n	8004e24 <USBD_CDC_Setup+0x9e>
 8004db0:	2b20      	cmp	r3, #32
 8004db2:	d17c      	bne.n	8004eae <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	88db      	ldrh	r3, [r3, #6]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d029      	beq.n	8004e10 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	b25b      	sxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	da11      	bge.n	8004dea <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004dd2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	88d2      	ldrh	r2, [r2, #6]
 8004dd8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004dda:	6939      	ldr	r1, [r7, #16]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	88db      	ldrh	r3, [r3, #6]
 8004de0:	461a      	mov	r2, r3
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f001 f9f6 	bl	80061d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004de8:	e068      	b.n	8004ebc <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	785a      	ldrb	r2, [r3, #1]
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	88db      	ldrh	r3, [r3, #6]
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004e00:	6939      	ldr	r1, [r7, #16]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	88db      	ldrh	r3, [r3, #6]
 8004e06:	461a      	mov	r2, r3
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f001 fa11 	bl	8006230 <USBD_CtlPrepareRx>
      break;
 8004e0e:	e055      	b.n	8004ebc <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	7850      	ldrb	r0, [r2, #1]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	6839      	ldr	r1, [r7, #0]
 8004e20:	4798      	blx	r3
      break;
 8004e22:	e04b      	b.n	8004ebc <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	785b      	ldrb	r3, [r3, #1]
 8004e28:	2b0a      	cmp	r3, #10
 8004e2a:	d017      	beq.n	8004e5c <USBD_CDC_Setup+0xd6>
 8004e2c:	2b0b      	cmp	r3, #11
 8004e2e:	d029      	beq.n	8004e84 <USBD_CDC_Setup+0xfe>
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d133      	bne.n	8004e9c <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	d107      	bne.n	8004e4e <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004e3e:	f107 030c 	add.w	r3, r7, #12
 8004e42:	2202      	movs	r2, #2
 8004e44:	4619      	mov	r1, r3
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f001 f9c4 	bl	80061d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e4c:	e02e      	b.n	8004eac <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004e4e:	6839      	ldr	r1, [r7, #0]
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f001 f955 	bl	8006100 <USBD_CtlError>
            ret = USBD_FAIL;
 8004e56:	2302      	movs	r3, #2
 8004e58:	75fb      	strb	r3, [r7, #23]
          break;
 8004e5a:	e027      	b.n	8004eac <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d107      	bne.n	8004e76 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004e66:	f107 030f 	add.w	r3, r7, #15
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f001 f9b0 	bl	80061d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e74:	e01a      	b.n	8004eac <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004e76:	6839      	ldr	r1, [r7, #0]
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f001 f941 	bl	8006100 <USBD_CtlError>
            ret = USBD_FAIL;
 8004e7e:	2302      	movs	r3, #2
 8004e80:	75fb      	strb	r3, [r7, #23]
          break;
 8004e82:	e013      	b.n	8004eac <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d00d      	beq.n	8004eaa <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004e8e:	6839      	ldr	r1, [r7, #0]
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f001 f935 	bl	8006100 <USBD_CtlError>
            ret = USBD_FAIL;
 8004e96:	2302      	movs	r3, #2
 8004e98:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004e9a:	e006      	b.n	8004eaa <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004e9c:	6839      	ldr	r1, [r7, #0]
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f001 f92e 	bl	8006100 <USBD_CtlError>
          ret = USBD_FAIL;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	75fb      	strb	r3, [r7, #23]
          break;
 8004ea8:	e000      	b.n	8004eac <USBD_CDC_Setup+0x126>
          break;
 8004eaa:	bf00      	nop
      }
      break;
 8004eac:	e006      	b.n	8004ebc <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004eae:	6839      	ldr	r1, [r7, #0]
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f001 f925 	bl	8006100 <USBD_CtlError>
      ret = USBD_FAIL;
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8004eba:	bf00      	nop
  }

  return ret;
 8004ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ed8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ee0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d037      	beq.n	8004f5c <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004eec:	78fa      	ldrb	r2, [r7, #3]
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	331c      	adds	r3, #28
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d026      	beq.n	8004f50 <USBD_CDC_DataIn+0x8a>
 8004f02:	78fa      	ldrb	r2, [r7, #3]
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	331c      	adds	r3, #28
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	78fa      	ldrb	r2, [r7, #3]
 8004f16:	68b9      	ldr	r1, [r7, #8]
 8004f18:	0152      	lsls	r2, r2, #5
 8004f1a:	440a      	add	r2, r1
 8004f1c:	3238      	adds	r2, #56	; 0x38
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f24:	fb02 f201 	mul.w	r2, r2, r1
 8004f28:	1a9b      	subs	r3, r3, r2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d110      	bne.n	8004f50 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004f2e:	78fa      	ldrb	r2, [r7, #3]
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	440b      	add	r3, r1
 8004f3c:	331c      	adds	r3, #28
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004f42:	78f9      	ldrb	r1, [r7, #3]
 8004f44:	2300      	movs	r3, #0
 8004f46:	2200      	movs	r2, #0
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f001 fdb1 	bl	8006ab0 <USBD_LL_Transmit>
 8004f4e:	e003      	b.n	8004f58 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	e000      	b.n	8004f5e <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8004f5c:	2302      	movs	r3, #2
  }
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f001 fddc 	bl	8006b3c <USBD_LL_GetRxDataSize>
 8004f84:	4602      	mov	r2, r0
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00d      	beq.n	8004fb2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004faa:	4611      	mov	r1, r2
 8004fac:	4798      	blx	r3

    return USBD_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e000      	b.n	8004fb4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004fb2:	2302      	movs	r3, #2
  }
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fca:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d015      	beq.n	8005002 <USBD_CDC_EP0_RxReady+0x46>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004fdc:	2bff      	cmp	r3, #255	; 0xff
 8004fde:	d010      	beq.n	8005002 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004fee:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004ff6:	b292      	uxth	r2, r2
 8004ff8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	22ff      	movs	r2, #255	; 0xff
 8004ffe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2243      	movs	r2, #67	; 0x43
 8005018:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800501a:	4b03      	ldr	r3, [pc, #12]	; (8005028 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800501c:	4618      	mov	r0, r3
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	bc80      	pop	{r7}
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	20000094 	.word	0x20000094

0800502c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2243      	movs	r2, #67	; 0x43
 8005038:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800503a:	4b03      	ldr	r3, [pc, #12]	; (8005048 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20000050 	.word	0x20000050

0800504c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2243      	movs	r2, #67	; 0x43
 8005058:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800505a:	4b03      	ldr	r3, [pc, #12]	; (8005068 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	bc80      	pop	{r7}
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	200000d8 	.word	0x200000d8

0800506c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	220a      	movs	r2, #10
 8005078:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800507a:	4b03      	ldr	r3, [pc, #12]	; (8005088 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800507c:	4618      	mov	r0, r3
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	bc80      	pop	{r7}
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	2000000c 	.word	0x2000000c

0800508c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005096:	2302      	movs	r3, #2
 8005098:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr

080050b8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	4613      	mov	r3, r2
 80050c4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050cc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80050d6:	88fa      	ldrh	r2, [r7, #6]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	371c      	adds	r7, #28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr

080050ea <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050fa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr

08005110 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800511e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d01c      	beq.n	8005164 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005130:	2b00      	cmp	r3, #0
 8005132:	d115      	bne.n	8005160 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2201      	movs	r2, #1
 8005138:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005152:	b29b      	uxth	r3, r3
 8005154:	2181      	movs	r1, #129	; 0x81
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f001 fcaa 	bl	8006ab0 <USBD_LL_Transmit>

      return USBD_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	e002      	b.n	8005166 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005164:	2302      	movs	r3, #2
  }
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b084      	sub	sp, #16
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800517c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005184:	2b00      	cmp	r3, #0
 8005186:	d017      	beq.n	80051b8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	7c1b      	ldrb	r3, [r3, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d109      	bne.n	80051a4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800519a:	2101      	movs	r1, #1
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f001 fcaa 	bl	8006af6 <USBD_LL_PrepareReceive>
 80051a2:	e007      	b.n	80051b4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80051aa:	2340      	movs	r3, #64	; 0x40
 80051ac:	2101      	movs	r1, #1
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f001 fca1 	bl	8006af6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	e000      	b.n	80051ba <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80051b8:	2302      	movs	r3, #2
  }
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	4613      	mov	r3, r2
 80051ce:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80051d6:	2302      	movs	r3, #2
 80051d8:	e01a      	b.n	8005210 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	79fa      	ldrb	r2, [r7, #7]
 8005206:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f001 fb15 	bl	8006838 <USBD_LL_Init>

  return USBD_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d006      	beq.n	800523a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	73fb      	strb	r3, [r7, #15]
 8005238:	e001      	b.n	800523e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800523a:	2302      	movs	r3, #2
 800523c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800523e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr

0800524a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b082      	sub	sp, #8
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f001 fb4a 	bl	80068ec <USBD_LL_Start>

  return USBD_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005262:	b480      	push	{r7}
 8005264:	b083      	sub	sp, #12
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	bc80      	pop	{r7}
 8005274:	4770      	bx	lr

08005276 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
 800527e:	460b      	mov	r3, r1
 8005280:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005282:	2302      	movs	r3, #2
 8005284:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00c      	beq.n	80052aa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	78fa      	ldrb	r2, [r7, #3]
 800529a:	4611      	mov	r1, r2
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	4798      	blx	r3
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	78fa      	ldrb	r2, [r7, #3]
 80052ca:	4611      	mov	r1, r2
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	4798      	blx	r3

  return USBD_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b082      	sub	sp, #8
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80052ea:	6839      	ldr	r1, [r7, #0]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fecb 	bl	8006088 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005300:	461a      	mov	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	2b01      	cmp	r3, #1
 8005314:	d00c      	beq.n	8005330 <USBD_LL_SetupStage+0x56>
 8005316:	2b01      	cmp	r3, #1
 8005318:	d302      	bcc.n	8005320 <USBD_LL_SetupStage+0x46>
 800531a:	2b02      	cmp	r3, #2
 800531c:	d010      	beq.n	8005340 <USBD_LL_SetupStage+0x66>
 800531e:	e017      	b.n	8005350 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005326:	4619      	mov	r1, r3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f9cb 	bl	80056c4 <USBD_StdDevReq>
      break;
 800532e:	e01a      	b.n	8005366 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005336:	4619      	mov	r1, r3
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fa2d 	bl	8005798 <USBD_StdItfReq>
      break;
 800533e:	e012      	b.n	8005366 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005346:	4619      	mov	r1, r3
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fa6b 	bl	8005824 <USBD_StdEPReq>
      break;
 800534e:	e00a      	b.n	8005366 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005356:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800535a:	b2db      	uxtb	r3, r3
 800535c:	4619      	mov	r1, r3
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f001 fb24 	bl	80069ac <USBD_LL_StallEP>
      break;
 8005364:	bf00      	nop
  }

  return USBD_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	460b      	mov	r3, r1
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800537e:	7afb      	ldrb	r3, [r7, #11]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d14b      	bne.n	800541c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800538a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005392:	2b03      	cmp	r3, #3
 8005394:	d134      	bne.n	8005400 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d919      	bls.n	80053d6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	1ad2      	subs	r2, r2, r3
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d203      	bcs.n	80053c4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	e002      	b.n	80053ca <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	461a      	mov	r2, r3
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 ff4c 	bl	800626c <USBD_CtlContinueRx>
 80053d4:	e038      	b.n	8005448 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	d105      	bne.n	80053f8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 ff49 	bl	8006290 <USBD_CtlSendStatus>
 80053fe:	e023      	b.n	8005448 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005406:	2b05      	cmp	r3, #5
 8005408:	d11e      	bne.n	8005448 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005412:	2100      	movs	r1, #0
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f001 fac9 	bl	80069ac <USBD_LL_StallEP>
 800541a:	e015      	b.n	8005448 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00d      	beq.n	8005444 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800542e:	2b03      	cmp	r3, #3
 8005430:	d108      	bne.n	8005444 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	7afa      	ldrb	r2, [r7, #11]
 800543c:	4611      	mov	r1, r2
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	4798      	blx	r3
 8005442:	e001      	b.n	8005448 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005444:	2302      	movs	r3, #2
 8005446:	e000      	b.n	800544a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b086      	sub	sp, #24
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	460b      	mov	r3, r1
 800545c:	607a      	str	r2, [r7, #4]
 800545e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005460:	7afb      	ldrb	r3, [r7, #11]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d17f      	bne.n	8005566 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	3314      	adds	r3, #20
 800546a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005472:	2b02      	cmp	r3, #2
 8005474:	d15c      	bne.n	8005530 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	429a      	cmp	r2, r3
 8005480:	d915      	bls.n	80054ae <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	1ad2      	subs	r2, r2, r3
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	b29b      	uxth	r3, r3
 8005496:	461a      	mov	r2, r3
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 feb6 	bl	800620c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054a0:	2300      	movs	r3, #0
 80054a2:	2200      	movs	r2, #0
 80054a4:	2100      	movs	r1, #0
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f001 fb25 	bl	8006af6 <USBD_LL_PrepareReceive>
 80054ac:	e04e      	b.n	800554c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	6912      	ldr	r2, [r2, #16]
 80054b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80054ba:	fb02 f201 	mul.w	r2, r2, r1
 80054be:	1a9b      	subs	r3, r3, r2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d11c      	bne.n	80054fe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d316      	bcc.n	80054fe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80054da:	429a      	cmp	r2, r3
 80054dc:	d20f      	bcs.n	80054fe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80054de:	2200      	movs	r2, #0
 80054e0:	2100      	movs	r1, #0
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 fe92 	bl	800620c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054f0:	2300      	movs	r3, #0
 80054f2:	2200      	movs	r2, #0
 80054f4:	2100      	movs	r1, #0
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f001 fafd 	bl	8006af6 <USBD_LL_PrepareReceive>
 80054fc:	e026      	b.n	800554c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005510:	2b03      	cmp	r3, #3
 8005512:	d105      	bne.n	8005520 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005520:	2180      	movs	r1, #128	; 0x80
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f001 fa42 	bl	80069ac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 fec4 	bl	80062b6 <USBD_CtlReceiveStatus>
 800552e:	e00d      	b.n	800554c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005536:	2b04      	cmp	r3, #4
 8005538:	d004      	beq.n	8005544 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005540:	2b00      	cmp	r3, #0
 8005542:	d103      	bne.n	800554c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005544:	2180      	movs	r1, #128	; 0x80
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f001 fa30 	bl	80069ac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005552:	2b01      	cmp	r3, #1
 8005554:	d11d      	bne.n	8005592 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f7ff fe83 	bl	8005262 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005564:	e015      	b.n	8005592 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00d      	beq.n	800558e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005578:	2b03      	cmp	r3, #3
 800557a:	d108      	bne.n	800558e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	7afa      	ldrb	r2, [r7, #11]
 8005586:	4611      	mov	r1, r2
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	4798      	blx	r3
 800558c:	e001      	b.n	8005592 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800558e:	2302      	movs	r3, #2
 8005590:	e000      	b.n	8005594 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80055a4:	2340      	movs	r3, #64	; 0x40
 80055a6:	2200      	movs	r2, #0
 80055a8:	2100      	movs	r1, #0
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f001 f9b9 	bl	8006922 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2240      	movs	r2, #64	; 0x40
 80055bc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80055c0:	2340      	movs	r3, #64	; 0x40
 80055c2:	2200      	movs	r2, #0
 80055c4:	2180      	movs	r1, #128	; 0x80
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f001 f9ab 	bl	8006922 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2240      	movs	r2, #64	; 0x40
 80055d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d009      	beq.n	8005614 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6852      	ldr	r2, [r2, #4]
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	4611      	mov	r1, r2
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
  }

  return USBD_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	460b      	mov	r3, r1
 8005628:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	78fa      	ldrb	r2, [r7, #3]
 800562e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr

0800563c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2204      	movs	r2, #4
 8005654:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005672:	2b04      	cmp	r3, #4
 8005674:	d105      	bne.n	8005682 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	bc80      	pop	{r7}
 800568c:	4770      	bx	lr

0800568e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b082      	sub	sp, #8
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800569c:	2b03      	cmp	r3, #3
 800569e:	d10b      	bne.n	80056b8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056da:	2b20      	cmp	r3, #32
 80056dc:	d004      	beq.n	80056e8 <USBD_StdDevReq+0x24>
 80056de:	2b40      	cmp	r3, #64	; 0x40
 80056e0:	d002      	beq.n	80056e8 <USBD_StdDevReq+0x24>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d008      	beq.n	80056f8 <USBD_StdDevReq+0x34>
 80056e6:	e04c      	b.n	8005782 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	6839      	ldr	r1, [r7, #0]
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	4798      	blx	r3
      break;
 80056f6:	e049      	b.n	800578c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	2b09      	cmp	r3, #9
 80056fe:	d83a      	bhi.n	8005776 <USBD_StdDevReq+0xb2>
 8005700:	a201      	add	r2, pc, #4	; (adr r2, 8005708 <USBD_StdDevReq+0x44>)
 8005702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005706:	bf00      	nop
 8005708:	08005759 	.word	0x08005759
 800570c:	0800576d 	.word	0x0800576d
 8005710:	08005777 	.word	0x08005777
 8005714:	08005763 	.word	0x08005763
 8005718:	08005777 	.word	0x08005777
 800571c:	0800573b 	.word	0x0800573b
 8005720:	08005731 	.word	0x08005731
 8005724:	08005777 	.word	0x08005777
 8005728:	0800574f 	.word	0x0800574f
 800572c:	08005745 	.word	0x08005745
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005730:	6839      	ldr	r1, [r7, #0]
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f9d4 	bl	8005ae0 <USBD_GetDescriptor>
          break;
 8005738:	e022      	b.n	8005780 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800573a:	6839      	ldr	r1, [r7, #0]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fb37 	bl	8005db0 <USBD_SetAddress>
          break;
 8005742:	e01d      	b.n	8005780 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005744:	6839      	ldr	r1, [r7, #0]
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fb74 	bl	8005e34 <USBD_SetConfig>
          break;
 800574c:	e018      	b.n	8005780 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800574e:	6839      	ldr	r1, [r7, #0]
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 fbfd 	bl	8005f50 <USBD_GetConfig>
          break;
 8005756:	e013      	b.n	8005780 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005758:	6839      	ldr	r1, [r7, #0]
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fc2c 	bl	8005fb8 <USBD_GetStatus>
          break;
 8005760:	e00e      	b.n	8005780 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fc5a 	bl	800601e <USBD_SetFeature>
          break;
 800576a:	e009      	b.n	8005780 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800576c:	6839      	ldr	r1, [r7, #0]
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fc69 	bl	8006046 <USBD_ClrFeature>
          break;
 8005774:	e004      	b.n	8005780 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005776:	6839      	ldr	r1, [r7, #0]
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fcc1 	bl	8006100 <USBD_CtlError>
          break;
 800577e:	bf00      	nop
      }
      break;
 8005780:	e004      	b.n	800578c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005782:	6839      	ldr	r1, [r7, #0]
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fcbb 	bl	8006100 <USBD_CtlError>
      break;
 800578a:	bf00      	nop
  }

  return ret;
 800578c:	7bfb      	ldrb	r3, [r7, #15]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop

08005798 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d003      	beq.n	80057ba <USBD_StdItfReq+0x22>
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	d001      	beq.n	80057ba <USBD_StdItfReq+0x22>
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d12a      	bne.n	8005810 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057c0:	3b01      	subs	r3, #1
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d81d      	bhi.n	8005802 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	889b      	ldrh	r3, [r3, #4]
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d813      	bhi.n	80057f8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	6839      	ldr	r1, [r7, #0]
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	4798      	blx	r3
 80057de:	4603      	mov	r3, r0
 80057e0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	88db      	ldrh	r3, [r3, #6]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d110      	bne.n	800580c <USBD_StdItfReq+0x74>
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10d      	bne.n	800580c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fd4d 	bl	8006290 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80057f6:	e009      	b.n	800580c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80057f8:	6839      	ldr	r1, [r7, #0]
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fc80 	bl	8006100 <USBD_CtlError>
          break;
 8005800:	e004      	b.n	800580c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005802:	6839      	ldr	r1, [r7, #0]
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fc7b 	bl	8006100 <USBD_CtlError>
          break;
 800580a:	e000      	b.n	800580e <USBD_StdItfReq+0x76>
          break;
 800580c:	bf00      	nop
      }
      break;
 800580e:	e004      	b.n	800581a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fc74 	bl	8006100 <USBD_CtlError>
      break;
 8005818:	bf00      	nop
  }

  return USBD_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	889b      	ldrh	r3, [r3, #4]
 8005836:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005840:	2b20      	cmp	r3, #32
 8005842:	d004      	beq.n	800584e <USBD_StdEPReq+0x2a>
 8005844:	2b40      	cmp	r3, #64	; 0x40
 8005846:	d002      	beq.n	800584e <USBD_StdEPReq+0x2a>
 8005848:	2b00      	cmp	r3, #0
 800584a:	d008      	beq.n	800585e <USBD_StdEPReq+0x3a>
 800584c:	e13d      	b.n	8005aca <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	6839      	ldr	r1, [r7, #0]
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	4798      	blx	r3
      break;
 800585c:	e13a      	b.n	8005ad4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005866:	2b20      	cmp	r3, #32
 8005868:	d10a      	bne.n	8005880 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	6839      	ldr	r1, [r7, #0]
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	4798      	blx	r3
 8005878:	4603      	mov	r3, r0
 800587a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	e12a      	b.n	8005ad6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	785b      	ldrb	r3, [r3, #1]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d03e      	beq.n	8005906 <USBD_StdEPReq+0xe2>
 8005888:	2b03      	cmp	r3, #3
 800588a:	d002      	beq.n	8005892 <USBD_StdEPReq+0x6e>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d070      	beq.n	8005972 <USBD_StdEPReq+0x14e>
 8005890:	e115      	b.n	8005abe <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005898:	2b02      	cmp	r3, #2
 800589a:	d002      	beq.n	80058a2 <USBD_StdEPReq+0x7e>
 800589c:	2b03      	cmp	r3, #3
 800589e:	d015      	beq.n	80058cc <USBD_StdEPReq+0xa8>
 80058a0:	e02b      	b.n	80058fa <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058a2:	7bbb      	ldrb	r3, [r7, #14]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00c      	beq.n	80058c2 <USBD_StdEPReq+0x9e>
 80058a8:	7bbb      	ldrb	r3, [r7, #14]
 80058aa:	2b80      	cmp	r3, #128	; 0x80
 80058ac:	d009      	beq.n	80058c2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80058ae:	7bbb      	ldrb	r3, [r7, #14]
 80058b0:	4619      	mov	r1, r3
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f001 f87a 	bl	80069ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80058b8:	2180      	movs	r1, #128	; 0x80
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f001 f876 	bl	80069ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80058c0:	e020      	b.n	8005904 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fc1b 	bl	8006100 <USBD_CtlError>
              break;
 80058ca:	e01b      	b.n	8005904 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	885b      	ldrh	r3, [r3, #2]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10e      	bne.n	80058f2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80058d4:	7bbb      	ldrb	r3, [r7, #14]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00b      	beq.n	80058f2 <USBD_StdEPReq+0xce>
 80058da:	7bbb      	ldrb	r3, [r7, #14]
 80058dc:	2b80      	cmp	r3, #128	; 0x80
 80058de:	d008      	beq.n	80058f2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	88db      	ldrh	r3, [r3, #6]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d104      	bne.n	80058f2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80058e8:	7bbb      	ldrb	r3, [r7, #14]
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f001 f85d 	bl	80069ac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fccc 	bl	8006290 <USBD_CtlSendStatus>

              break;
 80058f8:	e004      	b.n	8005904 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fbff 	bl	8006100 <USBD_CtlError>
              break;
 8005902:	bf00      	nop
          }
          break;
 8005904:	e0e0      	b.n	8005ac8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800590c:	2b02      	cmp	r3, #2
 800590e:	d002      	beq.n	8005916 <USBD_StdEPReq+0xf2>
 8005910:	2b03      	cmp	r3, #3
 8005912:	d015      	beq.n	8005940 <USBD_StdEPReq+0x11c>
 8005914:	e026      	b.n	8005964 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005916:	7bbb      	ldrb	r3, [r7, #14]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00c      	beq.n	8005936 <USBD_StdEPReq+0x112>
 800591c:	7bbb      	ldrb	r3, [r7, #14]
 800591e:	2b80      	cmp	r3, #128	; 0x80
 8005920:	d009      	beq.n	8005936 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005922:	7bbb      	ldrb	r3, [r7, #14]
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f001 f840 	bl	80069ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800592c:	2180      	movs	r1, #128	; 0x80
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f001 f83c 	bl	80069ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005934:	e01c      	b.n	8005970 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005936:	6839      	ldr	r1, [r7, #0]
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fbe1 	bl	8006100 <USBD_CtlError>
              break;
 800593e:	e017      	b.n	8005970 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	885b      	ldrh	r3, [r3, #2]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d112      	bne.n	800596e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005948:	7bbb      	ldrb	r3, [r7, #14]
 800594a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800594e:	2b00      	cmp	r3, #0
 8005950:	d004      	beq.n	800595c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005952:	7bbb      	ldrb	r3, [r7, #14]
 8005954:	4619      	mov	r1, r3
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f001 f847 	bl	80069ea <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fc97 	bl	8006290 <USBD_CtlSendStatus>
              }
              break;
 8005962:	e004      	b.n	800596e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005964:	6839      	ldr	r1, [r7, #0]
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fbca 	bl	8006100 <USBD_CtlError>
              break;
 800596c:	e000      	b.n	8005970 <USBD_StdEPReq+0x14c>
              break;
 800596e:	bf00      	nop
          }
          break;
 8005970:	e0aa      	b.n	8005ac8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005978:	2b02      	cmp	r3, #2
 800597a:	d002      	beq.n	8005982 <USBD_StdEPReq+0x15e>
 800597c:	2b03      	cmp	r3, #3
 800597e:	d032      	beq.n	80059e6 <USBD_StdEPReq+0x1c2>
 8005980:	e097      	b.n	8005ab2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005982:	7bbb      	ldrb	r3, [r7, #14]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d007      	beq.n	8005998 <USBD_StdEPReq+0x174>
 8005988:	7bbb      	ldrb	r3, [r7, #14]
 800598a:	2b80      	cmp	r3, #128	; 0x80
 800598c:	d004      	beq.n	8005998 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800598e:	6839      	ldr	r1, [r7, #0]
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fbb5 	bl	8006100 <USBD_CtlError>
                break;
 8005996:	e091      	b.n	8005abc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005998:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800599c:	2b00      	cmp	r3, #0
 800599e:	da0b      	bge.n	80059b8 <USBD_StdEPReq+0x194>
 80059a0:	7bbb      	ldrb	r3, [r7, #14]
 80059a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059a6:	4613      	mov	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	3310      	adds	r3, #16
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	4413      	add	r3, r2
 80059b4:	3304      	adds	r3, #4
 80059b6:	e00b      	b.n	80059d0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80059b8:	7bbb      	ldrb	r3, [r7, #14]
 80059ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059be:	4613      	mov	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	4413      	add	r3, r2
 80059ce:	3304      	adds	r3, #4
 80059d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2202      	movs	r2, #2
 80059dc:	4619      	mov	r1, r3
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fbf8 	bl	80061d4 <USBD_CtlSendData>
              break;
 80059e4:	e06a      	b.n	8005abc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80059e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	da11      	bge.n	8005a12 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059ee:	7bbb      	ldrb	r3, [r7, #14]
 80059f0:	f003 020f 	and.w	r2, r3, #15
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	440b      	add	r3, r1
 8005a00:	3318      	adds	r3, #24
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d117      	bne.n	8005a38 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fb78 	bl	8006100 <USBD_CtlError>
                  break;
 8005a10:	e054      	b.n	8005abc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a12:	7bbb      	ldrb	r3, [r7, #14]
 8005a14:	f003 020f 	and.w	r2, r3, #15
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	440b      	add	r3, r1
 8005a24:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d104      	bne.n	8005a38 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005a2e:	6839      	ldr	r1, [r7, #0]
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fb65 	bl	8006100 <USBD_CtlError>
                  break;
 8005a36:	e041      	b.n	8005abc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	da0b      	bge.n	8005a58 <USBD_StdEPReq+0x234>
 8005a40:	7bbb      	ldrb	r3, [r7, #14]
 8005a42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a46:	4613      	mov	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	3310      	adds	r3, #16
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	4413      	add	r3, r2
 8005a54:	3304      	adds	r3, #4
 8005a56:	e00b      	b.n	8005a70 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a58:	7bbb      	ldrb	r3, [r7, #14]
 8005a5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	3304      	adds	r3, #4
 8005a70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a72:	7bbb      	ldrb	r3, [r7, #14]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <USBD_StdEPReq+0x25a>
 8005a78:	7bbb      	ldrb	r3, [r7, #14]
 8005a7a:	2b80      	cmp	r3, #128	; 0x80
 8005a7c:	d103      	bne.n	8005a86 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	e00e      	b.n	8005aa4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005a86:	7bbb      	ldrb	r3, [r7, #14]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 ffcc 	bl	8006a28 <USBD_LL_IsStallEP>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	e002      	b.n	8005aa4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fb92 	bl	80061d4 <USBD_CtlSendData>
              break;
 8005ab0:	e004      	b.n	8005abc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005ab2:	6839      	ldr	r1, [r7, #0]
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fb23 	bl	8006100 <USBD_CtlError>
              break;
 8005aba:	bf00      	nop
          }
          break;
 8005abc:	e004      	b.n	8005ac8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fb1d 	bl	8006100 <USBD_CtlError>
          break;
 8005ac6:	bf00      	nop
      }
      break;
 8005ac8:	e004      	b.n	8005ad4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fb17 	bl	8006100 <USBD_CtlError>
      break;
 8005ad2:	bf00      	nop
  }

  return ret;
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	885b      	ldrh	r3, [r3, #2]
 8005afa:	0a1b      	lsrs	r3, r3, #8
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	3b01      	subs	r3, #1
 8005b00:	2b06      	cmp	r3, #6
 8005b02:	f200 8128 	bhi.w	8005d56 <USBD_GetDescriptor+0x276>
 8005b06:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <USBD_GetDescriptor+0x2c>)
 8005b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0c:	08005b29 	.word	0x08005b29
 8005b10:	08005b41 	.word	0x08005b41
 8005b14:	08005b81 	.word	0x08005b81
 8005b18:	08005d57 	.word	0x08005d57
 8005b1c:	08005d57 	.word	0x08005d57
 8005b20:	08005cf7 	.word	0x08005cf7
 8005b24:	08005d23 	.word	0x08005d23
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	7c12      	ldrb	r2, [r2, #16]
 8005b34:	f107 0108 	add.w	r1, r7, #8
 8005b38:	4610      	mov	r0, r2
 8005b3a:	4798      	blx	r3
 8005b3c:	60f8      	str	r0, [r7, #12]
      break;
 8005b3e:	e112      	b.n	8005d66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	7c1b      	ldrb	r3, [r3, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10d      	bne.n	8005b64 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b50:	f107 0208 	add.w	r2, r7, #8
 8005b54:	4610      	mov	r0, r2
 8005b56:	4798      	blx	r3
 8005b58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	2202      	movs	r2, #2
 8005b60:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005b62:	e100      	b.n	8005d66 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	f107 0208 	add.w	r2, r7, #8
 8005b70:	4610      	mov	r0, r2
 8005b72:	4798      	blx	r3
 8005b74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	701a      	strb	r2, [r3, #0]
      break;
 8005b7e:	e0f2      	b.n	8005d66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	885b      	ldrh	r3, [r3, #2]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b05      	cmp	r3, #5
 8005b88:	f200 80ac 	bhi.w	8005ce4 <USBD_GetDescriptor+0x204>
 8005b8c:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <USBD_GetDescriptor+0xb4>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005bad 	.word	0x08005bad
 8005b98:	08005be1 	.word	0x08005be1
 8005b9c:	08005c15 	.word	0x08005c15
 8005ba0:	08005c49 	.word	0x08005c49
 8005ba4:	08005c7d 	.word	0x08005c7d
 8005ba8:	08005cb1 	.word	0x08005cb1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00b      	beq.n	8005bd0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	7c12      	ldrb	r2, [r2, #16]
 8005bc4:	f107 0108 	add.w	r1, r7, #8
 8005bc8:	4610      	mov	r0, r2
 8005bca:	4798      	blx	r3
 8005bcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bce:	e091      	b.n	8005cf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bd0:	6839      	ldr	r1, [r7, #0]
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fa94 	bl	8006100 <USBD_CtlError>
            err++;
 8005bd8:	7afb      	ldrb	r3, [r7, #11]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	72fb      	strb	r3, [r7, #11]
          break;
 8005bde:	e089      	b.n	8005cf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00b      	beq.n	8005c04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	7c12      	ldrb	r2, [r2, #16]
 8005bf8:	f107 0108 	add.w	r1, r7, #8
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	4798      	blx	r3
 8005c00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c02:	e077      	b.n	8005cf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fa7a 	bl	8006100 <USBD_CtlError>
            err++;
 8005c0c:	7afb      	ldrb	r3, [r7, #11]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	72fb      	strb	r3, [r7, #11]
          break;
 8005c12:	e06f      	b.n	8005cf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00b      	beq.n	8005c38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	7c12      	ldrb	r2, [r2, #16]
 8005c2c:	f107 0108 	add.w	r1, r7, #8
 8005c30:	4610      	mov	r0, r2
 8005c32:	4798      	blx	r3
 8005c34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c36:	e05d      	b.n	8005cf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c38:	6839      	ldr	r1, [r7, #0]
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fa60 	bl	8006100 <USBD_CtlError>
            err++;
 8005c40:	7afb      	ldrb	r3, [r7, #11]
 8005c42:	3301      	adds	r3, #1
 8005c44:	72fb      	strb	r3, [r7, #11]
          break;
 8005c46:	e055      	b.n	8005cf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00b      	beq.n	8005c6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	7c12      	ldrb	r2, [r2, #16]
 8005c60:	f107 0108 	add.w	r1, r7, #8
 8005c64:	4610      	mov	r0, r2
 8005c66:	4798      	blx	r3
 8005c68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c6a:	e043      	b.n	8005cf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa46 	bl	8006100 <USBD_CtlError>
            err++;
 8005c74:	7afb      	ldrb	r3, [r7, #11]
 8005c76:	3301      	adds	r3, #1
 8005c78:	72fb      	strb	r3, [r7, #11]
          break;
 8005c7a:	e03b      	b.n	8005cf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00b      	beq.n	8005ca0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	7c12      	ldrb	r2, [r2, #16]
 8005c94:	f107 0108 	add.w	r1, r7, #8
 8005c98:	4610      	mov	r0, r2
 8005c9a:	4798      	blx	r3
 8005c9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c9e:	e029      	b.n	8005cf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ca0:	6839      	ldr	r1, [r7, #0]
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fa2c 	bl	8006100 <USBD_CtlError>
            err++;
 8005ca8:	7afb      	ldrb	r3, [r7, #11]
 8005caa:	3301      	adds	r3, #1
 8005cac:	72fb      	strb	r3, [r7, #11]
          break;
 8005cae:	e021      	b.n	8005cf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00b      	beq.n	8005cd4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	7c12      	ldrb	r2, [r2, #16]
 8005cc8:	f107 0108 	add.w	r1, r7, #8
 8005ccc:	4610      	mov	r0, r2
 8005cce:	4798      	blx	r3
 8005cd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cd2:	e00f      	b.n	8005cf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fa12 	bl	8006100 <USBD_CtlError>
            err++;
 8005cdc:	7afb      	ldrb	r3, [r7, #11]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ce2:	e007      	b.n	8005cf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005ce4:	6839      	ldr	r1, [r7, #0]
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fa0a 	bl	8006100 <USBD_CtlError>
          err++;
 8005cec:	7afb      	ldrb	r3, [r7, #11]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005cf2:	e038      	b.n	8005d66 <USBD_GetDescriptor+0x286>
 8005cf4:	e037      	b.n	8005d66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	7c1b      	ldrb	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d109      	bne.n	8005d12 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d06:	f107 0208 	add.w	r2, r7, #8
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	4798      	blx	r3
 8005d0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d10:	e029      	b.n	8005d66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f9f3 	bl	8006100 <USBD_CtlError>
        err++;
 8005d1a:	7afb      	ldrb	r3, [r7, #11]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	72fb      	strb	r3, [r7, #11]
      break;
 8005d20:	e021      	b.n	8005d66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	7c1b      	ldrb	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10d      	bne.n	8005d46 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d32:	f107 0208 	add.w	r2, r7, #8
 8005d36:	4610      	mov	r0, r2
 8005d38:	4798      	blx	r3
 8005d3a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	2207      	movs	r2, #7
 8005d42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d44:	e00f      	b.n	8005d66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f9d9 	bl	8006100 <USBD_CtlError>
        err++;
 8005d4e:	7afb      	ldrb	r3, [r7, #11]
 8005d50:	3301      	adds	r3, #1
 8005d52:	72fb      	strb	r3, [r7, #11]
      break;
 8005d54:	e007      	b.n	8005d66 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f9d1 	bl	8006100 <USBD_CtlError>
      err++;
 8005d5e:	7afb      	ldrb	r3, [r7, #11]
 8005d60:	3301      	adds	r3, #1
 8005d62:	72fb      	strb	r3, [r7, #11]
      break;
 8005d64:	bf00      	nop
  }

  if (err != 0U)
 8005d66:	7afb      	ldrb	r3, [r7, #11]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d11c      	bne.n	8005da6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005d6c:	893b      	ldrh	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d011      	beq.n	8005d96 <USBD_GetDescriptor+0x2b6>
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	88db      	ldrh	r3, [r3, #6]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00d      	beq.n	8005d96 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	88da      	ldrh	r2, [r3, #6]
 8005d7e:	893b      	ldrh	r3, [r7, #8]
 8005d80:	4293      	cmp	r3, r2
 8005d82:	bf28      	it	cs
 8005d84:	4613      	movcs	r3, r2
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d8a:	893b      	ldrh	r3, [r7, #8]
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	68f9      	ldr	r1, [r7, #12]
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fa1f 	bl	80061d4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	88db      	ldrh	r3, [r3, #6]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d104      	bne.n	8005da8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fa76 	bl	8006290 <USBD_CtlSendStatus>
 8005da4:	e000      	b.n	8005da8 <USBD_GetDescriptor+0x2c8>
    return;
 8005da6:	bf00      	nop
    }
  }
}
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop

08005db0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	889b      	ldrh	r3, [r3, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d130      	bne.n	8005e24 <USBD_SetAddress+0x74>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	88db      	ldrh	r3, [r3, #6]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d12c      	bne.n	8005e24 <USBD_SetAddress+0x74>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	885b      	ldrh	r3, [r3, #2]
 8005dce:	2b7f      	cmp	r3, #127	; 0x7f
 8005dd0:	d828      	bhi.n	8005e24 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	885b      	ldrh	r3, [r3, #2]
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ddc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d104      	bne.n	8005df2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005de8:	6839      	ldr	r1, [r7, #0]
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f988 	bl	8006100 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005df0:	e01c      	b.n	8005e2c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	7bfa      	ldrb	r2, [r7, #15]
 8005df6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fe37 	bl	8006a72 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fa43 	bl	8006290 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d004      	beq.n	8005e1a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e18:	e008      	b.n	8005e2c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e22:	e003      	b.n	8005e2c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005e24:	6839      	ldr	r1, [r7, #0]
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f96a 	bl	8006100 <USBD_CtlError>
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	885b      	ldrh	r3, [r3, #2]
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	4b41      	ldr	r3, [pc, #260]	; (8005f4c <USBD_SetConfig+0x118>)
 8005e46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005e48:	4b40      	ldr	r3, [pc, #256]	; (8005f4c <USBD_SetConfig+0x118>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d904      	bls.n	8005e5a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f954 	bl	8006100 <USBD_CtlError>
 8005e58:	e075      	b.n	8005f46 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d002      	beq.n	8005e6a <USBD_SetConfig+0x36>
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d023      	beq.n	8005eb0 <USBD_SetConfig+0x7c>
 8005e68:	e062      	b.n	8005f30 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005e6a:	4b38      	ldr	r3, [pc, #224]	; (8005f4c <USBD_SetConfig+0x118>)
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d01a      	beq.n	8005ea8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005e72:	4b36      	ldr	r3, [pc, #216]	; (8005f4c <USBD_SetConfig+0x118>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2203      	movs	r2, #3
 8005e80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005e84:	4b31      	ldr	r3, [pc, #196]	; (8005f4c <USBD_SetConfig+0x118>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	4619      	mov	r1, r3
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff f9f3 	bl	8005276 <USBD_SetClassConfig>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d104      	bne.n	8005ea0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005e96:	6839      	ldr	r1, [r7, #0]
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f931 	bl	8006100 <USBD_CtlError>
            return;
 8005e9e:	e052      	b.n	8005f46 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f9f5 	bl	8006290 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005ea6:	e04e      	b.n	8005f46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f9f1 	bl	8006290 <USBD_CtlSendStatus>
        break;
 8005eae:	e04a      	b.n	8005f46 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005eb0:	4b26      	ldr	r3, [pc, #152]	; (8005f4c <USBD_SetConfig+0x118>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d112      	bne.n	8005ede <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005ec0:	4b22      	ldr	r3, [pc, #136]	; (8005f4c <USBD_SetConfig+0x118>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005eca:	4b20      	ldr	r3, [pc, #128]	; (8005f4c <USBD_SetConfig+0x118>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7ff f9ef 	bl	80052b4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f9da 	bl	8006290 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005edc:	e033      	b.n	8005f46 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005ede:	4b1b      	ldr	r3, [pc, #108]	; (8005f4c <USBD_SetConfig+0x118>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d01d      	beq.n	8005f28 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff f9dd 	bl	80052b4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005efa:	4b14      	ldr	r3, [pc, #80]	; (8005f4c <USBD_SetConfig+0x118>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005f04:	4b11      	ldr	r3, [pc, #68]	; (8005f4c <USBD_SetConfig+0x118>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff f9b3 	bl	8005276 <USBD_SetClassConfig>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d104      	bne.n	8005f20 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005f16:	6839      	ldr	r1, [r7, #0]
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f8f1 	bl	8006100 <USBD_CtlError>
            return;
 8005f1e:	e012      	b.n	8005f46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f9b5 	bl	8006290 <USBD_CtlSendStatus>
        break;
 8005f26:	e00e      	b.n	8005f46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f9b1 	bl	8006290 <USBD_CtlSendStatus>
        break;
 8005f2e:	e00a      	b.n	8005f46 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005f30:	6839      	ldr	r1, [r7, #0]
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f8e4 	bl	8006100 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005f38:	4b04      	ldr	r3, [pc, #16]	; (8005f4c <USBD_SetConfig+0x118>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff f9b8 	bl	80052b4 <USBD_ClrClassConfig>
        break;
 8005f44:	bf00      	nop
    }
  }
}
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	20000200 	.word	0x20000200

08005f50 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	88db      	ldrh	r3, [r3, #6]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d004      	beq.n	8005f6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005f62:	6839      	ldr	r1, [r7, #0]
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f8cb 	bl	8006100 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005f6a:	e021      	b.n	8005fb0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	db17      	blt.n	8005fa6 <USBD_GetConfig+0x56>
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	dd02      	ble.n	8005f80 <USBD_GetConfig+0x30>
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d00b      	beq.n	8005f96 <USBD_GetConfig+0x46>
 8005f7e:	e012      	b.n	8005fa6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	3308      	adds	r3, #8
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f920 	bl	80061d4 <USBD_CtlSendData>
        break;
 8005f94:	e00c      	b.n	8005fb0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f918 	bl	80061d4 <USBD_CtlSendData>
        break;
 8005fa4:	e004      	b.n	8005fb0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f8a9 	bl	8006100 <USBD_CtlError>
        break;
 8005fae:	bf00      	nop
}
 8005fb0:	bf00      	nop
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d81e      	bhi.n	800600c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	88db      	ldrh	r3, [r3, #6]
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d004      	beq.n	8005fe0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005fd6:	6839      	ldr	r1, [r7, #0]
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f891 	bl	8006100 <USBD_CtlError>
        break;
 8005fde:	e01a      	b.n	8006016 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f043 0202 	orr.w	r2, r3, #2
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	330c      	adds	r3, #12
 8006000:	2202      	movs	r2, #2
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f8e5 	bl	80061d4 <USBD_CtlSendData>
      break;
 800600a:	e004      	b.n	8006016 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f876 	bl	8006100 <USBD_CtlError>
      break;
 8006014:	bf00      	nop
  }
}
 8006016:	bf00      	nop
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b082      	sub	sp, #8
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	885b      	ldrh	r3, [r3, #2]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d106      	bne.n	800603e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f929 	bl	8006290 <USBD_CtlSendStatus>
  }
}
 800603e:	bf00      	nop
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b082      	sub	sp, #8
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006056:	3b01      	subs	r3, #1
 8006058:	2b02      	cmp	r3, #2
 800605a:	d80b      	bhi.n	8006074 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	885b      	ldrh	r3, [r3, #2]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d10c      	bne.n	800607e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f90f 	bl	8006290 <USBD_CtlSendStatus>
      }
      break;
 8006072:	e004      	b.n	800607e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f842 	bl	8006100 <USBD_CtlError>
      break;
 800607c:	e000      	b.n	8006080 <USBD_ClrFeature+0x3a>
      break;
 800607e:	bf00      	nop
  }
}
 8006080:	bf00      	nop
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781a      	ldrb	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	785a      	ldrb	r2, [r3, #1]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	3302      	adds	r3, #2
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	3303      	adds	r3, #3
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	021b      	lsls	r3, r3, #8
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	4413      	add	r3, r2
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	3304      	adds	r3, #4
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	3305      	adds	r3, #5
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	4413      	add	r3, r2
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	3306      	adds	r3, #6
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	3307      	adds	r3, #7
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	021b      	lsls	r3, r3, #8
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	4413      	add	r3, r2
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	80da      	strh	r2, [r3, #6]

}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr

08006100 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800610a:	2180      	movs	r1, #128	; 0x80
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fc4d 	bl	80069ac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006112:	2100      	movs	r1, #0
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fc49 	bl	80069ac <USBD_LL_StallEP>
}
 800611a:	bf00      	nop
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b086      	sub	sp, #24
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d032      	beq.n	800619e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 f834 	bl	80061a6 <USBD_GetLen>
 800613e:	4603      	mov	r3, r0
 8006140:	3301      	adds	r3, #1
 8006142:	b29b      	uxth	r3, r3
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800614c:	7dfb      	ldrb	r3, [r7, #23]
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	75fa      	strb	r2, [r7, #23]
 8006152:	461a      	mov	r2, r3
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4413      	add	r3, r2
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	7812      	ldrb	r2, [r2, #0]
 800615c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800615e:	7dfb      	ldrb	r3, [r7, #23]
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	75fa      	strb	r2, [r7, #23]
 8006164:	461a      	mov	r2, r3
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	4413      	add	r3, r2
 800616a:	2203      	movs	r2, #3
 800616c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800616e:	e012      	b.n	8006196 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	60fa      	str	r2, [r7, #12]
 8006176:	7dfa      	ldrb	r2, [r7, #23]
 8006178:	1c51      	adds	r1, r2, #1
 800617a:	75f9      	strb	r1, [r7, #23]
 800617c:	4611      	mov	r1, r2
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	440a      	add	r2, r1
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006186:	7dfb      	ldrb	r3, [r7, #23]
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	75fa      	strb	r2, [r7, #23]
 800618c:	461a      	mov	r2, r3
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	4413      	add	r3, r2
 8006192:	2200      	movs	r2, #0
 8006194:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1e8      	bne.n	8006170 <USBD_GetString+0x4e>
    }
  }
}
 800619e:	bf00      	nop
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b085      	sub	sp, #20
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80061b2:	e005      	b.n	80061c0 <USBD_GetLen+0x1a>
  {
    len++;
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	3301      	adds	r3, #1
 80061b8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3301      	adds	r3, #1
 80061be:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1f5      	bne.n	80061b4 <USBD_GetLen+0xe>
  }

  return len;
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bc80      	pop	{r7}
 80061d2:	4770      	bx	lr

080061d4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	4613      	mov	r3, r2
 80061e0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2202      	movs	r2, #2
 80061e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80061ea:	88fa      	ldrh	r2, [r7, #6]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80061f0:	88fa      	ldrh	r2, [r7, #6]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80061f6:	88fb      	ldrh	r3, [r7, #6]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	2100      	movs	r1, #0
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 fc57 	bl	8006ab0 <USBD_LL_Transmit>

  return USBD_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	4613      	mov	r3, r2
 8006218:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800621a:	88fb      	ldrh	r3, [r7, #6]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	2100      	movs	r1, #0
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 fc45 	bl	8006ab0 <USBD_LL_Transmit>

  return USBD_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	4613      	mov	r3, r2
 800623c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2203      	movs	r2, #3
 8006242:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006246:	88fa      	ldrh	r2, [r7, #6]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800624e:	88fa      	ldrh	r2, [r7, #6]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006256:	88fb      	ldrh	r3, [r7, #6]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	2100      	movs	r1, #0
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 fc4a 	bl	8006af6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	4613      	mov	r3, r2
 8006278:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	2100      	movs	r1, #0
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fc38 	bl	8006af6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2204      	movs	r2, #4
 800629c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80062a0:	2300      	movs	r3, #0
 80062a2:	2200      	movs	r2, #0
 80062a4:	2100      	movs	r1, #0
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fc02 	bl	8006ab0 <USBD_LL_Transmit>

  return USBD_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b082      	sub	sp, #8
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2205      	movs	r2, #5
 80062c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062c6:	2300      	movs	r3, #0
 80062c8:	2200      	movs	r2, #0
 80062ca:	2100      	movs	r1, #0
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fc12 	bl	8006af6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80062e0:	2200      	movs	r2, #0
 80062e2:	4912      	ldr	r1, [pc, #72]	; (800632c <MX_USB_DEVICE_Init+0x50>)
 80062e4:	4812      	ldr	r0, [pc, #72]	; (8006330 <MX_USB_DEVICE_Init+0x54>)
 80062e6:	f7fe ff6c 	bl	80051c2 <USBD_Init>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80062f0:	f7fa fc76 	bl	8000be0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80062f4:	490f      	ldr	r1, [pc, #60]	; (8006334 <MX_USB_DEVICE_Init+0x58>)
 80062f6:	480e      	ldr	r0, [pc, #56]	; (8006330 <MX_USB_DEVICE_Init+0x54>)
 80062f8:	f7fe ff8e 	bl	8005218 <USBD_RegisterClass>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006302:	f7fa fc6d 	bl	8000be0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006306:	490c      	ldr	r1, [pc, #48]	; (8006338 <MX_USB_DEVICE_Init+0x5c>)
 8006308:	4809      	ldr	r0, [pc, #36]	; (8006330 <MX_USB_DEVICE_Init+0x54>)
 800630a:	f7fe febf 	bl	800508c <USBD_CDC_RegisterInterface>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006314:	f7fa fc64 	bl	8000be0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006318:	4805      	ldr	r0, [pc, #20]	; (8006330 <MX_USB_DEVICE_Init+0x54>)
 800631a:	f7fe ff96 	bl	800524a <USBD_Start>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d001      	beq.n	8006328 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006324:	f7fa fc5c 	bl	8000be0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006328:	bf00      	nop
 800632a:	bd80      	pop	{r7, pc}
 800632c:	2000012c 	.word	0x2000012c
 8006330:	200004a0 	.word	0x200004a0
 8006334:	20000018 	.word	0x20000018
 8006338:	2000011c 	.word	0x2000011c

0800633c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006340:	2200      	movs	r2, #0
 8006342:	4905      	ldr	r1, [pc, #20]	; (8006358 <CDC_Init_FS+0x1c>)
 8006344:	4805      	ldr	r0, [pc, #20]	; (800635c <CDC_Init_FS+0x20>)
 8006346:	f7fe feb7 	bl	80050b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800634a:	4905      	ldr	r1, [pc, #20]	; (8006360 <CDC_Init_FS+0x24>)
 800634c:	4803      	ldr	r0, [pc, #12]	; (800635c <CDC_Init_FS+0x20>)
 800634e:	f7fe fecc 	bl	80050ea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006352:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006354:	4618      	mov	r0, r3
 8006356:	bd80      	pop	{r7, pc}
 8006358:	20000b4c 	.word	0x20000b4c
 800635c:	200004a0 	.word	0x200004a0
 8006360:	20000764 	.word	0x20000764

08006364 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006368:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800636a:	4618      	mov	r0, r3
 800636c:	46bd      	mov	sp, r7
 800636e:	bc80      	pop	{r7}
 8006370:	4770      	bx	lr
	...

08006374 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	4603      	mov	r3, r0
 800637c:	6039      	str	r1, [r7, #0]
 800637e:	71fb      	strb	r3, [r7, #7]
 8006380:	4613      	mov	r3, r2
 8006382:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	2b23      	cmp	r3, #35	; 0x23
 8006388:	d84a      	bhi.n	8006420 <CDC_Control_FS+0xac>
 800638a:	a201      	add	r2, pc, #4	; (adr r2, 8006390 <CDC_Control_FS+0x1c>)
 800638c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006390:	08006421 	.word	0x08006421
 8006394:	08006421 	.word	0x08006421
 8006398:	08006421 	.word	0x08006421
 800639c:	08006421 	.word	0x08006421
 80063a0:	08006421 	.word	0x08006421
 80063a4:	08006421 	.word	0x08006421
 80063a8:	08006421 	.word	0x08006421
 80063ac:	08006421 	.word	0x08006421
 80063b0:	08006421 	.word	0x08006421
 80063b4:	08006421 	.word	0x08006421
 80063b8:	08006421 	.word	0x08006421
 80063bc:	08006421 	.word	0x08006421
 80063c0:	08006421 	.word	0x08006421
 80063c4:	08006421 	.word	0x08006421
 80063c8:	08006421 	.word	0x08006421
 80063cc:	08006421 	.word	0x08006421
 80063d0:	08006421 	.word	0x08006421
 80063d4:	08006421 	.word	0x08006421
 80063d8:	08006421 	.word	0x08006421
 80063dc:	08006421 	.word	0x08006421
 80063e0:	08006421 	.word	0x08006421
 80063e4:	08006421 	.word	0x08006421
 80063e8:	08006421 	.word	0x08006421
 80063ec:	08006421 	.word	0x08006421
 80063f0:	08006421 	.word	0x08006421
 80063f4:	08006421 	.word	0x08006421
 80063f8:	08006421 	.word	0x08006421
 80063fc:	08006421 	.word	0x08006421
 8006400:	08006421 	.word	0x08006421
 8006404:	08006421 	.word	0x08006421
 8006408:	08006421 	.word	0x08006421
 800640c:	08006421 	.word	0x08006421
 8006410:	08006421 	.word	0x08006421
 8006414:	08006421 	.word	0x08006421
 8006418:	08006421 	.word	0x08006421
 800641c:	08006421 	.word	0x08006421
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006420:	bf00      	nop
  }

  return (USBD_OK);
 8006422:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006424:	4618      	mov	r0, r3
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	bc80      	pop	{r7}
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop

08006430 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	4805      	ldr	r0, [pc, #20]	; (8006454 <CDC_Receive_FS+0x24>)
 800643e:	f7fe fe54 	bl	80050ea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006442:	4804      	ldr	r0, [pc, #16]	; (8006454 <CDC_Receive_FS+0x24>)
 8006444:	f7fe fe93 	bl	800516e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006448:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800644a:	4618      	mov	r0, r3
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	200004a0 	.word	0x200004a0

08006458 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006468:	4b0d      	ldr	r3, [pc, #52]	; (80064a0 <CDC_Transmit_FS+0x48>)
 800646a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800647a:	2301      	movs	r3, #1
 800647c:	e00b      	b.n	8006496 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800647e:	887b      	ldrh	r3, [r7, #2]
 8006480:	461a      	mov	r2, r3
 8006482:	6879      	ldr	r1, [r7, #4]
 8006484:	4806      	ldr	r0, [pc, #24]	; (80064a0 <CDC_Transmit_FS+0x48>)
 8006486:	f7fe fe17 	bl	80050b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800648a:	4805      	ldr	r0, [pc, #20]	; (80064a0 <CDC_Transmit_FS+0x48>)
 800648c:	f7fe fe40 	bl	8005110 <USBD_CDC_TransmitPacket>
 8006490:	4603      	mov	r3, r0
 8006492:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006494:	7bfb      	ldrb	r3, [r7, #15]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	200004a0 	.word	0x200004a0

080064a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	4603      	mov	r3, r0
 80064ac:	6039      	str	r1, [r7, #0]
 80064ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2212      	movs	r2, #18
 80064b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80064b6:	4b03      	ldr	r3, [pc, #12]	; (80064c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	bc80      	pop	{r7}
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	20000148 	.word	0x20000148

080064c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	6039      	str	r1, [r7, #0]
 80064d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2204      	movs	r2, #4
 80064d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80064da:	4b03      	ldr	r3, [pc, #12]	; (80064e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80064dc:	4618      	mov	r0, r3
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bc80      	pop	{r7}
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	2000015c 	.word	0x2000015c

080064ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	4603      	mov	r3, r0
 80064f4:	6039      	str	r1, [r7, #0]
 80064f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80064f8:	79fb      	ldrb	r3, [r7, #7]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d105      	bne.n	800650a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	4907      	ldr	r1, [pc, #28]	; (8006520 <USBD_FS_ProductStrDescriptor+0x34>)
 8006502:	4808      	ldr	r0, [pc, #32]	; (8006524 <USBD_FS_ProductStrDescriptor+0x38>)
 8006504:	f7ff fe0d 	bl	8006122 <USBD_GetString>
 8006508:	e004      	b.n	8006514 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	4904      	ldr	r1, [pc, #16]	; (8006520 <USBD_FS_ProductStrDescriptor+0x34>)
 800650e:	4805      	ldr	r0, [pc, #20]	; (8006524 <USBD_FS_ProductStrDescriptor+0x38>)
 8006510:	f7ff fe07 	bl	8006122 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006514:	4b02      	ldr	r3, [pc, #8]	; (8006520 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	20000f34 	.word	0x20000f34
 8006524:	080074d0 	.word	0x080074d0

08006528 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	6039      	str	r1, [r7, #0]
 8006532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	4904      	ldr	r1, [pc, #16]	; (8006548 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006538:	4804      	ldr	r0, [pc, #16]	; (800654c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800653a:	f7ff fdf2 	bl	8006122 <USBD_GetString>
  return USBD_StrDesc;
 800653e:	4b02      	ldr	r3, [pc, #8]	; (8006548 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006540:	4618      	mov	r0, r3
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	20000f34 	.word	0x20000f34
 800654c:	080074e8 	.word	0x080074e8

08006550 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	6039      	str	r1, [r7, #0]
 800655a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	221a      	movs	r2, #26
 8006560:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006562:	f000 f843 	bl	80065ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006566:	4b02      	ldr	r3, [pc, #8]	; (8006570 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	20000160 	.word	0x20000160

08006574 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	4603      	mov	r3, r0
 800657c:	6039      	str	r1, [r7, #0]
 800657e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006580:	79fb      	ldrb	r3, [r7, #7]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d105      	bne.n	8006592 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	4907      	ldr	r1, [pc, #28]	; (80065a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800658a:	4808      	ldr	r0, [pc, #32]	; (80065ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800658c:	f7ff fdc9 	bl	8006122 <USBD_GetString>
 8006590:	e004      	b.n	800659c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	4904      	ldr	r1, [pc, #16]	; (80065a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006596:	4805      	ldr	r0, [pc, #20]	; (80065ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8006598:	f7ff fdc3 	bl	8006122 <USBD_GetString>
  }
  return USBD_StrDesc;
 800659c:	4b02      	ldr	r3, [pc, #8]	; (80065a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20000f34 	.word	0x20000f34
 80065ac:	080074fc 	.word	0x080074fc

080065b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	6039      	str	r1, [r7, #0]
 80065ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80065bc:	79fb      	ldrb	r3, [r7, #7]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d105      	bne.n	80065ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	4907      	ldr	r1, [pc, #28]	; (80065e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80065c6:	4808      	ldr	r0, [pc, #32]	; (80065e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80065c8:	f7ff fdab 	bl	8006122 <USBD_GetString>
 80065cc:	e004      	b.n	80065d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	4904      	ldr	r1, [pc, #16]	; (80065e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80065d2:	4805      	ldr	r0, [pc, #20]	; (80065e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80065d4:	f7ff fda5 	bl	8006122 <USBD_GetString>
  }
  return USBD_StrDesc;
 80065d8:	4b02      	ldr	r3, [pc, #8]	; (80065e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20000f34 	.word	0x20000f34
 80065e8:	08007508 	.word	0x08007508

080065ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80065f2:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <Get_SerialNum+0x44>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80065f8:	4b0e      	ldr	r3, [pc, #56]	; (8006634 <Get_SerialNum+0x48>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80065fe:	4b0e      	ldr	r3, [pc, #56]	; (8006638 <Get_SerialNum+0x4c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4413      	add	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d009      	beq.n	8006626 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006612:	2208      	movs	r2, #8
 8006614:	4909      	ldr	r1, [pc, #36]	; (800663c <Get_SerialNum+0x50>)
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 f814 	bl	8006644 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800661c:	2204      	movs	r2, #4
 800661e:	4908      	ldr	r1, [pc, #32]	; (8006640 <Get_SerialNum+0x54>)
 8006620:	68b8      	ldr	r0, [r7, #8]
 8006622:	f000 f80f 	bl	8006644 <IntToUnicode>
  }
}
 8006626:	bf00      	nop
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	1ffff7e8 	.word	0x1ffff7e8
 8006634:	1ffff7ec 	.word	0x1ffff7ec
 8006638:	1ffff7f0 	.word	0x1ffff7f0
 800663c:	20000162 	.word	0x20000162
 8006640:	20000172 	.word	0x20000172

08006644 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	4613      	mov	r3, r2
 8006650:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006656:	2300      	movs	r3, #0
 8006658:	75fb      	strb	r3, [r7, #23]
 800665a:	e027      	b.n	80066ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	0f1b      	lsrs	r3, r3, #28
 8006660:	2b09      	cmp	r3, #9
 8006662:	d80b      	bhi.n	800667c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	0f1b      	lsrs	r3, r3, #28
 8006668:	b2da      	uxtb	r2, r3
 800666a:	7dfb      	ldrb	r3, [r7, #23]
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	4619      	mov	r1, r3
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	440b      	add	r3, r1
 8006674:	3230      	adds	r2, #48	; 0x30
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	e00a      	b.n	8006692 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	0f1b      	lsrs	r3, r3, #28
 8006680:	b2da      	uxtb	r2, r3
 8006682:	7dfb      	ldrb	r3, [r7, #23]
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	4619      	mov	r1, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	440b      	add	r3, r1
 800668c:	3237      	adds	r2, #55	; 0x37
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	011b      	lsls	r3, r3, #4
 8006696:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006698:	7dfb      	ldrb	r3, [r7, #23]
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	3301      	adds	r3, #1
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	4413      	add	r3, r2
 80066a2:	2200      	movs	r2, #0
 80066a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80066a6:	7dfb      	ldrb	r3, [r7, #23]
 80066a8:	3301      	adds	r3, #1
 80066aa:	75fb      	strb	r3, [r7, #23]
 80066ac:	7dfa      	ldrb	r2, [r7, #23]
 80066ae:	79fb      	ldrb	r3, [r7, #7]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d3d3      	bcc.n	800665c <IntToUnicode+0x18>
  }
}
 80066b4:	bf00      	nop
 80066b6:	371c      	adds	r7, #28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bc80      	pop	{r7}
 80066bc:	4770      	bx	lr
	...

080066c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a0d      	ldr	r2, [pc, #52]	; (8006704 <HAL_PCD_MspInit+0x44>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d113      	bne.n	80066fa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80066d2:	4b0d      	ldr	r3, [pc, #52]	; (8006708 <HAL_PCD_MspInit+0x48>)
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	4a0c      	ldr	r2, [pc, #48]	; (8006708 <HAL_PCD_MspInit+0x48>)
 80066d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80066dc:	61d3      	str	r3, [r2, #28]
 80066de:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <HAL_PCD_MspInit+0x48>)
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80066ea:	2200      	movs	r2, #0
 80066ec:	2100      	movs	r1, #0
 80066ee:	2014      	movs	r0, #20
 80066f0:	f7fb f91d 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80066f4:	2014      	movs	r0, #20
 80066f6:	f7fb f936 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80066fa:	bf00      	nop
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	40005c00 	.word	0x40005c00
 8006708:	40021000 	.word	0x40021000

0800670c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006720:	4619      	mov	r1, r3
 8006722:	4610      	mov	r0, r2
 8006724:	f7fe fdd9 	bl	80052da <USBD_LL_SetupStage>
}
 8006728:	bf00      	nop
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	460b      	mov	r3, r1
 800673a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006742:	78fb      	ldrb	r3, [r7, #3]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	015b      	lsls	r3, r3, #5
 8006748:	4413      	add	r3, r2
 800674a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	78fb      	ldrb	r3, [r7, #3]
 8006752:	4619      	mov	r1, r3
 8006754:	f7fe fe0c 	bl	8005370 <USBD_LL_DataOutStage>
}
 8006758:	bf00      	nop
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006772:	78fb      	ldrb	r3, [r7, #3]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	015b      	lsls	r3, r3, #5
 8006778:	4413      	add	r3, r2
 800677a:	333c      	adds	r3, #60	; 0x3c
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	78fb      	ldrb	r3, [r7, #3]
 8006780:	4619      	mov	r1, r3
 8006782:	f7fe fe66 	bl	8005452 <USBD_LL_DataInStage>
}
 8006786:	bf00      	nop
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe ff76 	bl	800568e <USBD_LL_SOF>
}
 80067a2:	bf00      	nop
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80067b2:	2301      	movs	r3, #1
 80067b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d001      	beq.n	80067c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80067be:	f7fa fa0f 	bl	8000be0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80067c8:	7bfa      	ldrb	r2, [r7, #15]
 80067ca:	4611      	mov	r1, r2
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fe ff26 	bl	800561e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fe fedf 	bl	800559c <USBD_LL_Reset>
}
 80067de:	bf00      	nop
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fe ff20 	bl	800563c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d005      	beq.n	8006810 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006804:	4b04      	ldr	r3, [pc, #16]	; (8006818 <HAL_PCD_SuspendCallback+0x30>)
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	4a03      	ldr	r2, [pc, #12]	; (8006818 <HAL_PCD_SuspendCallback+0x30>)
 800680a:	f043 0306 	orr.w	r3, r3, #6
 800680e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006810:	bf00      	nop
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	e000ed00 	.word	0xe000ed00

0800681c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800682a:	4618      	mov	r0, r3
 800682c:	f7fe ff1a 	bl	8005664 <USBD_LL_Resume>
}
 8006830:	bf00      	nop
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006840:	4a28      	ldr	r2, [pc, #160]	; (80068e4 <USBD_LL_Init+0xac>)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a26      	ldr	r2, [pc, #152]	; (80068e4 <USBD_LL_Init+0xac>)
 800684c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006850:	4b24      	ldr	r3, [pc, #144]	; (80068e4 <USBD_LL_Init+0xac>)
 8006852:	4a25      	ldr	r2, [pc, #148]	; (80068e8 <USBD_LL_Init+0xb0>)
 8006854:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006856:	4b23      	ldr	r3, [pc, #140]	; (80068e4 <USBD_LL_Init+0xac>)
 8006858:	2208      	movs	r2, #8
 800685a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800685c:	4b21      	ldr	r3, [pc, #132]	; (80068e4 <USBD_LL_Init+0xac>)
 800685e:	2202      	movs	r2, #2
 8006860:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006862:	4b20      	ldr	r3, [pc, #128]	; (80068e4 <USBD_LL_Init+0xac>)
 8006864:	2200      	movs	r2, #0
 8006866:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006868:	4b1e      	ldr	r3, [pc, #120]	; (80068e4 <USBD_LL_Init+0xac>)
 800686a:	2200      	movs	r2, #0
 800686c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800686e:	4b1d      	ldr	r3, [pc, #116]	; (80068e4 <USBD_LL_Init+0xac>)
 8006870:	2200      	movs	r2, #0
 8006872:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006874:	481b      	ldr	r0, [pc, #108]	; (80068e4 <USBD_LL_Init+0xac>)
 8006876:	f7fb f9f7 	bl	8001c68 <HAL_PCD_Init>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006880:	f7fa f9ae 	bl	8000be0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800688a:	2318      	movs	r3, #24
 800688c:	2200      	movs	r2, #0
 800688e:	2100      	movs	r1, #0
 8006890:	f7fc f890 	bl	80029b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800689a:	2358      	movs	r3, #88	; 0x58
 800689c:	2200      	movs	r2, #0
 800689e:	2180      	movs	r1, #128	; 0x80
 80068a0:	f7fc f888 	bl	80029b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80068aa:	23c0      	movs	r3, #192	; 0xc0
 80068ac:	2200      	movs	r2, #0
 80068ae:	2181      	movs	r1, #129	; 0x81
 80068b0:	f7fc f880 	bl	80029b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80068ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 80068be:	2200      	movs	r2, #0
 80068c0:	2101      	movs	r1, #1
 80068c2:	f7fc f877 	bl	80029b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80068cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068d0:	2200      	movs	r2, #0
 80068d2:	2182      	movs	r1, #130	; 0x82
 80068d4:	f7fc f86e 	bl	80029b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20001134 	.word	0x20001134
 80068e8:	40005c00 	.word	0x40005c00

080068ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006902:	4618      	mov	r0, r3
 8006904:	f7fb fa91 	bl	8001e2a <HAL_PCD_Start>
 8006908:	4603      	mov	r3, r0
 800690a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	4618      	mov	r0, r3
 8006910:	f000 f948 	bl	8006ba4 <USBD_Get_USB_Status>
 8006914:	4603      	mov	r3, r0
 8006916:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006918:	7bbb      	ldrb	r3, [r7, #14]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b084      	sub	sp, #16
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	4608      	mov	r0, r1
 800692c:	4611      	mov	r1, r2
 800692e:	461a      	mov	r2, r3
 8006930:	4603      	mov	r3, r0
 8006932:	70fb      	strb	r3, [r7, #3]
 8006934:	460b      	mov	r3, r1
 8006936:	70bb      	strb	r3, [r7, #2]
 8006938:	4613      	mov	r3, r2
 800693a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800694a:	78bb      	ldrb	r3, [r7, #2]
 800694c:	883a      	ldrh	r2, [r7, #0]
 800694e:	78f9      	ldrb	r1, [r7, #3]
 8006950:	f7fb fbc4 	bl	80020dc <HAL_PCD_EP_Open>
 8006954:	4603      	mov	r3, r0
 8006956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	4618      	mov	r0, r3
 800695c:	f000 f922 	bl	8006ba4 <USBD_Get_USB_Status>
 8006960:	4603      	mov	r3, r0
 8006962:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006964:	7bbb      	ldrb	r3, [r7, #14]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	460b      	mov	r3, r1
 8006978:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006988:	78fa      	ldrb	r2, [r7, #3]
 800698a:	4611      	mov	r1, r2
 800698c:	4618      	mov	r0, r3
 800698e:	f7fb fc05 	bl	800219c <HAL_PCD_EP_Close>
 8006992:	4603      	mov	r3, r0
 8006994:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006996:	7bfb      	ldrb	r3, [r7, #15]
 8006998:	4618      	mov	r0, r3
 800699a:	f000 f903 	bl	8006ba4 <USBD_Get_USB_Status>
 800699e:	4603      	mov	r3, r0
 80069a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 80069a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	460b      	mov	r3, r1
 80069b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069b8:	2300      	movs	r3, #0
 80069ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069c6:	78fa      	ldrb	r2, [r7, #3]
 80069c8:	4611      	mov	r1, r2
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fb fcaf 	bl	800232e <HAL_PCD_EP_SetStall>
 80069d0:	4603      	mov	r3, r0
 80069d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 f8e4 	bl	8006ba4 <USBD_Get_USB_Status>
 80069dc:	4603      	mov	r3, r0
 80069de:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80069e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a04:	78fa      	ldrb	r2, [r7, #3]
 8006a06:	4611      	mov	r1, r2
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fb fcea 	bl	80023e2 <HAL_PCD_EP_ClrStall>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 f8c5 	bl	8006ba4 <USBD_Get_USB_Status>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006a1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a3a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	da08      	bge.n	8006a56 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006a44:	78fb      	ldrb	r3, [r7, #3]
 8006a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	015b      	lsls	r3, r3, #5
 8006a4e:	4413      	add	r3, r2
 8006a50:	332a      	adds	r3, #42	; 0x2a
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	e008      	b.n	8006a68 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006a56:	78fb      	ldrb	r3, [r7, #3]
 8006a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	015b      	lsls	r3, r3, #5
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006a66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bc80      	pop	{r7}
 8006a70:	4770      	bx	lr

08006a72 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a8c:	78fa      	ldrb	r2, [r7, #3]
 8006a8e:	4611      	mov	r1, r2
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fb fafe 	bl	8002092 <HAL_PCD_SetAddress>
 8006a96:	4603      	mov	r3, r0
 8006a98:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 f881 	bl	8006ba4 <USBD_Get_USB_Status>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	607a      	str	r2, [r7, #4]
 8006aba:	461a      	mov	r2, r3
 8006abc:	460b      	mov	r3, r1
 8006abe:	72fb      	strb	r3, [r7, #11]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006ad2:	893b      	ldrh	r3, [r7, #8]
 8006ad4:	7af9      	ldrb	r1, [r7, #11]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	f7fb fbf0 	bl	80022bc <HAL_PCD_EP_Transmit>
 8006adc:	4603      	mov	r3, r0
 8006ade:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ae0:	7dfb      	ldrb	r3, [r7, #23]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 f85e 	bl	8006ba4 <USBD_Get_USB_Status>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006aec:	7dbb      	ldrb	r3, [r7, #22]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3718      	adds	r7, #24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b086      	sub	sp, #24
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	60f8      	str	r0, [r7, #12]
 8006afe:	607a      	str	r2, [r7, #4]
 8006b00:	461a      	mov	r2, r3
 8006b02:	460b      	mov	r3, r1
 8006b04:	72fb      	strb	r3, [r7, #11]
 8006b06:	4613      	mov	r3, r2
 8006b08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006b18:	893b      	ldrh	r3, [r7, #8]
 8006b1a:	7af9      	ldrb	r1, [r7, #11]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	f7fb fb7f 	bl	8002220 <HAL_PCD_EP_Receive>
 8006b22:	4603      	mov	r3, r0
 8006b24:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b26:	7dfb      	ldrb	r3, [r7, #23]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 f83b 	bl	8006ba4 <USBD_Get_USB_Status>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8006b32:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b4e:	78fa      	ldrb	r2, [r7, #3]
 8006b50:	4611      	mov	r1, r2
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fb fb9e 	bl	8002294 <HAL_PCD_EP_GetRxCount>
 8006b58:	4603      	mov	r3, r0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006b6c:	4b02      	ldr	r3, [pc, #8]	; (8006b78 <USBD_static_malloc+0x14>)
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bc80      	pop	{r7}
 8006b76:	4770      	bx	lr
 8006b78:	20000204 	.word	0x20000204

08006b7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]

}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr

08006b8e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	460b      	mov	r3, r1
 8006b98:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006b9a:	bf00      	nop
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bc80      	pop	{r7}
 8006ba2:	4770      	bx	lr

08006ba4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	4603      	mov	r3, r0
 8006bac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006bb2:	79fb      	ldrb	r3, [r7, #7]
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d817      	bhi.n	8006be8 <USBD_Get_USB_Status+0x44>
 8006bb8:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <USBD_Get_USB_Status+0x1c>)
 8006bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbe:	bf00      	nop
 8006bc0:	08006bd1 	.word	0x08006bd1
 8006bc4:	08006bd7 	.word	0x08006bd7
 8006bc8:	08006bdd 	.word	0x08006bdd
 8006bcc:	08006be3 	.word	0x08006be3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8006bd4:	e00b      	b.n	8006bee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	73fb      	strb	r3, [r7, #15]
    break;
 8006bda:	e008      	b.n	8006bee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	73fb      	strb	r3, [r7, #15]
    break;
 8006be0:	e005      	b.n	8006bee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006be2:	2302      	movs	r3, #2
 8006be4:	73fb      	strb	r3, [r7, #15]
    break;
 8006be6:	e002      	b.n	8006bee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006be8:	2302      	movs	r3, #2
 8006bea:	73fb      	strb	r3, [r7, #15]
    break;
 8006bec:	bf00      	nop
  }
  return usb_status;
 8006bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bc80      	pop	{r7}
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop

08006bfc <__errno>:
 8006bfc:	4b01      	ldr	r3, [pc, #4]	; (8006c04 <__errno+0x8>)
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	2000017c 	.word	0x2000017c

08006c08 <__libc_init_array>:
 8006c08:	b570      	push	{r4, r5, r6, lr}
 8006c0a:	2500      	movs	r5, #0
 8006c0c:	4e0c      	ldr	r6, [pc, #48]	; (8006c40 <__libc_init_array+0x38>)
 8006c0e:	4c0d      	ldr	r4, [pc, #52]	; (8006c44 <__libc_init_array+0x3c>)
 8006c10:	1ba4      	subs	r4, r4, r6
 8006c12:	10a4      	asrs	r4, r4, #2
 8006c14:	42a5      	cmp	r5, r4
 8006c16:	d109      	bne.n	8006c2c <__libc_init_array+0x24>
 8006c18:	f000 fc34 	bl	8007484 <_init>
 8006c1c:	2500      	movs	r5, #0
 8006c1e:	4e0a      	ldr	r6, [pc, #40]	; (8006c48 <__libc_init_array+0x40>)
 8006c20:	4c0a      	ldr	r4, [pc, #40]	; (8006c4c <__libc_init_array+0x44>)
 8006c22:	1ba4      	subs	r4, r4, r6
 8006c24:	10a4      	asrs	r4, r4, #2
 8006c26:	42a5      	cmp	r5, r4
 8006c28:	d105      	bne.n	8006c36 <__libc_init_array+0x2e>
 8006c2a:	bd70      	pop	{r4, r5, r6, pc}
 8006c2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c30:	4798      	blx	r3
 8006c32:	3501      	adds	r5, #1
 8006c34:	e7ee      	b.n	8006c14 <__libc_init_array+0xc>
 8006c36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c3a:	4798      	blx	r3
 8006c3c:	3501      	adds	r5, #1
 8006c3e:	e7f2      	b.n	8006c26 <__libc_init_array+0x1e>
 8006c40:	08007564 	.word	0x08007564
 8006c44:	08007564 	.word	0x08007564
 8006c48:	08007564 	.word	0x08007564
 8006c4c:	08007568 	.word	0x08007568

08006c50 <memset>:
 8006c50:	4603      	mov	r3, r0
 8006c52:	4402      	add	r2, r0
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d100      	bne.n	8006c5a <memset+0xa>
 8006c58:	4770      	bx	lr
 8006c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c5e:	e7f9      	b.n	8006c54 <memset+0x4>

08006c60 <siprintf>:
 8006c60:	b40e      	push	{r1, r2, r3}
 8006c62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c66:	b500      	push	{lr}
 8006c68:	b09c      	sub	sp, #112	; 0x70
 8006c6a:	ab1d      	add	r3, sp, #116	; 0x74
 8006c6c:	9002      	str	r0, [sp, #8]
 8006c6e:	9006      	str	r0, [sp, #24]
 8006c70:	9107      	str	r1, [sp, #28]
 8006c72:	9104      	str	r1, [sp, #16]
 8006c74:	4808      	ldr	r0, [pc, #32]	; (8006c98 <siprintf+0x38>)
 8006c76:	4909      	ldr	r1, [pc, #36]	; (8006c9c <siprintf+0x3c>)
 8006c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c7c:	9105      	str	r1, [sp, #20]
 8006c7e:	6800      	ldr	r0, [r0, #0]
 8006c80:	a902      	add	r1, sp, #8
 8006c82:	9301      	str	r3, [sp, #4]
 8006c84:	f000 f866 	bl	8006d54 <_svfiprintf_r>
 8006c88:	2200      	movs	r2, #0
 8006c8a:	9b02      	ldr	r3, [sp, #8]
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	b01c      	add	sp, #112	; 0x70
 8006c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c94:	b003      	add	sp, #12
 8006c96:	4770      	bx	lr
 8006c98:	2000017c 	.word	0x2000017c
 8006c9c:	ffff0208 	.word	0xffff0208

08006ca0 <__ssputs_r>:
 8006ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca4:	688e      	ldr	r6, [r1, #8]
 8006ca6:	4682      	mov	sl, r0
 8006ca8:	429e      	cmp	r6, r3
 8006caa:	460c      	mov	r4, r1
 8006cac:	4690      	mov	r8, r2
 8006cae:	4699      	mov	r9, r3
 8006cb0:	d837      	bhi.n	8006d22 <__ssputs_r+0x82>
 8006cb2:	898a      	ldrh	r2, [r1, #12]
 8006cb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006cb8:	d031      	beq.n	8006d1e <__ssputs_r+0x7e>
 8006cba:	2302      	movs	r3, #2
 8006cbc:	6825      	ldr	r5, [r4, #0]
 8006cbe:	6909      	ldr	r1, [r1, #16]
 8006cc0:	1a6f      	subs	r7, r5, r1
 8006cc2:	6965      	ldr	r5, [r4, #20]
 8006cc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cc8:	fb95 f5f3 	sdiv	r5, r5, r3
 8006ccc:	f109 0301 	add.w	r3, r9, #1
 8006cd0:	443b      	add	r3, r7
 8006cd2:	429d      	cmp	r5, r3
 8006cd4:	bf38      	it	cc
 8006cd6:	461d      	movcc	r5, r3
 8006cd8:	0553      	lsls	r3, r2, #21
 8006cda:	d530      	bpl.n	8006d3e <__ssputs_r+0x9e>
 8006cdc:	4629      	mov	r1, r5
 8006cde:	f000 fb37 	bl	8007350 <_malloc_r>
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	b950      	cbnz	r0, 8006cfc <__ssputs_r+0x5c>
 8006ce6:	230c      	movs	r3, #12
 8006ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cec:	f8ca 3000 	str.w	r3, [sl]
 8006cf0:	89a3      	ldrh	r3, [r4, #12]
 8006cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cf6:	81a3      	strh	r3, [r4, #12]
 8006cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cfc:	463a      	mov	r2, r7
 8006cfe:	6921      	ldr	r1, [r4, #16]
 8006d00:	f000 fab6 	bl	8007270 <memcpy>
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0e:	81a3      	strh	r3, [r4, #12]
 8006d10:	6126      	str	r6, [r4, #16]
 8006d12:	443e      	add	r6, r7
 8006d14:	6026      	str	r6, [r4, #0]
 8006d16:	464e      	mov	r6, r9
 8006d18:	6165      	str	r5, [r4, #20]
 8006d1a:	1bed      	subs	r5, r5, r7
 8006d1c:	60a5      	str	r5, [r4, #8]
 8006d1e:	454e      	cmp	r6, r9
 8006d20:	d900      	bls.n	8006d24 <__ssputs_r+0x84>
 8006d22:	464e      	mov	r6, r9
 8006d24:	4632      	mov	r2, r6
 8006d26:	4641      	mov	r1, r8
 8006d28:	6820      	ldr	r0, [r4, #0]
 8006d2a:	f000 faac 	bl	8007286 <memmove>
 8006d2e:	68a3      	ldr	r3, [r4, #8]
 8006d30:	2000      	movs	r0, #0
 8006d32:	1b9b      	subs	r3, r3, r6
 8006d34:	60a3      	str	r3, [r4, #8]
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	441e      	add	r6, r3
 8006d3a:	6026      	str	r6, [r4, #0]
 8006d3c:	e7dc      	b.n	8006cf8 <__ssputs_r+0x58>
 8006d3e:	462a      	mov	r2, r5
 8006d40:	f000 fb60 	bl	8007404 <_realloc_r>
 8006d44:	4606      	mov	r6, r0
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d1e2      	bne.n	8006d10 <__ssputs_r+0x70>
 8006d4a:	6921      	ldr	r1, [r4, #16]
 8006d4c:	4650      	mov	r0, sl
 8006d4e:	f000 fab3 	bl	80072b8 <_free_r>
 8006d52:	e7c8      	b.n	8006ce6 <__ssputs_r+0x46>

08006d54 <_svfiprintf_r>:
 8006d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d58:	461d      	mov	r5, r3
 8006d5a:	898b      	ldrh	r3, [r1, #12]
 8006d5c:	b09d      	sub	sp, #116	; 0x74
 8006d5e:	061f      	lsls	r7, r3, #24
 8006d60:	4680      	mov	r8, r0
 8006d62:	460c      	mov	r4, r1
 8006d64:	4616      	mov	r6, r2
 8006d66:	d50f      	bpl.n	8006d88 <_svfiprintf_r+0x34>
 8006d68:	690b      	ldr	r3, [r1, #16]
 8006d6a:	b96b      	cbnz	r3, 8006d88 <_svfiprintf_r+0x34>
 8006d6c:	2140      	movs	r1, #64	; 0x40
 8006d6e:	f000 faef 	bl	8007350 <_malloc_r>
 8006d72:	6020      	str	r0, [r4, #0]
 8006d74:	6120      	str	r0, [r4, #16]
 8006d76:	b928      	cbnz	r0, 8006d84 <_svfiprintf_r+0x30>
 8006d78:	230c      	movs	r3, #12
 8006d7a:	f8c8 3000 	str.w	r3, [r8]
 8006d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d82:	e0c8      	b.n	8006f16 <_svfiprintf_r+0x1c2>
 8006d84:	2340      	movs	r3, #64	; 0x40
 8006d86:	6163      	str	r3, [r4, #20]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d8c:	2320      	movs	r3, #32
 8006d8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d92:	2330      	movs	r3, #48	; 0x30
 8006d94:	f04f 0b01 	mov.w	fp, #1
 8006d98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d9c:	9503      	str	r5, [sp, #12]
 8006d9e:	4637      	mov	r7, r6
 8006da0:	463d      	mov	r5, r7
 8006da2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006da6:	b10b      	cbz	r3, 8006dac <_svfiprintf_r+0x58>
 8006da8:	2b25      	cmp	r3, #37	; 0x25
 8006daa:	d13e      	bne.n	8006e2a <_svfiprintf_r+0xd6>
 8006dac:	ebb7 0a06 	subs.w	sl, r7, r6
 8006db0:	d00b      	beq.n	8006dca <_svfiprintf_r+0x76>
 8006db2:	4653      	mov	r3, sl
 8006db4:	4632      	mov	r2, r6
 8006db6:	4621      	mov	r1, r4
 8006db8:	4640      	mov	r0, r8
 8006dba:	f7ff ff71 	bl	8006ca0 <__ssputs_r>
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	f000 80a4 	beq.w	8006f0c <_svfiprintf_r+0x1b8>
 8006dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc6:	4453      	add	r3, sl
 8006dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8006dca:	783b      	ldrb	r3, [r7, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 809d 	beq.w	8006f0c <_svfiprintf_r+0x1b8>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006dd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ddc:	9304      	str	r3, [sp, #16]
 8006dde:	9307      	str	r3, [sp, #28]
 8006de0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006de4:	931a      	str	r3, [sp, #104]	; 0x68
 8006de6:	462f      	mov	r7, r5
 8006de8:	2205      	movs	r2, #5
 8006dea:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006dee:	4850      	ldr	r0, [pc, #320]	; (8006f30 <_svfiprintf_r+0x1dc>)
 8006df0:	f000 fa30 	bl	8007254 <memchr>
 8006df4:	9b04      	ldr	r3, [sp, #16]
 8006df6:	b9d0      	cbnz	r0, 8006e2e <_svfiprintf_r+0xda>
 8006df8:	06d9      	lsls	r1, r3, #27
 8006dfa:	bf44      	itt	mi
 8006dfc:	2220      	movmi	r2, #32
 8006dfe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006e02:	071a      	lsls	r2, r3, #28
 8006e04:	bf44      	itt	mi
 8006e06:	222b      	movmi	r2, #43	; 0x2b
 8006e08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006e0c:	782a      	ldrb	r2, [r5, #0]
 8006e0e:	2a2a      	cmp	r2, #42	; 0x2a
 8006e10:	d015      	beq.n	8006e3e <_svfiprintf_r+0xea>
 8006e12:	462f      	mov	r7, r5
 8006e14:	2000      	movs	r0, #0
 8006e16:	250a      	movs	r5, #10
 8006e18:	9a07      	ldr	r2, [sp, #28]
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e20:	3b30      	subs	r3, #48	; 0x30
 8006e22:	2b09      	cmp	r3, #9
 8006e24:	d94d      	bls.n	8006ec2 <_svfiprintf_r+0x16e>
 8006e26:	b1b8      	cbz	r0, 8006e58 <_svfiprintf_r+0x104>
 8006e28:	e00f      	b.n	8006e4a <_svfiprintf_r+0xf6>
 8006e2a:	462f      	mov	r7, r5
 8006e2c:	e7b8      	b.n	8006da0 <_svfiprintf_r+0x4c>
 8006e2e:	4a40      	ldr	r2, [pc, #256]	; (8006f30 <_svfiprintf_r+0x1dc>)
 8006e30:	463d      	mov	r5, r7
 8006e32:	1a80      	subs	r0, r0, r2
 8006e34:	fa0b f000 	lsl.w	r0, fp, r0
 8006e38:	4318      	orrs	r0, r3
 8006e3a:	9004      	str	r0, [sp, #16]
 8006e3c:	e7d3      	b.n	8006de6 <_svfiprintf_r+0x92>
 8006e3e:	9a03      	ldr	r2, [sp, #12]
 8006e40:	1d11      	adds	r1, r2, #4
 8006e42:	6812      	ldr	r2, [r2, #0]
 8006e44:	9103      	str	r1, [sp, #12]
 8006e46:	2a00      	cmp	r2, #0
 8006e48:	db01      	blt.n	8006e4e <_svfiprintf_r+0xfa>
 8006e4a:	9207      	str	r2, [sp, #28]
 8006e4c:	e004      	b.n	8006e58 <_svfiprintf_r+0x104>
 8006e4e:	4252      	negs	r2, r2
 8006e50:	f043 0302 	orr.w	r3, r3, #2
 8006e54:	9207      	str	r2, [sp, #28]
 8006e56:	9304      	str	r3, [sp, #16]
 8006e58:	783b      	ldrb	r3, [r7, #0]
 8006e5a:	2b2e      	cmp	r3, #46	; 0x2e
 8006e5c:	d10c      	bne.n	8006e78 <_svfiprintf_r+0x124>
 8006e5e:	787b      	ldrb	r3, [r7, #1]
 8006e60:	2b2a      	cmp	r3, #42	; 0x2a
 8006e62:	d133      	bne.n	8006ecc <_svfiprintf_r+0x178>
 8006e64:	9b03      	ldr	r3, [sp, #12]
 8006e66:	3702      	adds	r7, #2
 8006e68:	1d1a      	adds	r2, r3, #4
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	9203      	str	r2, [sp, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	bfb8      	it	lt
 8006e72:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e76:	9305      	str	r3, [sp, #20]
 8006e78:	4d2e      	ldr	r5, [pc, #184]	; (8006f34 <_svfiprintf_r+0x1e0>)
 8006e7a:	2203      	movs	r2, #3
 8006e7c:	7839      	ldrb	r1, [r7, #0]
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f000 f9e8 	bl	8007254 <memchr>
 8006e84:	b138      	cbz	r0, 8006e96 <_svfiprintf_r+0x142>
 8006e86:	2340      	movs	r3, #64	; 0x40
 8006e88:	1b40      	subs	r0, r0, r5
 8006e8a:	fa03 f000 	lsl.w	r0, r3, r0
 8006e8e:	9b04      	ldr	r3, [sp, #16]
 8006e90:	3701      	adds	r7, #1
 8006e92:	4303      	orrs	r3, r0
 8006e94:	9304      	str	r3, [sp, #16]
 8006e96:	7839      	ldrb	r1, [r7, #0]
 8006e98:	2206      	movs	r2, #6
 8006e9a:	4827      	ldr	r0, [pc, #156]	; (8006f38 <_svfiprintf_r+0x1e4>)
 8006e9c:	1c7e      	adds	r6, r7, #1
 8006e9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ea2:	f000 f9d7 	bl	8007254 <memchr>
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	d038      	beq.n	8006f1c <_svfiprintf_r+0x1c8>
 8006eaa:	4b24      	ldr	r3, [pc, #144]	; (8006f3c <_svfiprintf_r+0x1e8>)
 8006eac:	bb13      	cbnz	r3, 8006ef4 <_svfiprintf_r+0x1a0>
 8006eae:	9b03      	ldr	r3, [sp, #12]
 8006eb0:	3307      	adds	r3, #7
 8006eb2:	f023 0307 	bic.w	r3, r3, #7
 8006eb6:	3308      	adds	r3, #8
 8006eb8:	9303      	str	r3, [sp, #12]
 8006eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ebc:	444b      	add	r3, r9
 8006ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8006ec0:	e76d      	b.n	8006d9e <_svfiprintf_r+0x4a>
 8006ec2:	fb05 3202 	mla	r2, r5, r2, r3
 8006ec6:	2001      	movs	r0, #1
 8006ec8:	460f      	mov	r7, r1
 8006eca:	e7a6      	b.n	8006e1a <_svfiprintf_r+0xc6>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	250a      	movs	r5, #10
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	3701      	adds	r7, #1
 8006ed4:	9305      	str	r3, [sp, #20]
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006edc:	3a30      	subs	r2, #48	; 0x30
 8006ede:	2a09      	cmp	r2, #9
 8006ee0:	d903      	bls.n	8006eea <_svfiprintf_r+0x196>
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0c8      	beq.n	8006e78 <_svfiprintf_r+0x124>
 8006ee6:	9105      	str	r1, [sp, #20]
 8006ee8:	e7c6      	b.n	8006e78 <_svfiprintf_r+0x124>
 8006eea:	fb05 2101 	mla	r1, r5, r1, r2
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4607      	mov	r7, r0
 8006ef2:	e7f0      	b.n	8006ed6 <_svfiprintf_r+0x182>
 8006ef4:	ab03      	add	r3, sp, #12
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	4622      	mov	r2, r4
 8006efa:	4b11      	ldr	r3, [pc, #68]	; (8006f40 <_svfiprintf_r+0x1ec>)
 8006efc:	a904      	add	r1, sp, #16
 8006efe:	4640      	mov	r0, r8
 8006f00:	f3af 8000 	nop.w
 8006f04:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006f08:	4681      	mov	r9, r0
 8006f0a:	d1d6      	bne.n	8006eba <_svfiprintf_r+0x166>
 8006f0c:	89a3      	ldrh	r3, [r4, #12]
 8006f0e:	065b      	lsls	r3, r3, #25
 8006f10:	f53f af35 	bmi.w	8006d7e <_svfiprintf_r+0x2a>
 8006f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f16:	b01d      	add	sp, #116	; 0x74
 8006f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1c:	ab03      	add	r3, sp, #12
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	4622      	mov	r2, r4
 8006f22:	4b07      	ldr	r3, [pc, #28]	; (8006f40 <_svfiprintf_r+0x1ec>)
 8006f24:	a904      	add	r1, sp, #16
 8006f26:	4640      	mov	r0, r8
 8006f28:	f000 f882 	bl	8007030 <_printf_i>
 8006f2c:	e7ea      	b.n	8006f04 <_svfiprintf_r+0x1b0>
 8006f2e:	bf00      	nop
 8006f30:	08007530 	.word	0x08007530
 8006f34:	08007536 	.word	0x08007536
 8006f38:	0800753a 	.word	0x0800753a
 8006f3c:	00000000 	.word	0x00000000
 8006f40:	08006ca1 	.word	0x08006ca1

08006f44 <_printf_common>:
 8006f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f48:	4691      	mov	r9, r2
 8006f4a:	461f      	mov	r7, r3
 8006f4c:	688a      	ldr	r2, [r1, #8]
 8006f4e:	690b      	ldr	r3, [r1, #16]
 8006f50:	4606      	mov	r6, r0
 8006f52:	4293      	cmp	r3, r2
 8006f54:	bfb8      	it	lt
 8006f56:	4613      	movlt	r3, r2
 8006f58:	f8c9 3000 	str.w	r3, [r9]
 8006f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f60:	460c      	mov	r4, r1
 8006f62:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f66:	b112      	cbz	r2, 8006f6e <_printf_common+0x2a>
 8006f68:	3301      	adds	r3, #1
 8006f6a:	f8c9 3000 	str.w	r3, [r9]
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	0699      	lsls	r1, r3, #26
 8006f72:	bf42      	ittt	mi
 8006f74:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006f78:	3302      	addmi	r3, #2
 8006f7a:	f8c9 3000 	strmi.w	r3, [r9]
 8006f7e:	6825      	ldr	r5, [r4, #0]
 8006f80:	f015 0506 	ands.w	r5, r5, #6
 8006f84:	d107      	bne.n	8006f96 <_printf_common+0x52>
 8006f86:	f104 0a19 	add.w	sl, r4, #25
 8006f8a:	68e3      	ldr	r3, [r4, #12]
 8006f8c:	f8d9 2000 	ldr.w	r2, [r9]
 8006f90:	1a9b      	subs	r3, r3, r2
 8006f92:	42ab      	cmp	r3, r5
 8006f94:	dc29      	bgt.n	8006fea <_printf_common+0xa6>
 8006f96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006f9a:	6822      	ldr	r2, [r4, #0]
 8006f9c:	3300      	adds	r3, #0
 8006f9e:	bf18      	it	ne
 8006fa0:	2301      	movne	r3, #1
 8006fa2:	0692      	lsls	r2, r2, #26
 8006fa4:	d42e      	bmi.n	8007004 <_printf_common+0xc0>
 8006fa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006faa:	4639      	mov	r1, r7
 8006fac:	4630      	mov	r0, r6
 8006fae:	47c0      	blx	r8
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	d021      	beq.n	8006ff8 <_printf_common+0xb4>
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	68e5      	ldr	r5, [r4, #12]
 8006fb8:	f003 0306 	and.w	r3, r3, #6
 8006fbc:	2b04      	cmp	r3, #4
 8006fbe:	bf18      	it	ne
 8006fc0:	2500      	movne	r5, #0
 8006fc2:	f8d9 2000 	ldr.w	r2, [r9]
 8006fc6:	f04f 0900 	mov.w	r9, #0
 8006fca:	bf08      	it	eq
 8006fcc:	1aad      	subeq	r5, r5, r2
 8006fce:	68a3      	ldr	r3, [r4, #8]
 8006fd0:	6922      	ldr	r2, [r4, #16]
 8006fd2:	bf08      	it	eq
 8006fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	bfc4      	itt	gt
 8006fdc:	1a9b      	subgt	r3, r3, r2
 8006fde:	18ed      	addgt	r5, r5, r3
 8006fe0:	341a      	adds	r4, #26
 8006fe2:	454d      	cmp	r5, r9
 8006fe4:	d11a      	bne.n	800701c <_printf_common+0xd8>
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	e008      	b.n	8006ffc <_printf_common+0xb8>
 8006fea:	2301      	movs	r3, #1
 8006fec:	4652      	mov	r2, sl
 8006fee:	4639      	mov	r1, r7
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	47c0      	blx	r8
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d103      	bne.n	8007000 <_printf_common+0xbc>
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007000:	3501      	adds	r5, #1
 8007002:	e7c2      	b.n	8006f8a <_printf_common+0x46>
 8007004:	2030      	movs	r0, #48	; 0x30
 8007006:	18e1      	adds	r1, r4, r3
 8007008:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007012:	4422      	add	r2, r4
 8007014:	3302      	adds	r3, #2
 8007016:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800701a:	e7c4      	b.n	8006fa6 <_printf_common+0x62>
 800701c:	2301      	movs	r3, #1
 800701e:	4622      	mov	r2, r4
 8007020:	4639      	mov	r1, r7
 8007022:	4630      	mov	r0, r6
 8007024:	47c0      	blx	r8
 8007026:	3001      	adds	r0, #1
 8007028:	d0e6      	beq.n	8006ff8 <_printf_common+0xb4>
 800702a:	f109 0901 	add.w	r9, r9, #1
 800702e:	e7d8      	b.n	8006fe2 <_printf_common+0x9e>

08007030 <_printf_i>:
 8007030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007034:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007038:	460c      	mov	r4, r1
 800703a:	7e09      	ldrb	r1, [r1, #24]
 800703c:	b085      	sub	sp, #20
 800703e:	296e      	cmp	r1, #110	; 0x6e
 8007040:	4617      	mov	r7, r2
 8007042:	4606      	mov	r6, r0
 8007044:	4698      	mov	r8, r3
 8007046:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007048:	f000 80b3 	beq.w	80071b2 <_printf_i+0x182>
 800704c:	d822      	bhi.n	8007094 <_printf_i+0x64>
 800704e:	2963      	cmp	r1, #99	; 0x63
 8007050:	d036      	beq.n	80070c0 <_printf_i+0x90>
 8007052:	d80a      	bhi.n	800706a <_printf_i+0x3a>
 8007054:	2900      	cmp	r1, #0
 8007056:	f000 80b9 	beq.w	80071cc <_printf_i+0x19c>
 800705a:	2958      	cmp	r1, #88	; 0x58
 800705c:	f000 8083 	beq.w	8007166 <_printf_i+0x136>
 8007060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007064:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007068:	e032      	b.n	80070d0 <_printf_i+0xa0>
 800706a:	2964      	cmp	r1, #100	; 0x64
 800706c:	d001      	beq.n	8007072 <_printf_i+0x42>
 800706e:	2969      	cmp	r1, #105	; 0x69
 8007070:	d1f6      	bne.n	8007060 <_printf_i+0x30>
 8007072:	6820      	ldr	r0, [r4, #0]
 8007074:	6813      	ldr	r3, [r2, #0]
 8007076:	0605      	lsls	r5, r0, #24
 8007078:	f103 0104 	add.w	r1, r3, #4
 800707c:	d52a      	bpl.n	80070d4 <_printf_i+0xa4>
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6011      	str	r1, [r2, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	da03      	bge.n	800708e <_printf_i+0x5e>
 8007086:	222d      	movs	r2, #45	; 0x2d
 8007088:	425b      	negs	r3, r3
 800708a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800708e:	486f      	ldr	r0, [pc, #444]	; (800724c <_printf_i+0x21c>)
 8007090:	220a      	movs	r2, #10
 8007092:	e039      	b.n	8007108 <_printf_i+0xd8>
 8007094:	2973      	cmp	r1, #115	; 0x73
 8007096:	f000 809d 	beq.w	80071d4 <_printf_i+0x1a4>
 800709a:	d808      	bhi.n	80070ae <_printf_i+0x7e>
 800709c:	296f      	cmp	r1, #111	; 0x6f
 800709e:	d020      	beq.n	80070e2 <_printf_i+0xb2>
 80070a0:	2970      	cmp	r1, #112	; 0x70
 80070a2:	d1dd      	bne.n	8007060 <_printf_i+0x30>
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	f043 0320 	orr.w	r3, r3, #32
 80070aa:	6023      	str	r3, [r4, #0]
 80070ac:	e003      	b.n	80070b6 <_printf_i+0x86>
 80070ae:	2975      	cmp	r1, #117	; 0x75
 80070b0:	d017      	beq.n	80070e2 <_printf_i+0xb2>
 80070b2:	2978      	cmp	r1, #120	; 0x78
 80070b4:	d1d4      	bne.n	8007060 <_printf_i+0x30>
 80070b6:	2378      	movs	r3, #120	; 0x78
 80070b8:	4865      	ldr	r0, [pc, #404]	; (8007250 <_printf_i+0x220>)
 80070ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070be:	e055      	b.n	800716c <_printf_i+0x13c>
 80070c0:	6813      	ldr	r3, [r2, #0]
 80070c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070c6:	1d19      	adds	r1, r3, #4
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6011      	str	r1, [r2, #0]
 80070cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070d0:	2301      	movs	r3, #1
 80070d2:	e08c      	b.n	80071ee <_printf_i+0x1be>
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070da:	6011      	str	r1, [r2, #0]
 80070dc:	bf18      	it	ne
 80070de:	b21b      	sxthne	r3, r3
 80070e0:	e7cf      	b.n	8007082 <_printf_i+0x52>
 80070e2:	6813      	ldr	r3, [r2, #0]
 80070e4:	6825      	ldr	r5, [r4, #0]
 80070e6:	1d18      	adds	r0, r3, #4
 80070e8:	6010      	str	r0, [r2, #0]
 80070ea:	0628      	lsls	r0, r5, #24
 80070ec:	d501      	bpl.n	80070f2 <_printf_i+0xc2>
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	e002      	b.n	80070f8 <_printf_i+0xc8>
 80070f2:	0668      	lsls	r0, r5, #25
 80070f4:	d5fb      	bpl.n	80070ee <_printf_i+0xbe>
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	296f      	cmp	r1, #111	; 0x6f
 80070fa:	bf14      	ite	ne
 80070fc:	220a      	movne	r2, #10
 80070fe:	2208      	moveq	r2, #8
 8007100:	4852      	ldr	r0, [pc, #328]	; (800724c <_printf_i+0x21c>)
 8007102:	2100      	movs	r1, #0
 8007104:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007108:	6865      	ldr	r5, [r4, #4]
 800710a:	2d00      	cmp	r5, #0
 800710c:	60a5      	str	r5, [r4, #8]
 800710e:	f2c0 8095 	blt.w	800723c <_printf_i+0x20c>
 8007112:	6821      	ldr	r1, [r4, #0]
 8007114:	f021 0104 	bic.w	r1, r1, #4
 8007118:	6021      	str	r1, [r4, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d13d      	bne.n	800719a <_printf_i+0x16a>
 800711e:	2d00      	cmp	r5, #0
 8007120:	f040 808e 	bne.w	8007240 <_printf_i+0x210>
 8007124:	4665      	mov	r5, ip
 8007126:	2a08      	cmp	r2, #8
 8007128:	d10b      	bne.n	8007142 <_printf_i+0x112>
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	07db      	lsls	r3, r3, #31
 800712e:	d508      	bpl.n	8007142 <_printf_i+0x112>
 8007130:	6923      	ldr	r3, [r4, #16]
 8007132:	6862      	ldr	r2, [r4, #4]
 8007134:	429a      	cmp	r2, r3
 8007136:	bfde      	ittt	le
 8007138:	2330      	movle	r3, #48	; 0x30
 800713a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800713e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007142:	ebac 0305 	sub.w	r3, ip, r5
 8007146:	6123      	str	r3, [r4, #16]
 8007148:	f8cd 8000 	str.w	r8, [sp]
 800714c:	463b      	mov	r3, r7
 800714e:	aa03      	add	r2, sp, #12
 8007150:	4621      	mov	r1, r4
 8007152:	4630      	mov	r0, r6
 8007154:	f7ff fef6 	bl	8006f44 <_printf_common>
 8007158:	3001      	adds	r0, #1
 800715a:	d14d      	bne.n	80071f8 <_printf_i+0x1c8>
 800715c:	f04f 30ff 	mov.w	r0, #4294967295
 8007160:	b005      	add	sp, #20
 8007162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007166:	4839      	ldr	r0, [pc, #228]	; (800724c <_printf_i+0x21c>)
 8007168:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800716c:	6813      	ldr	r3, [r2, #0]
 800716e:	6821      	ldr	r1, [r4, #0]
 8007170:	1d1d      	adds	r5, r3, #4
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6015      	str	r5, [r2, #0]
 8007176:	060a      	lsls	r2, r1, #24
 8007178:	d50b      	bpl.n	8007192 <_printf_i+0x162>
 800717a:	07ca      	lsls	r2, r1, #31
 800717c:	bf44      	itt	mi
 800717e:	f041 0120 	orrmi.w	r1, r1, #32
 8007182:	6021      	strmi	r1, [r4, #0]
 8007184:	b91b      	cbnz	r3, 800718e <_printf_i+0x15e>
 8007186:	6822      	ldr	r2, [r4, #0]
 8007188:	f022 0220 	bic.w	r2, r2, #32
 800718c:	6022      	str	r2, [r4, #0]
 800718e:	2210      	movs	r2, #16
 8007190:	e7b7      	b.n	8007102 <_printf_i+0xd2>
 8007192:	064d      	lsls	r5, r1, #25
 8007194:	bf48      	it	mi
 8007196:	b29b      	uxthmi	r3, r3
 8007198:	e7ef      	b.n	800717a <_printf_i+0x14a>
 800719a:	4665      	mov	r5, ip
 800719c:	fbb3 f1f2 	udiv	r1, r3, r2
 80071a0:	fb02 3311 	mls	r3, r2, r1, r3
 80071a4:	5cc3      	ldrb	r3, [r0, r3]
 80071a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80071aa:	460b      	mov	r3, r1
 80071ac:	2900      	cmp	r1, #0
 80071ae:	d1f5      	bne.n	800719c <_printf_i+0x16c>
 80071b0:	e7b9      	b.n	8007126 <_printf_i+0xf6>
 80071b2:	6813      	ldr	r3, [r2, #0]
 80071b4:	6825      	ldr	r5, [r4, #0]
 80071b6:	1d18      	adds	r0, r3, #4
 80071b8:	6961      	ldr	r1, [r4, #20]
 80071ba:	6010      	str	r0, [r2, #0]
 80071bc:	0628      	lsls	r0, r5, #24
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	d501      	bpl.n	80071c6 <_printf_i+0x196>
 80071c2:	6019      	str	r1, [r3, #0]
 80071c4:	e002      	b.n	80071cc <_printf_i+0x19c>
 80071c6:	066a      	lsls	r2, r5, #25
 80071c8:	d5fb      	bpl.n	80071c2 <_printf_i+0x192>
 80071ca:	8019      	strh	r1, [r3, #0]
 80071cc:	2300      	movs	r3, #0
 80071ce:	4665      	mov	r5, ip
 80071d0:	6123      	str	r3, [r4, #16]
 80071d2:	e7b9      	b.n	8007148 <_printf_i+0x118>
 80071d4:	6813      	ldr	r3, [r2, #0]
 80071d6:	1d19      	adds	r1, r3, #4
 80071d8:	6011      	str	r1, [r2, #0]
 80071da:	681d      	ldr	r5, [r3, #0]
 80071dc:	6862      	ldr	r2, [r4, #4]
 80071de:	2100      	movs	r1, #0
 80071e0:	4628      	mov	r0, r5
 80071e2:	f000 f837 	bl	8007254 <memchr>
 80071e6:	b108      	cbz	r0, 80071ec <_printf_i+0x1bc>
 80071e8:	1b40      	subs	r0, r0, r5
 80071ea:	6060      	str	r0, [r4, #4]
 80071ec:	6863      	ldr	r3, [r4, #4]
 80071ee:	6123      	str	r3, [r4, #16]
 80071f0:	2300      	movs	r3, #0
 80071f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071f6:	e7a7      	b.n	8007148 <_printf_i+0x118>
 80071f8:	6923      	ldr	r3, [r4, #16]
 80071fa:	462a      	mov	r2, r5
 80071fc:	4639      	mov	r1, r7
 80071fe:	4630      	mov	r0, r6
 8007200:	47c0      	blx	r8
 8007202:	3001      	adds	r0, #1
 8007204:	d0aa      	beq.n	800715c <_printf_i+0x12c>
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	079b      	lsls	r3, r3, #30
 800720a:	d413      	bmi.n	8007234 <_printf_i+0x204>
 800720c:	68e0      	ldr	r0, [r4, #12]
 800720e:	9b03      	ldr	r3, [sp, #12]
 8007210:	4298      	cmp	r0, r3
 8007212:	bfb8      	it	lt
 8007214:	4618      	movlt	r0, r3
 8007216:	e7a3      	b.n	8007160 <_printf_i+0x130>
 8007218:	2301      	movs	r3, #1
 800721a:	464a      	mov	r2, r9
 800721c:	4639      	mov	r1, r7
 800721e:	4630      	mov	r0, r6
 8007220:	47c0      	blx	r8
 8007222:	3001      	adds	r0, #1
 8007224:	d09a      	beq.n	800715c <_printf_i+0x12c>
 8007226:	3501      	adds	r5, #1
 8007228:	68e3      	ldr	r3, [r4, #12]
 800722a:	9a03      	ldr	r2, [sp, #12]
 800722c:	1a9b      	subs	r3, r3, r2
 800722e:	42ab      	cmp	r3, r5
 8007230:	dcf2      	bgt.n	8007218 <_printf_i+0x1e8>
 8007232:	e7eb      	b.n	800720c <_printf_i+0x1dc>
 8007234:	2500      	movs	r5, #0
 8007236:	f104 0919 	add.w	r9, r4, #25
 800723a:	e7f5      	b.n	8007228 <_printf_i+0x1f8>
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1ac      	bne.n	800719a <_printf_i+0x16a>
 8007240:	7803      	ldrb	r3, [r0, #0]
 8007242:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007246:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800724a:	e76c      	b.n	8007126 <_printf_i+0xf6>
 800724c:	08007541 	.word	0x08007541
 8007250:	08007552 	.word	0x08007552

08007254 <memchr>:
 8007254:	b510      	push	{r4, lr}
 8007256:	b2c9      	uxtb	r1, r1
 8007258:	4402      	add	r2, r0
 800725a:	4290      	cmp	r0, r2
 800725c:	4603      	mov	r3, r0
 800725e:	d101      	bne.n	8007264 <memchr+0x10>
 8007260:	2300      	movs	r3, #0
 8007262:	e003      	b.n	800726c <memchr+0x18>
 8007264:	781c      	ldrb	r4, [r3, #0]
 8007266:	3001      	adds	r0, #1
 8007268:	428c      	cmp	r4, r1
 800726a:	d1f6      	bne.n	800725a <memchr+0x6>
 800726c:	4618      	mov	r0, r3
 800726e:	bd10      	pop	{r4, pc}

08007270 <memcpy>:
 8007270:	b510      	push	{r4, lr}
 8007272:	1e43      	subs	r3, r0, #1
 8007274:	440a      	add	r2, r1
 8007276:	4291      	cmp	r1, r2
 8007278:	d100      	bne.n	800727c <memcpy+0xc>
 800727a:	bd10      	pop	{r4, pc}
 800727c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007280:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007284:	e7f7      	b.n	8007276 <memcpy+0x6>

08007286 <memmove>:
 8007286:	4288      	cmp	r0, r1
 8007288:	b510      	push	{r4, lr}
 800728a:	eb01 0302 	add.w	r3, r1, r2
 800728e:	d807      	bhi.n	80072a0 <memmove+0x1a>
 8007290:	1e42      	subs	r2, r0, #1
 8007292:	4299      	cmp	r1, r3
 8007294:	d00a      	beq.n	80072ac <memmove+0x26>
 8007296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800729a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800729e:	e7f8      	b.n	8007292 <memmove+0xc>
 80072a0:	4283      	cmp	r3, r0
 80072a2:	d9f5      	bls.n	8007290 <memmove+0xa>
 80072a4:	1881      	adds	r1, r0, r2
 80072a6:	1ad2      	subs	r2, r2, r3
 80072a8:	42d3      	cmn	r3, r2
 80072aa:	d100      	bne.n	80072ae <memmove+0x28>
 80072ac:	bd10      	pop	{r4, pc}
 80072ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80072b6:	e7f7      	b.n	80072a8 <memmove+0x22>

080072b8 <_free_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	4605      	mov	r5, r0
 80072bc:	2900      	cmp	r1, #0
 80072be:	d043      	beq.n	8007348 <_free_r+0x90>
 80072c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072c4:	1f0c      	subs	r4, r1, #4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	bfb8      	it	lt
 80072ca:	18e4      	addlt	r4, r4, r3
 80072cc:	f000 f8d0 	bl	8007470 <__malloc_lock>
 80072d0:	4a1e      	ldr	r2, [pc, #120]	; (800734c <_free_r+0x94>)
 80072d2:	6813      	ldr	r3, [r2, #0]
 80072d4:	4610      	mov	r0, r2
 80072d6:	b933      	cbnz	r3, 80072e6 <_free_r+0x2e>
 80072d8:	6063      	str	r3, [r4, #4]
 80072da:	6014      	str	r4, [r2, #0]
 80072dc:	4628      	mov	r0, r5
 80072de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072e2:	f000 b8c6 	b.w	8007472 <__malloc_unlock>
 80072e6:	42a3      	cmp	r3, r4
 80072e8:	d90b      	bls.n	8007302 <_free_r+0x4a>
 80072ea:	6821      	ldr	r1, [r4, #0]
 80072ec:	1862      	adds	r2, r4, r1
 80072ee:	4293      	cmp	r3, r2
 80072f0:	bf01      	itttt	eq
 80072f2:	681a      	ldreq	r2, [r3, #0]
 80072f4:	685b      	ldreq	r3, [r3, #4]
 80072f6:	1852      	addeq	r2, r2, r1
 80072f8:	6022      	streq	r2, [r4, #0]
 80072fa:	6063      	str	r3, [r4, #4]
 80072fc:	6004      	str	r4, [r0, #0]
 80072fe:	e7ed      	b.n	80072dc <_free_r+0x24>
 8007300:	4613      	mov	r3, r2
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	b10a      	cbz	r2, 800730a <_free_r+0x52>
 8007306:	42a2      	cmp	r2, r4
 8007308:	d9fa      	bls.n	8007300 <_free_r+0x48>
 800730a:	6819      	ldr	r1, [r3, #0]
 800730c:	1858      	adds	r0, r3, r1
 800730e:	42a0      	cmp	r0, r4
 8007310:	d10b      	bne.n	800732a <_free_r+0x72>
 8007312:	6820      	ldr	r0, [r4, #0]
 8007314:	4401      	add	r1, r0
 8007316:	1858      	adds	r0, r3, r1
 8007318:	4282      	cmp	r2, r0
 800731a:	6019      	str	r1, [r3, #0]
 800731c:	d1de      	bne.n	80072dc <_free_r+0x24>
 800731e:	6810      	ldr	r0, [r2, #0]
 8007320:	6852      	ldr	r2, [r2, #4]
 8007322:	4401      	add	r1, r0
 8007324:	6019      	str	r1, [r3, #0]
 8007326:	605a      	str	r2, [r3, #4]
 8007328:	e7d8      	b.n	80072dc <_free_r+0x24>
 800732a:	d902      	bls.n	8007332 <_free_r+0x7a>
 800732c:	230c      	movs	r3, #12
 800732e:	602b      	str	r3, [r5, #0]
 8007330:	e7d4      	b.n	80072dc <_free_r+0x24>
 8007332:	6820      	ldr	r0, [r4, #0]
 8007334:	1821      	adds	r1, r4, r0
 8007336:	428a      	cmp	r2, r1
 8007338:	bf01      	itttt	eq
 800733a:	6811      	ldreq	r1, [r2, #0]
 800733c:	6852      	ldreq	r2, [r2, #4]
 800733e:	1809      	addeq	r1, r1, r0
 8007340:	6021      	streq	r1, [r4, #0]
 8007342:	6062      	str	r2, [r4, #4]
 8007344:	605c      	str	r4, [r3, #4]
 8007346:	e7c9      	b.n	80072dc <_free_r+0x24>
 8007348:	bd38      	pop	{r3, r4, r5, pc}
 800734a:	bf00      	nop
 800734c:	20000424 	.word	0x20000424

08007350 <_malloc_r>:
 8007350:	b570      	push	{r4, r5, r6, lr}
 8007352:	1ccd      	adds	r5, r1, #3
 8007354:	f025 0503 	bic.w	r5, r5, #3
 8007358:	3508      	adds	r5, #8
 800735a:	2d0c      	cmp	r5, #12
 800735c:	bf38      	it	cc
 800735e:	250c      	movcc	r5, #12
 8007360:	2d00      	cmp	r5, #0
 8007362:	4606      	mov	r6, r0
 8007364:	db01      	blt.n	800736a <_malloc_r+0x1a>
 8007366:	42a9      	cmp	r1, r5
 8007368:	d903      	bls.n	8007372 <_malloc_r+0x22>
 800736a:	230c      	movs	r3, #12
 800736c:	6033      	str	r3, [r6, #0]
 800736e:	2000      	movs	r0, #0
 8007370:	bd70      	pop	{r4, r5, r6, pc}
 8007372:	f000 f87d 	bl	8007470 <__malloc_lock>
 8007376:	4a21      	ldr	r2, [pc, #132]	; (80073fc <_malloc_r+0xac>)
 8007378:	6814      	ldr	r4, [r2, #0]
 800737a:	4621      	mov	r1, r4
 800737c:	b991      	cbnz	r1, 80073a4 <_malloc_r+0x54>
 800737e:	4c20      	ldr	r4, [pc, #128]	; (8007400 <_malloc_r+0xb0>)
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	b91b      	cbnz	r3, 800738c <_malloc_r+0x3c>
 8007384:	4630      	mov	r0, r6
 8007386:	f000 f863 	bl	8007450 <_sbrk_r>
 800738a:	6020      	str	r0, [r4, #0]
 800738c:	4629      	mov	r1, r5
 800738e:	4630      	mov	r0, r6
 8007390:	f000 f85e 	bl	8007450 <_sbrk_r>
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	d124      	bne.n	80073e2 <_malloc_r+0x92>
 8007398:	230c      	movs	r3, #12
 800739a:	4630      	mov	r0, r6
 800739c:	6033      	str	r3, [r6, #0]
 800739e:	f000 f868 	bl	8007472 <__malloc_unlock>
 80073a2:	e7e4      	b.n	800736e <_malloc_r+0x1e>
 80073a4:	680b      	ldr	r3, [r1, #0]
 80073a6:	1b5b      	subs	r3, r3, r5
 80073a8:	d418      	bmi.n	80073dc <_malloc_r+0x8c>
 80073aa:	2b0b      	cmp	r3, #11
 80073ac:	d90f      	bls.n	80073ce <_malloc_r+0x7e>
 80073ae:	600b      	str	r3, [r1, #0]
 80073b0:	18cc      	adds	r4, r1, r3
 80073b2:	50cd      	str	r5, [r1, r3]
 80073b4:	4630      	mov	r0, r6
 80073b6:	f000 f85c 	bl	8007472 <__malloc_unlock>
 80073ba:	f104 000b 	add.w	r0, r4, #11
 80073be:	1d23      	adds	r3, r4, #4
 80073c0:	f020 0007 	bic.w	r0, r0, #7
 80073c4:	1ac3      	subs	r3, r0, r3
 80073c6:	d0d3      	beq.n	8007370 <_malloc_r+0x20>
 80073c8:	425a      	negs	r2, r3
 80073ca:	50e2      	str	r2, [r4, r3]
 80073cc:	e7d0      	b.n	8007370 <_malloc_r+0x20>
 80073ce:	684b      	ldr	r3, [r1, #4]
 80073d0:	428c      	cmp	r4, r1
 80073d2:	bf16      	itet	ne
 80073d4:	6063      	strne	r3, [r4, #4]
 80073d6:	6013      	streq	r3, [r2, #0]
 80073d8:	460c      	movne	r4, r1
 80073da:	e7eb      	b.n	80073b4 <_malloc_r+0x64>
 80073dc:	460c      	mov	r4, r1
 80073de:	6849      	ldr	r1, [r1, #4]
 80073e0:	e7cc      	b.n	800737c <_malloc_r+0x2c>
 80073e2:	1cc4      	adds	r4, r0, #3
 80073e4:	f024 0403 	bic.w	r4, r4, #3
 80073e8:	42a0      	cmp	r0, r4
 80073ea:	d005      	beq.n	80073f8 <_malloc_r+0xa8>
 80073ec:	1a21      	subs	r1, r4, r0
 80073ee:	4630      	mov	r0, r6
 80073f0:	f000 f82e 	bl	8007450 <_sbrk_r>
 80073f4:	3001      	adds	r0, #1
 80073f6:	d0cf      	beq.n	8007398 <_malloc_r+0x48>
 80073f8:	6025      	str	r5, [r4, #0]
 80073fa:	e7db      	b.n	80073b4 <_malloc_r+0x64>
 80073fc:	20000424 	.word	0x20000424
 8007400:	20000428 	.word	0x20000428

08007404 <_realloc_r>:
 8007404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007406:	4607      	mov	r7, r0
 8007408:	4614      	mov	r4, r2
 800740a:	460e      	mov	r6, r1
 800740c:	b921      	cbnz	r1, 8007418 <_realloc_r+0x14>
 800740e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007412:	4611      	mov	r1, r2
 8007414:	f7ff bf9c 	b.w	8007350 <_malloc_r>
 8007418:	b922      	cbnz	r2, 8007424 <_realloc_r+0x20>
 800741a:	f7ff ff4d 	bl	80072b8 <_free_r>
 800741e:	4625      	mov	r5, r4
 8007420:	4628      	mov	r0, r5
 8007422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007424:	f000 f826 	bl	8007474 <_malloc_usable_size_r>
 8007428:	42a0      	cmp	r0, r4
 800742a:	d20f      	bcs.n	800744c <_realloc_r+0x48>
 800742c:	4621      	mov	r1, r4
 800742e:	4638      	mov	r0, r7
 8007430:	f7ff ff8e 	bl	8007350 <_malloc_r>
 8007434:	4605      	mov	r5, r0
 8007436:	2800      	cmp	r0, #0
 8007438:	d0f2      	beq.n	8007420 <_realloc_r+0x1c>
 800743a:	4631      	mov	r1, r6
 800743c:	4622      	mov	r2, r4
 800743e:	f7ff ff17 	bl	8007270 <memcpy>
 8007442:	4631      	mov	r1, r6
 8007444:	4638      	mov	r0, r7
 8007446:	f7ff ff37 	bl	80072b8 <_free_r>
 800744a:	e7e9      	b.n	8007420 <_realloc_r+0x1c>
 800744c:	4635      	mov	r5, r6
 800744e:	e7e7      	b.n	8007420 <_realloc_r+0x1c>

08007450 <_sbrk_r>:
 8007450:	b538      	push	{r3, r4, r5, lr}
 8007452:	2300      	movs	r3, #0
 8007454:	4c05      	ldr	r4, [pc, #20]	; (800746c <_sbrk_r+0x1c>)
 8007456:	4605      	mov	r5, r0
 8007458:	4608      	mov	r0, r1
 800745a:	6023      	str	r3, [r4, #0]
 800745c:	f7f9 fcc8 	bl	8000df0 <_sbrk>
 8007460:	1c43      	adds	r3, r0, #1
 8007462:	d102      	bne.n	800746a <_sbrk_r+0x1a>
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	b103      	cbz	r3, 800746a <_sbrk_r+0x1a>
 8007468:	602b      	str	r3, [r5, #0]
 800746a:	bd38      	pop	{r3, r4, r5, pc}
 800746c:	200013a0 	.word	0x200013a0

08007470 <__malloc_lock>:
 8007470:	4770      	bx	lr

08007472 <__malloc_unlock>:
 8007472:	4770      	bx	lr

08007474 <_malloc_usable_size_r>:
 8007474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007478:	1f18      	subs	r0, r3, #4
 800747a:	2b00      	cmp	r3, #0
 800747c:	bfbc      	itt	lt
 800747e:	580b      	ldrlt	r3, [r1, r0]
 8007480:	18c0      	addlt	r0, r0, r3
 8007482:	4770      	bx	lr

08007484 <_init>:
 8007484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007486:	bf00      	nop
 8007488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748a:	bc08      	pop	{r3}
 800748c:	469e      	mov	lr, r3
 800748e:	4770      	bx	lr

08007490 <_fini>:
 8007490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007492:	bf00      	nop
 8007494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007496:	bc08      	pop	{r3}
 8007498:	469e      	mov	lr, r3
 800749a:	4770      	bx	lr
